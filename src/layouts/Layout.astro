<!doctype html>
<html lang="id">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" href="/images/hero-app.png" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="KomplekKita - Platform manajemen komplek perumahan modern dengan transparansi keuangan dan efisiensi administrasi" />
		<meta name="keywords" content="komplek, perumahan, manajemen, transparansi, keuangan, administrasi" />
		<title>KomplekKita - Manajemen Komplek Perumahan Modern</title>
		
		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		
		<!-- Font Awesome -->
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
		
		<!-- Leaflet Maps -->
		<link
			rel="stylesheet"
			href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
			integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
			crossorigin=""
		/>
		
		<!-- AOS Animation Library -->
		<link href="https://cdn.jsdelivr.net/npm/aos@2.3.1/dist/aos.css" rel="stylesheet">
		
		<!-- Lenis Smooth Scroll -->
		<script src="https://cdn.jsdelivr.net/npm/@studio-freight/lenis@1.0.19/dist/lenis.min.js"></script>
		
		<!-- AOS Animation Library -->
		<script src="https://unpkg.com/aos@2.3.4/dist/aos.js"></script>
		
		<!-- Lottie Web for Animations -->
		<script src="https://unpkg.com/lottie-web@5.12.2/build/player/lottie.min.js"></script>
		
		<!-- GSAP for Advanced Animations -->
		<script src="https://unpkg.com/gsap@3.12.5/dist/gsap.min.js"></script>
		<script src="https://unpkg.com/gsap@3.12.5/dist/ScrollTrigger.min.js"></script>

		<!-- Leaflet JS -->
		<script
			src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
			integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
			crossorigin=""
		></script>
    
    	<!-- Global modern scrollbar (applies site-wide) -->
    	<style>
    	  :root {
    	    --scrollbar-size: 10px;
    	    --scrollbar-bg: transparent;
    	    --scrollbar-thumb: linear-gradient(180deg, #93c5fd 0%, #3b82f6 50%, #1d4ed8 100%);
    	    --scrollbar-thumb-hover: linear-gradient(180deg, #bfdbfe 0%, #60a5fa 50%, #2563eb 100%);
    	    --scrollbar-thumb-active: linear-gradient(180deg, #93c5fd 0%, #3b82f6 50%, #1d4ed8 100%);
    	    --scrollbar-radius: 999px;
    	  }
    
    	  /* Firefox */
    	  * {
    	    scrollbar-width: thin;
    	    scrollbar-color: #60a5fa transparent;
    	  }
    
    	  /* WebKit/Chromium */
    	  *::-webkit-scrollbar {
    	    width: var(--scrollbar-size);
    	    height: var(--scrollbar-size);
    	  }
    	  *::-webkit-scrollbar-track {
    	    background: var(--scrollbar-bg);
    	  }
    	  *::-webkit-scrollbar-thumb {
    	    background: var(--scrollbar-thumb);
    	    border-radius: var(--scrollbar-radius);
    	    border: 2px solid transparent;
    	    background-clip: padding-box;
    	  }
    	  *::-webkit-scrollbar-thumb:hover {
    	    background: var(--scrollbar-thumb-hover);
    	  }
    	  *::-webkit-scrollbar-thumb:active {
    	    background: var(--scrollbar-thumb-active);
    	  }
    	  *::-webkit-scrollbar-corner {
    	    background: transparent;
    	  }
    	</style>
	</head>
	<body>
		<slot />
		
		<!-- Initialize Modern Libraries -->
		<!-- SheetJS (XLSX) for Excel parsing/creation used by register-komplek templates & import -->
		<!-- <script src="https://cdn.jsdelivr.net/npm/xlsx@0.19.3/dist/xlsx.full.min.js" integrity="sha256-Kb8a9tO2sVYQpGk8dD0Z8eS3y3w1T2vH2Wdcwq8Zy7U=" crossorigin="anonymous"></script> -->
    	<script>
    		// @ts-nocheck
		document.addEventListener('DOMContentLoaded', function() {
			// Function to initialize smooth scrolling fallback
			function initSmoothScrollFallback() {
				// Simple smooth scroll for anchor links
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute('href'));
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
						}
					});
				});
			}

			// Function to initialize animation fallback
			function initAnimationFallback() {
				// Simple intersection observer for basic animations
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							(entry.target as HTMLElement).style.opacity = '1';
							(entry.target as HTMLElement).style.transform = 'translateY(0)';
						}
					});
				}, {
					threshold: 0.1,
					rootMargin: '0px 0px -50px 0px'
				});

				// Apply fallback animations to elements with data-aos attributes
				document.querySelectorAll('[data-aos]').forEach(el => {
					(el as HTMLElement).style.opacity = '0';
					(el as HTMLElement).style.transform = 'translateY(30px)';
					(el as HTMLElement).style.transition = 'opacity 0.8s ease, transform 0.8s ease';
					observer.observe(el);
				});
			}

			// Try to initialize Lenis with timeout fallback
			try {
				setTimeout(() => {
					try {
						if (typeof window !== 'undefined' && window.Lenis && typeof window.Lenis === 'function') {
							// Initialize Lenis smooth scroll
							const lenis = new window.Lenis({
								duration: 1.2,
								easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
								direction: 'vertical',
								gestureDirection: 'vertical',
								smooth: true,
								mouseMultiplier: 1,
								smoothTouch: false,
								touchMultiplier: 2,
								infinite: false,
							});

							function raf(time) {
								try {
									lenis.raf(time);
									requestAnimationFrame(raf);
								} catch (e) {
									// Stop animation loop on error
									console.warn('Lenis animation frame error:', e);
								}
							}

							requestAnimationFrame(raf);
						} else {
							// Quietly use fallback without warning
							initSmoothScrollFallback();
						}
					} catch (error) {
						initSmoothScrollFallback();
					}
				}, 100);
			} catch (error) {
				initSmoothScrollFallback();
			}
			
			// Try to initialize AOS with timeout fallback
			try {
				setTimeout(() => {
					try {
						if (typeof window !== 'undefined' && window.AOS && typeof window.AOS.init === 'function') {
							// Initialize AOS
							window.AOS.init({
								duration: 1000,
								easing: 'ease-out-cubic',
								once: true,
								offset: 120,
								delay: 100,
								disable: false,
								startEvent: 'DOMContentLoaded',
								initClassName: 'aos-init',
								animatedClassName: 'aos-animate',
								useClassNames: false,
								disableMutationObserver: false,
								debounceDelay: 50,
								throttle: 99,
							});
							
							// Refresh AOS on window resize with error handling
							window.addEventListener('resize', function() {
								try {
									if (window.AOS && window.AOS.refresh) {
										window.AOS.refresh();
									}
								} catch (e) {
									// Silently ignore AOS refresh errors
								}
							});
						} else {
							// Quietly use fallback without warning
							initAnimationFallback();
						}
					} catch (error) {
						initAnimationFallback();
					}
				}, 200);
			} catch (error) {
				initAnimationFallback();
			}

			// Initialize mobile navigation toggle
			const navToggle = document.querySelector('.navbar-toggle');
			const navMenu = document.querySelector('.navbar-menu');
			
			if (navToggle && navMenu) {
				navToggle.addEventListener('click', function() {
					navMenu.classList.toggle('active');
					navToggle.classList.toggle('active');
				});
			}

			// Close mobile menu when clicking on links
			document.querySelectorAll('.nav-link').forEach(link => {
				link.addEventListener('click', function() {
					if (navMenu && navMenu.classList.contains('active')) {
						navMenu.classList.remove('active');
						if (navToggle) navToggle.classList.remove('active');
					}
				});
			});

			// Initialize GSAP and ScrollTrigger
			setTimeout(() => {
				if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {
					try {
						// Register ScrollTrigger plugin
						gsap.registerPlugin(ScrollTrigger);
						
						// BuildWithFlow-inspired scroll animations
						initBuildWithFlowAnimations();
						
						// Initialize Lottie animations
						initLottieAnimations();
						
						console.log('GSAP and ScrollTrigger initialized successfully');
					} catch (error) {
						console.warn('GSAP initialization failed:', error);
					}
				} else {
					console.warn('GSAP or ScrollTrigger not loaded');
				}
			}, 300);
		});

		// BuildWithFlow-inspired animations
		function initBuildWithFlowAnimations() {
			// Hero section reveal animation with enhanced BuildWithFlow style
			const heroTl = gsap.timeline();
			
			heroTl.fromTo('.hero-title', 
				{ y: 100, opacity: 0, rotationX: 20, transformOrigin: '50% 50% -50px' },
				{ y: 0, opacity: 1, rotationX: 0, duration: 1.5, ease: 'power4.out' }
			)
			.fromTo('.hero-title .highlight', 
				{ scale: 0.8, opacity: 0.5 },
				{ scale: 1, opacity: 1, duration: 1.2, ease: 'elastic.out(1, 0.5)' },
				'-=0.8'
			)
			.fromTo('.hero-subtitle', 
				{ y: 50, opacity: 0, scale: 0.9 },
				{ y: 0, opacity: 1, scale: 1, duration: 1, ease: 'power3.out' },
				'-=1'
			)
			.fromTo('.hero-actions', 
				{ y: 30, opacity: 0, scale: 0.8 },
				{ y: 0, opacity: 1, scale: 1, duration: 0.8, ease: 'back.out(1.7)' },
				'-=0.6'
			)
			.fromTo('.hero-stats .stat-item', 
				{ y: 40, opacity: 0, stagger: 0.15 },
				{ y: 0, opacity: 1, stagger: 0.15, duration: 0.8, ease: 'power2.out' },
				'-=0.4'
			);

			// Enhanced parallax effects for hero background
			gsap.to('.hero-bg', {
				yPercent: -50,
				ease: 'none',
				scrollTrigger: {
					trigger: '.hero',
					start: 'top bottom',
					end: 'bottom top',
					scrub: 1.5
				}
			});
			
			// Parallax for floating shapes with different speeds
			gsap.utils.toArray('.floating-shape').forEach((shape, i) => {
				const direction = i % 2 === 0 ? -1 : 1;
				const speed = 0.1 + (i * 0.05);
				
				gsap.to(shape, {
					y: `${direction * 100}px`,
					rotation: direction * 180,
					ease: 'none',
					scrollTrigger: {
						trigger: '.hero',
						start: 'top bottom',
						end: 'bottom top',
						scrub: speed
					}
				});
			});
			
			// Dashboard preview parallax effect with rotation
			gsap.to('.dashboard-preview', {
				rotationY: -25, 
				rotationX: 10,
				scale: 1.1,
				x: '-5%',
				ease: 'none',
				scrollTrigger: {
					trigger: '.hero',
					start: 'top top',
					end: 'bottom top',
					scrub: 1
				}
			});

			// Enhanced section reveal animations with BuildWithFlow style
			gsap.utils.toArray('.section').forEach((section, i) => {
				// Different animation style for alternating sections
				const isEven = i % 2 === 0;
				const direction = isEven ? 1 : -1;
				const startPosition = isEven ? 'top 80%' : 'top 85%';
				
				const tl = gsap.timeline({
					scrollTrigger: {
						trigger: section,
						start: startPosition,
						end: 'center center',
						toggleActions: 'play none none reverse'
					}
				});

				// Apply different animations for title based on position
				if (isEven) {
					tl.fromTo(section.querySelector('.section-title'), 
						{ y: 60, opacity: 0, scale: 0.9, transformOrigin: 'center bottom' },
						{ y: 0, opacity: 1, scale: 1, duration: 1, ease: 'back.out(1.5)' }
					);
				} else {
					tl.fromTo(section.querySelector('.section-title'), 
						{ x: direction * 50, opacity: 0, rotationY: direction * 15 },
						{ x: 0, opacity: 1, rotationY: 0, duration: 1, ease: 'power3.out' }
					);
				}
				
				// Animate subtitle with slight delay
				tl.fromTo(section.querySelector('.section-subtitle'), 
					{ y: 30, opacity: 0, scale: 0.95 },
					{ y: 0, opacity: 1, scale: 1, duration: 0.8, ease: 'power2.out' },
					'-=0.6'
				);
				
				// Add subtle section background animation
				if (isEven) {
					gsap.fromTo(section, 
						{ backgroundPosition: '0% 0%' },
						{ 
							backgroundPosition: '100% 100%', 
							ease: 'none',
							scrollTrigger: {
								trigger: section,
								start: 'top bottom',
								end: 'bottom top',
								scrub: 1
							}
						}
					);
				}
			});

			// Enhanced card stagger animations with BuildWithFlow style
			const cards = gsap.utils.toArray('.card');
			cards.forEach((card, i) => {
				// Calculate delay based on card position in grid
				const cardRow = Math.floor(i / 2); // Assuming 2-column grid
				const cardCol = i % 2;
				const staggerDelay = (cardRow * 0.1) + (cardCol * 0.15);
				
				// Create a micro-timeline for each card
				const cardTl = gsap.timeline({
					scrollTrigger: {
						trigger: card,
						start: 'top 85%',
						toggleActions: 'play none none reverse'
					},
					delay: staggerDelay
				});
				
				// BuildWithFlow-style reveal animation
				cardTl.fromTo(card, 
					{ y: 100, opacity: 0, scale: 0.8, rotationY: 15, transformOrigin: 'center center' },
					{ 
						y: 0, 
						opacity: 1, 
						scale: 1,
						rotationY: 0,
						duration: 1, 
						ease: 'power3.out'
					}
				)
				// Add subtle glow effect on entrance
				.fromTo(card, 
					{ boxShadow: '0 10px 30px rgba(0, 0, 0, 0.08)' },
					{ 
						boxShadow: '0 20px 70px rgba(0, 0, 0, 0.15), 0 0 30px rgba(135, 206, 235, 0.2)', 
						duration: 0.8,
						ease: 'power2.out'
					},
					'-=0.5'
				)
				// Scale back to normal shadow
				.to(card, { 
					boxShadow: '0 20px 60px rgba(0, 0, 0, 0.1)', 
					duration: 0.8, 
					ease: 'power1.inOut'
				});
				
				// Add hover animation for each card
				card.addEventListener('mouseenter', function() {
					gsap.to(this, { 
						y: -10, 
						scale: 1.03, 
						boxShadow: '0 30px 70px rgba(0, 0, 0, 0.15), 0 0 20px rgba(135, 206, 235, 0.3)', 
						duration: 0.4, 
						ease: 'power2.out'
					});
				});
				
				card.addEventListener('mouseleave', function() {
					gsap.to(this, { 
						y: 0, 
						scale: 1, 
						boxShadow: '0 20px 60px rgba(0, 0, 0, 0.1)', 
						duration: 0.4, 
						ease: 'power2.out'
					});
				});
			});

			// Problem cards with stagger
			gsap.fromTo('.problem-card', 
				{ y: 100, opacity: 0, rotationX: 45 },
				{ 
					y: 0, 
					opacity: 1, 
					rotationX: 0,
					duration: 1, 
					ease: 'power3.out',
					stagger: 0.2,
					scrollTrigger: {
						trigger: '.problems-grid',
						start: 'top 80%',
						toggleActions: 'play none none reverse'
					}
				}
			);

			// Solution cards with morphing effect
			gsap.fromTo('.solution-card', 
				{ scale: 0, rotation: 180, opacity: 0 },
				{ 
					scale: 1, 
					rotation: 0, 
					opacity: 1,
					duration: 1.2, 
					ease: 'elastic.out(1, 0.8)',
					stagger: 0.15,
					scrollTrigger: {
						trigger: '.solution-group',
						start: 'top 75%',
						toggleActions: 'play none none reverse'
					}
				}
			);

			// Advantage items with slide effect
			gsap.fromTo('.advantage-item', 
				{ x: -100, opacity: 0 },
				{ 
					x: 0, 
					opacity: 1,
					duration: 0.8, 
					ease: 'power2.out',
					stagger: 0.2,
					scrollTrigger: {
						trigger: '.advantages-grid',
						start: 'top 80%',
						toggleActions: 'play none none reverse'
					}
				}
			);

			// Testimonial cards with flip effect
			gsap.fromTo('.testimonial-card', 
				{ rotationY: 90, opacity: 0 },
				{ 
					rotationY: 0, 
					opacity: 1,
					duration: 1, 
					ease: 'power2.out',
					stagger: 0.3,
					scrollTrigger: {
						trigger: '.testimonials-grid',
						start: 'top 80%',
						toggleActions: 'play none none reverse'
					}
				}
			);

			// Floating elements animation
			gsap.to('.floating-shape', {
				y: -30,
				rotation: 360,
				duration: 4,
				ease: 'none',
				repeat: -1,
				yoyo: true,
				stagger: 0.5
			});

			// Text reveal animation for words
			gsap.utils.toArray('.text-reveal span').forEach((word, i) => {
				gsap.fromTo(word, 
					{ y: 100, opacity: 0 },
					{ 
						y: 0, 
						opacity: 1,
						duration: 0.6, 
						ease: 'power3.out',
						delay: i * 0.1,
						scrollTrigger: {
							trigger: word.closest('.section-title'),
							start: 'top 80%',
							toggleActions: 'play none none reverse'
						}
					}
				);
			});

			// Dashboard preview 3D animation
			gsap.fromTo('.dashboard-preview', 
				{ rotationY: 45, rotationX: 25, scale: 0.8, opacity: 0 },
				{ 
					rotationY: -15, 
					rotationX: 5, 
					scale: 1, 
					opacity: 1,
					duration: 1.5, 
					ease: 'power3.out',
					scrollTrigger: {
						trigger: '.hero-visual',
						start: 'top 80%',
						toggleActions: 'play none none reverse'
					}
				}
			);

			// Stats counter animation
			gsap.utils.toArray('.stat-number').forEach(stat => {
				const finalValue = stat.textContent;
				const counter = { value: 0 };
				
				gsap.to(counter, {
					value: parseFloat(finalValue),
					duration: 2,
					ease: 'power2.out',
					onUpdate: function() {
						const suffix = finalValue.includes('+') ? '+' : finalValue.includes('%') ? '%' : '';
						stat.textContent = Math.round(counter.value) + suffix;
					},
					scrollTrigger: {
						trigger: stat,
						start: 'top 80%',
						toggleActions: 'play none none reverse'
					}
				});
			});
		}

		// Initialize advanced Lottie animations with BuildWithFlow-style micro-interactions
		function initLottieAnimations() {
			if (typeof lottie === 'undefined') {
				console.warn('Lottie library not loaded, using CSS fallbacks');
				// Initialize BuildWithFlow-style CSS animations as fallback
				initBuildWithFlowScrollAnimations();
				return;
			}

			// BuildWithFlow-style hero section with morphing animation
			const heroLottieContainer = document.getElementById('hero-lottie');
			if (heroLottieContainer) {
				try {
					// Create multiple layered animations like BuildWithFlow
					const heroMainAnimation = lottie.loadAnimation({
						container: heroLottieContainer,
						renderer: 'svg',
						loop: false,
						autoplay: false,
						path: '/animations/hero-building.json'
					});
					
					// BuildWithFlow-style scroll-controlled morphing
					ScrollTrigger.create({
						trigger: '.hero',
						start: 'top center',
						end: 'bottom top',
						scrub: 2,
						onUpdate: (self) => {
							const progress = self.progress;
							const totalFrames = heroMainAnimation.totalFrames;
							
							// Smooth frame progression like BuildWithFlow
							const targetFrame = Math.floor(progress * totalFrames);
							heroMainAnimation.goToAndStop(targetFrame, true);
							
							// Add morphing scale effect
							gsap.to(heroLottieContainer, {
								scale: 1 + (progress * 0.2),
								rotation: progress * 5,
								opacity: 1 - (progress * 0.3),
								duration: 0.1
							});
						},
						onEnter: () => {
							heroMainAnimation.play();
							// BuildWithFlow entrance effect
							gsap.fromTo(heroLottieContainer, 
								{ scale: 0, rotation: -180, opacity: 0 },
								{ scale: 1, rotation: 0, opacity: 1, duration: 1.5, ease: 'elastic.out(1, 0.5)' }
							);
						}
					});
					
					// Add BuildWithFlow-style floating elements around hero
					createFloatingLottieElements('.hero');
					
				} catch (e) {
					console.warn('Failed to load hero Lottie animation:', e);
					initBuildWithFlowScrollAnimations();
				}
			}

			// Enhanced icon micro-interactions for solution cards
			document.querySelectorAll('.solution-icon-enhanced').forEach((iconWrapper, index) => {
				const container = iconWrapper.querySelector('.lottie-icon-container');
				const fallbackIcon = iconWrapper.querySelector('i');
				
				if (container) {
					try {
						const iconAnimation = lottie.loadAnimation({
							container,
							renderer: 'svg',
							loop: false,
							autoplay: false,
							path: '/animations/icon-morph.json'
						});
						
						// Hide fallback icon and show Lottie
						if (fallbackIcon) fallbackIcon.style.display = 'none';
						container.style.display = 'block';
						
						// Add sophisticated hover interactions
						let hoverTimeout;
						iconWrapper.addEventListener('mouseenter', () => {
							clearTimeout(hoverTimeout);
							iconAnimation.setSpeed(1.5);
							iconAnimation.goToAndPlay(0);
							
							// Add glow effect
							gsap.to(container, {
								filter: 'drop-shadow(0 0 15px rgba(59, 130, 246, 0.6))',
								scale: 1.1,
								duration: 0.3,
								ease: 'power2.out'
							});
						});
						
						iconWrapper.addEventListener('mouseleave', () => {
							hoverTimeout = setTimeout(() => {
								iconAnimation.setSpeed(0.8);
								iconAnimation.goToAndStop(0);
							}, 300);
							
							// Remove glow effect
							gsap.to(container, {
								filter: 'none',
								scale: 1,
								duration: 0.3,
								ease: 'power2.out'
							});
						});
						
						// Click interaction for more dramatic effect
						iconWrapper.addEventListener('click', () => {
							iconAnimation.setSpeed(2);
							iconAnimation.goToAndPlay(0);
							
							// Pulse effect
							gsap.fromTo(container, 
								{ scale: 1 },
								{ 
									scale: 1.3,
									duration: 0.2,
									yoyo: true,
									repeat: 1,
									ease: 'power2.inOut'
								}
							);
						});
						
					} catch (e) {
						console.warn(`Failed to load solution icon ${index}:`, e);
						// Show fallback icon
						if (fallbackIcon) {
							fallbackIcon.style.display = 'block';
							container.style.display = 'none';
						}
					}
				}
			});

			// Enhanced icon micro-interactions for advantage cards
			document.querySelectorAll('.advantage-icon-enhanced').forEach((iconWrapper, index) => {
				const container = iconWrapper.querySelector('.lottie-icon-container');
				const fallbackIcon = iconWrapper.querySelector('i');
				
				if (container) {
					try {
						const iconAnimation = lottie.loadAnimation({
							container,
							renderer: 'svg',
							loop: false,
							autoplay: false,
							path: '/animations/icon-morph.json'
						});
						
						// Hide fallback and show Lottie
						if (fallbackIcon) fallbackIcon.style.display = 'none';
						container.style.display = 'block';
						
						// Scroll-triggered animation with stagger
						ScrollTrigger.create({
							trigger: iconWrapper,
							start: 'top 85%',
							onEnter: () => {
								setTimeout(() => {
									iconAnimation.goToAndPlay(0);
								}, index * 200); // Stagger effect
							}
						});
						
						// Hover interactions
						iconWrapper.addEventListener('mouseenter', () => {
							iconAnimation.setSpeed(1.2);
							iconAnimation.goToAndPlay(0);
							
							gsap.to(container, {
								rotation: 360,
								scale: 1.15,
								filter: 'drop-shadow(0 0 20px rgba(59, 130, 246, 0.8))',
								duration: 0.6,
								ease: 'elastic.out(1, 0.3)'
							});
						});
						
						iconWrapper.addEventListener('mouseleave', () => {
							gsap.to(container, {
								rotation: 0,
								scale: 1,
								filter: 'none',
								duration: 0.4,
								ease: 'power2.out'
							});
						});
						
					} catch (e) {
						console.warn(`Failed to load advantage icon ${index}:`, e);
						// Show fallback icon
						if (fallbackIcon) {
							fallbackIcon.style.display = 'block';
							container.style.display = 'none';
						}
					}
				}
			});
			
			// Add floating particles to multiple sections
			const particlesSections = [
				'.hero-bg',
				'#solutions',
				'#advantages'
			];
			
			particlesSections.forEach(sectionSelector => {
				const section = document.querySelector(sectionSelector);
				if (section) {
					const particlesContainer = document.createElement('div');
					particlesContainer.className = 'lottie-particles-container';
					particlesContainer.style.position = 'absolute';
					particlesContainer.style.top = '0';
					particlesContainer.style.left = '0';
					particlesContainer.style.width = '100%';
					particlesContainer.style.height = '100%';
					particlesContainer.style.pointerEvents = 'none';
					particlesContainer.style.zIndex = '1';
					section.appendChild(particlesContainer);
					
					lottie.loadAnimation({
						container: particlesContainer,
						renderer: 'svg',
						loop: true,
						autoplay: true,
						path: '/animations/floating-particles.json'
					});
				}
			});
			
			// Add morphing icons to feature sections
			gsap.utils.toArray('.solution-icon, .advantage-icon-wrapper, .feature-icon').forEach((iconContainer) => {
				if (iconContainer) {
					// Clear any existing content
					const existingIcon = iconContainer.querySelector('i');
					if (existingIcon) {
						(existingIcon as HTMLElement).style.display = 'none';
					}
					
					const iconLottieContainer = document.createElement('div');
					iconLottieContainer.className = 'lottie-icon';
					iconLottieContainer.style.width = '100%';
					iconLottieContainer.style.height = '100%';
					iconContainer.appendChild(iconLottieContainer);
					
					lottie.loadAnimation({
						container: iconLottieContainer,
						renderer: 'svg',
						loop: true,
						autoplay: true,
						path: '/animations/icon-morph.json'
					});
				}
			});
			
			// Initialize BuildWithFlow scroll-triggered effects
			initBuildWithFlowScrollAnimations();
			
			// Create animated icons with scroll control
			createAnimatedIcons();
		}

		// BuildWithFlow-style scroll-triggered animations using CSS fallbacks
		function initBuildWithFlowScrollAnimations() {
			// Create morphing elements that appear on scroll
			createScrollMorphingElements();
			
			// Add fluid scroll-triggered reveals
			initFluidScrollReveals();
			
			// Add BuildWithFlow-style section transitions
			initBuildWithFlowSectionTransitions();
			
			// Create floating elements that respond to scroll
			createScrollResponsiveFloatingElements();
		}

		// Create BuildWithFlow-style floating Lottie elements
		function createFloatingLottieElements(sectionSelector) {
			const section = document.querySelector(sectionSelector);
			if (!section) return;
			
			// Create multiple floating orbs like BuildWithFlow
			const floatingElements = [
				{ size: 60, speed: 0.02, color: 'var(--primary-blue)', opacity: 0.6 },
				{ size: 40, speed: 0.015, color: 'var(--muted-green)', opacity: 0.4 },
				{ size: 80, speed: 0.025, color: 'var(--muted-orange)', opacity: 0.3 },
				{ size: 30, speed: 0.01, color: 'var(--primary-blue-light)', opacity: 0.5 }
			];
			
			floatingElements.forEach((config, i) => {
				const floatingOrb = document.createElement('div');
				floatingOrb.className = 'buildflow-floating-orb';
				floatingOrb.style.cssText = `
					position: absolute;
					width: ${config.size}px;
					height: ${config.size}px;
					background: radial-gradient(circle, ${config.color}, transparent);
					border-radius: 50%;
					opacity: ${config.opacity};
					pointer-events: none;
					top: ${Math.random() * 80 + 10}%;
					left: ${Math.random() * 80 + 10}%;
					z-index: 1;
					filter: blur(2px);
					mix-blend-mode: multiply;
					transition: all 0.3s ease;
				`;
				
				section.appendChild(floatingOrb);
				
				// Animate with GSAP if available, otherwise use CSS
				if (typeof gsap !== 'undefined') {
					// BuildWithFlow-style organic movement
					gsap.to(floatingOrb, {
						x: `random(-100, 100)`,
						y: `random(-100, 100)`,
						rotation: 360,
						scale: `random(0.8, 1.2)`,
						duration: `random(8, 15)`,
						repeat: -1,
						yoyo: true,
						ease: 'sine.inOut',
						delay: i * 0.5
					});
					
					// Scroll-triggered opacity changes
					ScrollTrigger.create({
						trigger: section,
						start: 'top bottom',
						end: 'bottom top',
						scrub: 1,
						onUpdate: (self) => {
							const progress = self.progress;
							gsap.to(floatingOrb, {
								opacity: config.opacity * (0.5 + (Math.sin(progress * Math.PI) * 0.5)),
								scale: 1 + (progress * 0.3),
								duration: 0.1
							});
						}
					});
				} else {
					// CSS fallback animation
					floatingOrb.style.animation = `buildflow-float-${i} ${8 + i * 2}s ease-in-out infinite alternate`;
				}
			});
		}

		// Create scroll-responsive morphing elements
		function createScrollMorphingElements() {
			const sections = document.querySelectorAll('.section');
			
			sections.forEach((section, index) => {
				if (index === 0) return; // Skip hero section
				
				// Create morphing shape that transforms on scroll
				const morphShape = document.createElement('div');
				morphShape.className = 'buildflow-morph-shape';
				morphShape.style.cssText = `
					position: absolute;
					top: -10%;
					right: -10%;
					width: 300px;
					height: 300px;
					background: linear-gradient(135deg, 
						rgba(135, 206, 235, 0.1), 
						rgba(152, 216, 200, 0.1), 
						rgba(244, 164, 96, 0.1));
					border-radius: 50% 30% 70% 40%;
					pointer-events: none;
					z-index: -1;
					filter: blur(3px);
					transform: scale(0) rotate(0deg);
					transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
				`;
				
				section.appendChild(morphShape);
				
				// Trigger morphing animation on scroll
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							morphShape.style.transform = `scale(1) rotate(${index * 45}deg)`;
							morphShape.style.borderRadius = '30% 70% 40% 60%';
						} else {
							morphShape.style.transform = `scale(0) rotate(0deg)`;
							morphShape.style.borderRadius = '50% 30% 70% 40%';
						}
					});
				}, { threshold: 0.3 });
				
				observer.observe(section);
			});
		}

		// Fluid scroll reveals like BuildWithFlow
		function initFluidScrollReveals() {
			const revealElements = document.querySelectorAll('.card, .section-title, .section-subtitle, .btn');
			
			revealElements.forEach((element, index) => {
				// Add BuildWithFlow reveal classes
				element.classList.add('buildflow-scroll-reveal');
				element.style.cssText += `
					opacity: 0;
					transform: translateY(60px) scale(0.95);
					transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
					transition-delay: ${(index % 4) * 0.1}s;
				`;
				
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							entry.target.style.opacity = '1';
							entry.target.style.transform = 'translateY(0) scale(1)';
						}
					});
				}, {
					threshold: 0.1,
					rootMargin: '0px 0px -50px 0px'
				});
				
				observer.observe(element);
			});
		}

		// BuildWithFlow-style section transitions
		function initBuildWithFlowSectionTransitions() {
			const sections = document.querySelectorAll('.section');
			
			sections.forEach((section, index) => {
				if (index === 0) return; // Skip hero
				
				// Create transition overlay
				const overlay = document.createElement('div');
				overlay.className = 'buildflow-section-overlay';
				overlay.style.cssText = `
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					background: linear-gradient(45deg, 
						transparent 0%, 
						rgba(135, 206, 235, 0.05) 30%, 
						rgba(152, 216, 200, 0.05) 60%, 
						transparent 100%);
					opacity: 0;
					pointer-events: none;
					z-index: 1;
					transition: opacity 1s ease;
				`;
				
				section.appendChild(overlay);
				
				// Animate overlay on scroll
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							overlay.style.opacity = '1';
						} else {
							overlay.style.opacity = '0';
						}
					});
				}, { threshold: 0.5 });
				
				observer.observe(section);
			});
		}

		// Create scroll-responsive floating elements
		function createScrollResponsiveFloatingElements() {
			const floatingContainer = document.createElement('div');
			floatingContainer.className = 'buildflow-floating-container';
			floatingContainer.style.cssText = `
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				pointer-events: none;
				z-index: 1;
				opacity: 0.6;
			`;
			
			document.body.appendChild(floatingContainer);
			
			// Create multiple floating elements
			for (let i = 0; i < 6; i++) {
				const floater = document.createElement('div');
				floater.className = 'buildflow-scroll-floater';
				floater.style.cssText = `
					position: absolute;
					width: ${20 + Math.random() * 40}px;
					height: ${20 + Math.random() * 40}px;
					background: radial-gradient(circle, 
						rgba(135, 206, 235, 0.3), 
						rgba(152, 216, 200, 0.2), 
						transparent);
					border-radius: 50%;
					top: ${Math.random() * 100}%;
					left: ${Math.random() * 100}%;
					filter: blur(2px);
					mix-blend-mode: multiply;
				`;
				
				floatingContainer.appendChild(floater);
				
				// Scroll-responsive movement
				let initialY = parseFloat(floater.style.top);
				let initialX = parseFloat(floater.style.left);
				
				window.addEventListener('scroll', () => {
					const scrolled = window.pageYOffset;
					const speed = (i + 1) * 0.1;
					const newY = initialY + (scrolled * speed * 0.1);
					const newX = initialX + Math.sin(scrolled * 0.01 + i) * 50;
					
					floater.style.transform = `translate(${newX - initialX}px, ${newY - initialY}px) rotate(${scrolled * 0.1}deg)`;
				});
			}
		}

		// Create animated icons using CSS-based animations as fallback
		function createAnimatedIcons() {
			// Add animated icons to sections
			const sections = [
				{ selector: '.hero', icon: 'fas fa-home', animation: 'bounce' },
				{ selector: '#background', icon: 'fas fa-building', animation: 'pulse' },
				{ selector: '#problems', icon: 'fas fa-exclamation-triangle', animation: 'shake' },
				{ selector: '#solutions', icon: 'fas fa-lightbulb', animation: 'flash' },
				{ selector: '#advantages', icon: 'fas fa-star', animation: 'spin' },
				{ selector: '#testimonials', icon: 'fas fa-heart', animation: 'heartbeat' }
			];

			sections.forEach(({ selector, icon, animation }) => {
				const section = document.querySelector(selector);
				if (section) {
					const animatedIcon = document.createElement('div');
					animatedIcon.className = `animated-section-icon ${animation}`;
					animatedIcon.innerHTML = `<i class="${icon}"></i>`;
					section.appendChild(animatedIcon);
				}
			});
		}

		// Add scroll progress indicator
		function addScrollProgress() {
			const progressBar = document.createElement('div');
			progressBar.className = 'scroll-progress';
			document.body.appendChild(progressBar);

			window.addEventListener('scroll', () => {
				const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
				const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
				const scrolled = (winScroll / height);
				progressBar.style.transform = `scaleX(${scrolled})`;
			});
		}

		// Initialize all modern enhancements
		setTimeout(() => {
			addScrollProgress();
			initParallaxEffects();
			initTextWaveEffects();
			initModernInteractions();
		}, 500);

		// Modern interactions without cursor effects
		function initModernInteractions() {
			// Enhanced hover effects for buttons and cards
			const interactiveElements = {
				'.btn': { scale: 1.05, lift: -8 },
				'.card': { scale: 1.02, lift: -12 },
				'.solution-icon-enhanced': { scale: 1.15, glow: true },
				'.advantage-icon-enhanced': { scale: 1.1, glow: true },
				'.testimonial-card': { scale: 1.03, lift: -6 }
			};
			
			Object.entries(interactiveElements).forEach(([selector, config]) => {
				document.querySelectorAll(selector).forEach(el => {
					el.addEventListener('mouseenter', function() {
						this.classList.add('modern-hover');
						
						// Scale and lift animation
						if (typeof gsap !== 'undefined') {
							gsap.to(this, {
								scale: config.scale,
								y: config.lift || 0,
								duration: 0.3,
								ease: 'power2.out'
							});
							
							// Add glow effect if specified
							if (config.glow) {
								gsap.to(this, {
									filter: 'drop-shadow(0 0 20px rgba(135, 206, 235, 0.4))',
									duration: 0.3
								});
							}
						} else {
							// CSS fallback
							this.style.transform = `scale(${config.scale}) translateY(${config.lift || 0}px)`;
							if (config.glow) {
								this.style.filter = 'drop-shadow(0 0 20px rgba(135, 206, 235, 0.4))';
							}
						}
					});
					
					el.addEventListener('mouseleave', function() {
						this.classList.remove('modern-hover');
						
						// Reset transform and effects
						if (typeof gsap !== 'undefined') {
							gsap.to(this, {
								scale: 1,
								y: 0,
								filter: 'none',
								duration: 0.3,
								ease: 'power2.out'
							});
						} else {
							this.style.transform = '';
							this.style.filter = '';
						}
					});
					
					// Click ripple effect
					el.addEventListener('click', function(e) {
						const ripple = document.createElement('div');
						ripple.className = 'modern-ripple';
						
						const rect = this.getBoundingClientRect();
						const size = Math.max(rect.width, rect.height);
						const x = e.clientX - rect.left - size / 2;
						const y = e.clientY - rect.top - size / 2;
						
						ripple.style.width = ripple.style.height = size + 'px';
						ripple.style.left = x + 'px';
						ripple.style.top = y + 'px';
						
						this.appendChild(ripple);
						
						// Pulse effect on click
						if (typeof gsap !== 'undefined') {
							gsap.fromTo(this, 
								{ scale: config.scale || 1 },
								{ 
									scale: (config.scale || 1) * 1.1,
									duration: 0.1,
									yoyo: true,
									repeat: 1,
									ease: 'power2.inOut'
								}
							);
						}
						
						setTimeout(() => {
							if (ripple.parentNode) {
								ripple.remove();
							}
						}, 800);
					});
				});
			});
			
			// Add smooth focus states for accessibility
			document.querySelectorAll('button, a, input, textarea').forEach(el => {
				el.addEventListener('focus', function() {
					this.style.outline = '2px solid var(--primary-blue)';
					this.style.outlineOffset = '2px';
				});
				
				el.addEventListener('blur', function() {
					this.style.outline = '';
					this.style.outlineOffset = '';
				});
			});
		}

		// Enhanced parallax effects
		function initParallaxEffects() {
			const parallaxElements = document.querySelectorAll('.floating-shape, .morphing-bg');
			
			window.addEventListener('scroll', () => {
				const scrolled = window.pageYOffset;
				const rate = scrolled * -0.5;
				
				parallaxElements.forEach((el, index) => {
					const speed = (index + 1) * 0.2;
					el.style.transform = `translate3d(0, ${rate * speed}px, 0)`;
				});
			});
		}

		// Text wave effects
		function initTextWaveEffects() {
			const titles = document.querySelectorAll('.hero-title, .section-title');
			
			titles.forEach(title => {
				const text = title.textContent;
				const words = text.split(' ');
				
				title.innerHTML = words.map((word, i) => 
					`<span class="text-wave" style="--i: ${i}">${word}</span>`
				).join(' ');
				
				title.addEventListener('mouseenter', () => {
					title.querySelectorAll('.text-wave').forEach((span, i) => {
						span.style.animationDelay = `${i * 0.1}s`;
						span.style.animation = 'text-wave-animation 0.6s ease';
					});
				});
			});
		}

		// Add morphing backgrounds to sections
		function addMorphingBackgrounds() {
			const sections = document.querySelectorAll('.section');
			
			sections.forEach((section, index) => {
				if (index % 2 === 0) { // Add to every other section
					section.classList.add('section-bg-animated');
				}
			});
		}

		// Initialize morphing backgrounds
		setTimeout(addMorphingBackgrounds, 600);
	</script>
</body>
</html>

<style is:global>
	:root {
		/* Logo-based color scheme */
		--primary-blue: #87CEEB;        /* Light blue from roof */
		--primary-blue-light: #B0E0E6;  /* Lighter blue */
		--primary-blue-dark: #4682B4;   /* Darker blue */
		--muted-green: #98D8C8;         /* Muted green/teal from left wall */
		--muted-orange: #F4A460;        /* Muted orange/peach from right wall */
		--dark-blue: #2F4F4F;           /* Dark blue/charcoal from text */
		--accent-blue: #E6F3FF;         /* Very light blue accent */
		--text-dark: #2F4F4F;
		--text-light: #6B7C93;
		--white: #ffffff;
		--gray-50: #FAFBFC;
		--gray-100: #F4F6F8;
		--gray-200: #E1E5E9;
		--success-green: #10b981;
		--warning-orange: #f59e0b;
		
		/* Animation variables */
		--transition-fast: 0.2s ease;
		--transition-normal: 0.3s ease;
		--transition-slow: 0.5s ease;
		--bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
	}
	
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	
	html {
		scroll-behavior: smooth;
		scroll-padding-top: 80px;
	}
	
	body {
		font-family: 'Poppins', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
		line-height: 1.6;
		color: var(--text-dark);
		background-color: var(--white);
		overflow-x: hidden;
	}
	
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
	}
	
	.btn {
		display: inline-block;
		padding: 1rem 2rem;
		border-radius: 50px;
		text-decoration: none;
		font-weight: 600;
		transition: all var(--transition-normal) var(--bounce);
		cursor: pointer;
		border: none;
		font-size: 1rem;
		position: relative;
		overflow: hidden;
		z-index: 1;
	}
	
	.btn::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
		transition: left 0.5s;
		z-index: -1;
	}
	
	.btn:hover::before {
		left: 100%;
	}
	
	.btn-primary {
		background: linear-gradient(135deg, var(--primary-blue), var(--primary-blue-dark));
		color: var(--white);
		box-shadow: 0 10px 30px rgba(135, 206, 235, 0.3);
	}
	
	.btn-primary:hover {
		transform: translateY(-5px) scale(1.05);
		box-shadow: 0 20px 40px rgba(135, 206, 235, 0.4);
	}
	
	.btn-secondary {
		background: transparent;
		color: var(--primary-blue);
		border: 2px solid var(--primary-blue);
		position: relative;
		overflow: hidden;
	}
	
	.btn-secondary::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 0;
		height: 100%;
		background: var(--primary-blue);
		transition: width var(--transition-normal) ease;
		z-index: -1;
	}
	
	.btn-secondary:hover::before {
		width: 100%;
	}
	
	.btn-secondary:hover {
		color: var(--white);
		transform: translateY(-3px);
		box-shadow: 0 15px 30px rgba(135, 206, 235, 0.3);
	}
	
	.section {
		padding: 6rem 0;
		position: relative;
	}
	
	.section-title {
		font-size: 3rem;
		font-weight: 800;
		text-align: center;
		margin-bottom: 1rem;
		color: var(--text-dark);
		background: linear-gradient(135deg, var(--primary-blue), var(--muted-green));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}
	
	.section-subtitle {
		font-size: 1.25rem;
		text-align: center;
		margin-bottom: 4rem;
		color: var(--text-light);
		max-width: 700px;
		margin-left: auto;
		margin-right: auto;
		line-height: 1.8;
	}
	
	.card {
		background: var(--white);
		border-radius: 20px;
		padding: 2.5rem;
		box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
		border: 1px solid var(--gray-200);
		transition: all var(--transition-normal) var(--bounce);
		position: relative;
		overflow: hidden;
	}
	
	.card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 4px;
		background: linear-gradient(90deg, var(--primary-blue), var(--muted-green), var(--muted-orange));
		transform: scaleX(0);
		transition: transform var(--transition-normal) ease;
	}
	
	.card:hover::before {
		transform: scaleX(1);
	}
	
	.card:hover {
		transform: translateY(-10px) scale(1.02);
		box-shadow: 0 30px 80px rgba(0, 0, 0, 0.12);
	}
	
	.grid {
		display: grid;
		gap: 2.5rem;
	}
	
	.grid-2 {
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
	}
	
	.grid-3 {
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	}
	
	.text-center {
		text-align: center;
	}
	
	.mb-4 {
		margin-bottom: 2rem;
	}
	
	.mb-6 {
		margin-bottom: 3rem;
	}
	
	/* Floating animation */
	@keyframes float {
		0%, 100% { transform: translateY(0px); }
		50% { transform: translateY(-20px); }
	}
	
	.float {
		animation: float 6s ease-in-out infinite;
	}
	
	/* Gradient text */
	.gradient-text {
		background: linear-gradient(135deg, var(--primary-blue), var(--muted-green), var(--muted-orange));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}
	
	/* Glassmorphism effect */
	.glass {
		background: rgba(255, 255, 255, 0.1);
		backdrop-filter: blur(20px);
		border: 1px solid rgba(255, 255, 255, 0.2);
	}
	
	/* BuildWithFlow-inspired animations */
	.animated-section-icon {
		position: absolute;
		top: 20px;
		right: 20px;
		width: 60px;
		height: 60px;
		background: linear-gradient(135deg, var(--primary-blue), var(--muted-green));
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--white);
		font-size: 1.5rem;
		box-shadow: 0 10px 30px rgba(135, 206, 235, 0.3);
		z-index: 10;
		opacity: 0.8;
		transition: all 0.3s ease;
	}

	.animated-section-icon:hover {
		transform: scale(1.1);
		opacity: 1;
		box-shadow: 0 15px 40px rgba(135, 206, 235, 0.4);
	}

	/* Animation classes inspired by BuildWithFlow */
	.bounce {
		animation: buildflow-bounce 2s ease-in-out infinite;
	}

	.pulse {
		animation: buildflow-pulse 2s ease-in-out infinite;
	}

	.shake {
		animation: buildflow-shake 0.5s ease-in-out infinite;
	}

	.flash {
		animation: buildflow-flash 1.5s ease-in-out infinite;
	}

	.spin {
		animation: buildflow-spin 3s linear infinite;
	}

	.heartbeat {
		animation: buildflow-heartbeat 1.5s ease-in-out infinite;
	}

	@keyframes buildflow-bounce {
		0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
		40% { transform: translateY(-10px); }
		60% { transform: translateY(-5px); }
	}

	@keyframes buildflow-pulse {
		0% { transform: scale(1); box-shadow: 0 10px 30px rgba(135, 206, 235, 0.3); }
		50% { transform: scale(1.05); box-shadow: 0 15px 40px rgba(135, 206, 235, 0.5); }
		100% { transform: scale(1); box-shadow: 0 10px 30px rgba(135, 206, 235, 0.3); }
	}

	@keyframes buildflow-shake {
		0%, 100% { transform: translateX(0); }
		10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
		20%, 40%, 60%, 80% { transform: translateX(2px); }
	}

	@keyframes buildflow-flash {
		0%, 50%, 100% { opacity: 0.8; }
		25%, 75% { opacity: 1; box-shadow: 0 0 20px rgba(255, 215, 0, 0.6); }
	}

	@keyframes buildflow-spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	@keyframes buildflow-heartbeat {
		0% { transform: scale(1); }
		14% { transform: scale(1.1); }
		28% { transform: scale(1); }
		42% { transform: scale(1.1); }
		70% { transform: scale(1); }
	}

	/* Advanced scroll-triggered animations */
	.scroll-reveal {
		opacity: 0;
		transform: translateY(50px);
		transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	.scroll-reveal.revealed {
		opacity: 1;
		transform: translateY(0);
	}

	.scroll-scale {
		transform: scale(0.8);
		opacity: 0;
		transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
	}

	.scroll-scale.revealed {
		transform: scale(1);
		opacity: 1;
	}

	.scroll-slide-left {
		transform: translateX(-100px);
		opacity: 0;
		transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	.scroll-slide-left.revealed {
		transform: translateX(0);
		opacity: 1;
	}

	.scroll-slide-right {
		transform: translateX(100px);
		opacity: 0;
		transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	.scroll-slide-right.revealed {
		transform: translateX(0);
		opacity: 1;
	}

	.scroll-rotate {
		transform: rotate(45deg) scale(0.8);
		opacity: 0;
		transition: all 1s cubic-bezier(0.68, -0.55, 0.265, 1.55);
	}

	.scroll-rotate.revealed {
		transform: rotate(0deg) scale(1);
		opacity: 1;
	}

	/* Enhanced parallax effects */
	.parallax-element {
		will-change: transform;
	}

	/* Morphing background shapes */
	.morphing-bg {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: -1;
		overflow: hidden;
	}

	.morphing-bg::before {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: radial-gradient(ellipse at center, 
			rgba(135, 206, 235, 0.1) 0%, 
			rgba(152, 216, 200, 0.1) 35%, 
			rgba(244, 164, 96, 0.1) 70%, 
			transparent 100%);
		animation: morphing-rotation 20s linear infinite;
	}

	@keyframes morphing-rotation {
		0% { transform: rotate(0deg) scale(1); }
		25% { transform: rotate(90deg) scale(1.1); }
		50% { transform: rotate(180deg) scale(0.9); }
		75% { transform: rotate(270deg) scale(1.05); }
		100% { transform: rotate(360deg) scale(1); }
	}

	/* BuildWithFlow-style text animations */
	.text-wave {
		display: inline-block;
	}

	.text-wave span {
		display: inline-block;
		animation: text-wave-animation 2s ease-in-out infinite;
		animation-delay: calc(var(--i) * 0.1s);
	}

	@keyframes text-wave-animation {
		0%, 40%, 100% { transform: translateY(0); }
		20% { transform: translateY(-10px); }
	}

	/* Enhanced button animations */
	.btn-magic {
		position: relative;
		overflow: hidden;
		background: linear-gradient(45deg, 
			var(--primary-blue), 
			var(--muted-green), 
			var(--muted-orange), 
			var(--primary-blue));
		background-size: 400% 400%;
		animation: gradient-shift 3s ease infinite;
		color: var(--white);
		border: none;
	}

	@keyframes gradient-shift {
		0% { background-position: 0% 50%; }
		50% { background-position: 100% 50%; }
		100% { background-position: 0% 50%; }
	}

	.btn-magic::after {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, 
			transparent, 
			rgba(255, 255, 255, 0.3), 
			transparent);
		transition: left 0.5s;
	}

	.btn-magic:hover::after {
		left: 100%;
	}

	/* Interactive hover effects */
	.hover-lift {
		transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	.hover-lift:hover {
		transform: translateY(-10px) scale(1.02);
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
	}

	.hover-glow {
		transition: all 0.3s ease;
	}

	.hover-glow:hover {
		box-shadow: 0 0 30px rgba(135, 206, 235, 0.5);
		transform: scale(1.05);
	}

	/* Loading animations */
	.loading-pulse {
		animation: loading-pulse-animation 1.5s ease-in-out infinite;
	}

	@keyframes loading-pulse-animation {
		0% { opacity: 1; }
		50% { opacity: 0.5; }
		100% { opacity: 1; }
	}

	.loading-shimmer {
		background: linear-gradient(90deg, 
			#f0f0f0 25%, 
			#e0e0e0 50%, 
			#f0f0f0 75%);
		background-size: 200% 100%;
		animation: shimmer 1.5s infinite;
	}

	@keyframes shimmer {
		0% { background-position: -200% 0; }
		100% { background-position: 200% 0; }
	}

	/* Modern ripple effect for clean interactions */
	.modern-ripple {
		position: absolute;
		border-radius: 50%;
		background: radial-gradient(circle, rgba(135, 206, 235, 0.4) 0%, transparent 70%);
		transform: scale(0);
		animation: modern-ripple-animation 0.6s ease-out forwards;
		pointer-events: none;
		z-index: 1;
	}

	@keyframes modern-ripple-animation {
		0% {
			transform: scale(0);
			opacity: 1;
		}
		100% {
			transform: scale(3);
			opacity: 0;
		}
	}

	/* Modern hover states for enhanced accessibility */
	.modern-hover {
		position: relative;
		z-index: 2;
	}

	/* Enhanced focus states for better accessibility */
	button:focus, 
	a:focus, 
	input:focus, 
	textarea:focus {
		outline: 2px solid var(--primary-blue) !important;
		outline-offset: 2px !important;
		box-shadow: 0 0 0 4px rgba(135, 206, 235, 0.2) !important;
		transition: all 0.2s ease !important;
	}

	/* Clean interactive elements without cursor dependency */
	.interactive-element {
		cursor: pointer;
		transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
		position: relative;
		overflow: hidden;
	}

	.interactive-element:hover {
		transform: translateY(-2px);
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
	}

	.interactive-element:active {
		transform: translateY(0);
		transition: transform 0.1s ease;
	}

	/* Enhanced Lottie container styles */
	.lottie-icon-container {
		width: 100%;
		height: 100%;
		display: none;
		position: relative;
		z-index: 1;
		transition: all 0.3s ease;
	}

	.lottie-animation {
		width: 100%;
		height: 100%;
		min-height: 200px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.hero-lottie-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: 1;
		opacity: 0.8;
		transition: opacity 0.3s ease;
	}

	.lottie-particles-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: 1;
		opacity: 0.3;
		mix-blend-mode: multiply;
	}

	/* Hide cursor on touch devices */
	@media (hover: none) and (pointer: coarse) {
		.custom-cursor,
		.cursor-follower {
			display: none !important;
		}
		
		body {
			cursor: auto !important;
		}
		
		.cursor-magnetic {
			transition: none;
		}
	}

	/* Scroll progress indicator */
	.scroll-progress {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 4px;
		background: linear-gradient(90deg, 
			var(--primary-blue), 
			var(--muted-green), 
			var(--muted-orange));
		transform-origin: left;
		transform: scaleX(0);
		z-index: 1000;
		transition: transform 0.1s ease;
	}

	/* Enhanced section backgrounds */
	.section-bg-animated {
		position: relative;
		overflow: hidden;
	}

	.section-bg-animated::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(-45deg, 
			rgba(135, 206, 235, 0.05), 
			rgba(152, 216, 200, 0.05), 
			rgba(244, 164, 96, 0.05), 
			rgba(135, 206, 235, 0.05));
		background-size: 400% 400%;
		animation: gradient-bg-shift 15s ease infinite;
		z-index: -1;
	}

	@keyframes gradient-bg-shift {
		0% { background-position: 0% 50%; }
		50% { background-position: 100% 50%; }
		100% { background-position: 0% 50%; }
	}

	/* BuildWithFlow-style floating elements */
	.buildflow-floating-orb {
		will-change: transform;
		backdrop-filter: blur(1px);
	}

	.buildflow-morph-shape {
		will-change: transform, border-radius;
		backdrop-filter: blur(2px);
	}

	.buildflow-scroll-reveal {
		will-change: opacity, transform;
	}

	.buildflow-section-overlay {
		will-change: opacity;
		backdrop-filter: blur(1px);
	}

	.buildflow-floating-container {
		will-change: transform;
	}

	.buildflow-scroll-floater {
		will-change: transform;
		backdrop-filter: blur(1px);
	}

	/* CSS fallback animations for floating elements */
	@keyframes buildflow-float-0 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		25% { transform: translate(30px, -20px) rotate(90deg) scale(1.1); }
		50% { transform: translate(-20px, -40px) rotate(180deg) scale(0.9); }
		75% { transform: translate(-40px, 20px) rotate(270deg) scale(1.05); }
		100% { transform: translate(0, 0) rotate(360deg) scale(1); }
	}

	@keyframes buildflow-float-1 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		25% { transform: translate(-25px, 30px) rotate(-90deg) scale(0.8); }
		50% { transform: translate(35px, 15px) rotate(-180deg) scale(1.2); }
		75% { transform: translate(10px, -30px) rotate(-270deg) scale(0.95); }
		100% { transform: translate(0, 0) rotate(-360deg) scale(1); }
	}

	@keyframes buildflow-float-2 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		33% { transform: translate(40px, 25px) rotate(120deg) scale(1.15); }
		66% { transform: translate(-30px, -35px) rotate(240deg) scale(0.85); }
		100% { transform: translate(0, 0) rotate(360deg) scale(1); }
	}

	@keyframes buildflow-float-3 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		20% { transform: translate(15px, -25px) rotate(72deg) scale(1.1); }
		40% { transform: translate(-35px, 10px) rotate(144deg) scale(0.9); }
		60% { transform: translate(25px, 30px) rotate(216deg) scale(1.05); }
		80% { transform: translate(-10px, -15px) rotate(288deg) scale(0.95); }
		100% { transform: translate(0, 0) rotate(360deg) scale(1); }
	}

	@keyframes buildflow-float-4 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		50% { transform: translate(-45px, 20px) rotate(180deg) scale(1.2); }
		100% { transform: translate(0, 0) rotate(360deg) scale(1); }
	}

	@keyframes buildflow-float-5 {
		0% { transform: translate(0, 0) rotate(0deg) scale(1); }
		30% { transform: translate(20px, -40px) rotate(108deg) scale(0.8); }
		70% { transform: translate(-25px, 35px) rotate(252deg) scale(1.1); }
		100% { transform: translate(0, 0) rotate(360deg) scale(1); }
	}

	/* BuildWithFlow-style morphing reveal animation */
	@keyframes buildflow-morph-reveal {
		0% {
			transform: scale(0) rotate(0deg);
			border-radius: 50% 30% 70% 40%;
			opacity: 0;
		}
		50% {
			transform: scale(1.2) rotate(180deg);
			border-radius: 40% 60% 30% 70%;
			opacity: 0.8;
		}
		100% {
			transform: scale(1) rotate(360deg);
			border-radius: 30% 70% 40% 60%;
			opacity: 1;
		}
	}

	/* BuildWithFlow-style fluid reveal */
	@keyframes buildflow-fluid-reveal {
		0% {
			opacity: 0;
			transform: translateY(60px) scale(0.95) rotateX(10deg);
		}
		60% {
			opacity: 0.8;
			transform: translateY(-10px) scale(1.02) rotateX(-2deg);
		}
		100% {
			opacity: 1;
			transform: translateY(0) scale(1) rotateX(0deg);
		}
	}

	/* Performance optimizations */
	.buildflow-floating-orb,
	.buildflow-morph-shape,
	.buildflow-scroll-floater {
		transform: translateZ(0);
		backface-visibility: hidden;
		perspective: 1000px;
	}

	/* Smooth scroll behavior for buildflow elements */
	@media (prefers-reduced-motion: no-preference) {
		.buildflow-scroll-reveal {
			animation: buildflow-fluid-reveal 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
			animation-play-state: paused;
		}
		
		.buildflow-morph-shape {
			animation: buildflow-morph-reveal 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
			animation-play-state: paused;
		}
	}

	/* Enhanced Lottie integration with BuildWithFlow styles */
	.lottie-icon-container,
	.hero-lottie-container,
	.lottie-particles-container {
		transform: translateZ(0);
		backface-visibility: hidden;
		will-change: transform, opacity;
	}

	/* Scroll-triggered morphing backgrounds */
	.section:nth-child(even) .buildflow-morph-shape {
		right: auto;
		left: -10%;
		background: linear-gradient(225deg, 
			rgba(152, 216, 200, 0.1), 
			rgba(244, 164, 96, 0.1), 
			rgba(135, 206, 235, 0.1));
	}

	/* Responsive BuildWithFlow elements */
	@media (max-width: 768px) {
		.buildflow-floating-orb {
			width: 80% !important;
			height: 80% !important;
		}
		
		.buildflow-morph-shape {
			width: 200px !important;
			height: 200px !important;
		}
		
		.buildflow-floating-container {
			opacity: 0.3 !important;
		}
		
		/* Reduce animation complexity on mobile */
		.buildflow-floating-orb,
		.buildflow-scroll-floater {
			animation-duration: 12s !important;
		}
	}

	@media (max-width: 768px) {
		.section {
			padding: 4rem 0;
		}
		
		.section-title {
			font-size: 2.5rem;
		}
		
		.container {
			padding: 0 1.5rem;
		}
		
		.btn {
			padding: 0.875rem 1.75rem;
		}

		.animated-section-icon {
			width: 50px;
			height: 50px;
			font-size: 1.25rem;
			top: 15px;
			right: 15px;
		}

		/* Disable complex animations on mobile for performance */
		.morphing-bg::before {
			animation-duration: 30s;
		}

		@media (prefers-reduced-motion: reduce) {
			* {
				animation-duration: 0.01ms !important;
				animation-iteration-count: 1 !important;
				transition-duration: 0.01ms !important;
			}
		}
	}

/* === Design Refresh v2: Premium Webapp Look === */
:root {
  /* Surfaces & shadows */
  --bg: #f8fafc;
  --surface: #ffffff;
  --surface-2: #f5f7fb;
  --border: rgba(31, 41, 55, 0.12);
  --shadow-sm: 0 1px 2px rgba(16, 24, 40, 0.06);
  --shadow-md: 0 8px 24px rgba(2, 6, 23, 0.08);
  --shadow-lg: 0 16px 40px rgba(2, 6, 23, 0.10);
  --radius-sm: 10px;
  --radius-md: 16px;
  --radius-lg: 24px;
  --radius-xl: 28px;
  --gradient-accent: linear-gradient(135deg, var(--primary-blue), var(--muted-green), var(--muted-orange));
}


/* Background mesh + subtle grid overlay */
body {
  background: radial-gradient(1200px 600px at 10% -10%, rgba(135,206,235,0.25), transparent 60%),
              radial-gradient(1000px 600px at 90% 10%, rgba(244,164,96,0.18), transparent 60%),
              radial-gradient(800px 500px at 50% 100%, rgba(152,216,200,0.18), transparent 60%),
              var(--bg);
}

.section {
  position: relative;
  background: transparent;
}

/* Alternate sections with ultra-subtle tone */
.section:nth-of-type(even) {
  background: linear-gradient(180deg, rgba(15,23,42,0.03), transparent 60%);
}

/* Hero enhancements: gradient mesh overlay + grain */
.hero {
  position: relative;
  isolation: isolate;
}
.hero::before {
  content: '';
  position: absolute;
  inset: -10% -5% 0 -5%;
  z-index: -2;
  background: radial-gradient(600px 300px at 20% 10%, rgba(135,206,235,0.35), transparent 55%),
              radial-gradient(600px 300px at 80% 0%, rgba(152,216,200,0.25), transparent 55%),
              radial-gradient(800px 400px at 50% 90%, rgba(244,164,96,0.22), transparent 60%);
  filter: saturate(110%);
}
.hero::after {
  content: '';
  position: absolute;
  inset: 0;
  z-index: -1;
  background:
    linear-gradient(transparent, rgba(255,255,255,0.02)),
    repeating-linear-gradient(0deg, rgba(0,0,0,0.04), rgba(0,0,0,0.04) 1px, transparent 1px, transparent 20px),
    repeating-linear-gradient(90deg, rgba(0,0,0,0.03), rgba(0,0,0,0.03) 1px, transparent 1px, transparent 20px);
  mix-blend-mode: overlay;
  pointer-events: none;
}

/* Container scale refinement */
.container { max-width: 1200px; }
@media (min-width: 1440px) { .container { max-width: 1240px; } }
@media (min-width: 1680px) { .container { max-width: 1320px; } }

/* Fluid type scale */
:root {
  --step--1: clamp(0.85rem, 0.82rem + 0.2vw, 0.95rem);
  --step-0: clamp(1rem, 0.95rem + 0.3vw, 1.125rem);
  --step-1: clamp(1.25rem, 1.15rem + 0.6vw, 1.5rem);
  --step-2: clamp(1.6rem, 1.35rem + 1.2vw, 2.125rem);
  --step-3: clamp(2.1rem, 1.7rem + 2.0vw, 2.75rem);
  --step-4: clamp(2.6rem, 2.0rem + 3.0vw, 3.5rem);
}
.section-title { font-size: var(--step-4); letter-spacing: -0.02em; }
.section-subtitle { font-size: var(--step-0); }
body { font-size: var(--step-0); }

/* Premium cards */
.card {
  background: linear-gradient(#fff, #fff) padding-box,
              linear-gradient(145deg, rgba(135,206,235,0.35), rgba(152,216,200,0.25), rgba(244,164,96,0.25)) border-box;
  border: 1px solid transparent;
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
}
.card:hover {
  box-shadow: var(--shadow-lg);
}
.card.card-pro {
  position: relative;
  background: linear-gradient(180deg, rgba(255,255,255,0.85), rgba(255,255,255,0.75)) padding-box,
              linear-gradient(135deg, var(--primary-blue), var(--muted-green), var(--muted-orange)) border-box;
  border: 1px solid transparent;
  border-radius: var(--radius-xl);
}
.card.card-pro::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: radial-gradient(400px 200px at 20% 0%, rgba(135,206,235,0.12), transparent 60%),
              radial-gradient(400px 200px at 80% 0%, rgba(152,216,200,0.1), transparent 60%);
  pointer-events: none;
}

/* Button set: primary/secondary/ghost */
.btn { border-radius: 999px; font-weight: 700; letter-spacing: 0.01em; }
.btn-primary {
  background: linear-gradient(180deg, rgba(255,255,255,0.2), rgba(255,255,255,0)) padding-box,
              linear-gradient(135deg, var(--primary-blue), var(--primary-blue-dark)) border-box,
              linear-gradient(135deg, var(--primary-blue), var(--primary-blue-dark));
  border: 1px solid transparent;
}
.btn-primary:hover { transform: translateY(-3px) scale(1.03); }

.btn-secondary {
  color: var(--primary-blue-dark);
  background: linear-gradient(#fff, #fff) padding-box,
              linear-gradient(135deg, var(--primary-blue), var(--muted-green)) border-box;
  border: 1px solid transparent;
}

.btn-ghost {
  background: transparent;
  color: var(--text-dark);
  border: 1px solid var(--border);
}
.btn-ghost:hover {
  background: rgba(135, 206, 235, 0.08);
  border-color: rgba(135, 206, 235, 0.35);
}

/* Badges */
.badge {
  display: inline-flex; align-items: center; gap: .5rem;
  padding: .35rem .75rem; border-radius: 999px; font-weight: 600; font-size: .85rem;
  border: 1px solid var(--border); background: rgba(255,255,255,0.6);
  box-shadow: var(--shadow-sm);
}
.badge-accent { border-color: rgba(135,206,235,0.4); background: rgba(135,206,235,0.12); color: #0c4a6e; }

/* Feature list */
.features { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 1.5rem; }
.feature { display: grid; grid-template-columns: 44px 1fr; gap: 1rem; align-items: start; }
.feature-icon { width: 44px; height: 44px; border-radius: 12px; background: var(--gradient-accent); box-shadow: var(--shadow-md); }
.feature-title { font-weight: 700; letter-spacing: -.01em; }
.feature-desc { color: var(--text-light); font-size: var(--step--1); }

/* Section dividers */
.section--divider::after {
  content: ''; position: absolute; left: 50%; transform: translateX(-50%);
  bottom: 0; width: min(1200px, 90%); height: 1px;
  background: linear-gradient(90deg, transparent, rgba(135,206,235,0.35), transparent);
}

/* Layout utilities */
.stack > * + * { margin-top: var(--stack-space, 1rem); }
.cluster { display: flex; flex-wrap: wrap; align-items: center; gap: var(--cluster-gap, .75rem); }
.auto-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(var(--cell-min, 280px), 1fr)); gap: var(--grid-gap, 1.25rem); }
.container-sm { max-width: 760px; margin-inline: auto; padding-inline: 1rem; }
.container-md { max-width: 980px; margin-inline: auto; padding-inline: 1rem; }
.container-lg { max-width: 1200px; margin-inline: auto; padding-inline: 1rem; }
.container-xl { max-width: 1320px; margin-inline: auto; padding-inline: 1rem; }

	body img,
	body video,
	body canvas,
	body svg {
		max-width: 100%;
		height: auto;
		display: block;
	}

</style>
