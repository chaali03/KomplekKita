---
import Layout from "~/layouts/admin-layout.astro";
import AdminSidebar from "../../components/Admin-site/admin-sidebar.astro";
import AdminTopbar from "../../components/Admin-site/admin-topbar.astro";
// Complex branding to show in admin UI
const complexName = 'Komplek Anggrek Asri';
const complexImage = 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=100&h=100&fit=crop&crop=center';
---

<Layout>
  <AdminSidebar slot="sidebar" complexName={complexName} complexImage={complexImage} />
  <AdminTopbar slot="topbar" complexName={complexName} complexImage={complexImage} />

  <div class="info-ui">
    <!-- Header -->
    <section class="section-header-card pre-anim">
      <div class="section-header-left">
        <div class="section-icon gradient-icon"><i class="fas fa-info-circle fa-bounce"></i></div>
        <div class="section-title">
          <h1><span class="gradient-text">Informasi</span></h1>
          <p>Kelola pengumuman dan informasi untuk warga. Pin, kategori, banner, dan arsip.</p>
        </div>
      </div>
      <div class="section-actions">
        <button id="btn-open-create" class="btn primary pressable btn-glow">
          <i class="fas fa-bullhorn"></i>
          <span>Buat Informasi</span>
        </button>
        <button id="btn-manage-cats" class="btn soft pressable btn-hover-effect">
          <i class="fas fa-tags"></i>
          <span>Kelola Kategori</span>
        </button>
      </div>
    </section>

    <!-- Overview Stats -->
    <section class="stats-row pre-anim">
      <div class="stat-box stat-box-enhanced">
        <div class="stat-icon primary stat-icon-pulse"><i class="fas fa-newspaper"></i></div>
        <div class="stat-meta">
          <span class="stat-label">Total Informasi</span>
          <span id="stat-total" class="stat-value">0</span>
          <div class="stat-progress"><div class="stat-progress-bar" style="width: 100%"></div></div>
        </div>
      </div>
      <div class="stat-box stat-box-enhanced">
        <div class="stat-icon warning stat-icon-float"><i class="fas fa-thumbtack"></i></div>
        <div class="stat-meta">
          <span class="stat-label">Pinned</span>
          <span id="stat-pinned" class="stat-value">0</span>
          <div class="stat-progress"><div class="stat-progress-bar" style="width: 50%"></div></div>
        </div>
      </div>
      <div class="stat-box stat-box-enhanced">
        <div class="stat-icon success stat-icon-rotate"><i class="fas fa-tags"></i></div>
        <div class="stat-meta">
          <span class="stat-label">Kategori Aktif</span>
          <span id="stat-categories" class="stat-value">0</span>
          <div class="stat-progress"><div class="stat-progress-bar" style="width: 75%"></div></div>
        </div>
      </div>
    </section>

    <!-- Filter + List -->
    <section class="card block pre-anim">
      <div class="card-header">
        <div class="card-title">
          <div class="title-icon"><i class="fas fa-newspaper"></i></div>
          <h2>Daftar Informasi</h2>
        </div>
        <div class="card-actions actions-wrap">
          <div class="input-group">
            <span class="input-icon"><i class="fas fa-search"></i></span>
            <input id="info-search" type="text" placeholder="Cari judul, kategori..." aria-label="Cari informasi" />
          </div>
          <div class="select-box">
            <label for="sort-select" class="sr-only">Urutkan</label>
            <select id="sort-select" class="select">
              <option value="newest">Terbaru</option>
              <option value="oldest">Terlama</option>
              <option value="title">Judul A-Z</option>
              <option value="pinned">Pinned duluan</option>
            </select>
          </div>
          <div id="view-toggle" class="segmented" role="tablist" aria-label="Tampilan">
            <button class="seg-btn active pressable" data-view="grid" role="tab" aria-selected="true" aria-controls="info-grid"><i class="fas fa-th-large"></i> Grid</button>
            <button class="seg-btn pressable" data-view="list" role="tab" aria-selected="false" aria-controls="info-grid"><i class="fas fa-list"></i> List</button>
          </div>
        </div>
      </div>
      <div class="card-subheader">
        <div id="info-chips" class="chips">
          <button class="chip pressable" data-cat="all" aria-pressed="true"><i class="fas fa-layer-group"></i> Semua</button>
          <button class="chip pressable" data-cat="Umum"><i class="fas fa-circle"></i> Umum</button>
          <button class="chip pressable" data-cat="Keamanan"><i class="fas fa-shield-alt"></i> Keamanan</button>
          <button class="chip pressable" data-cat="Lingkungan"><i class="fas fa-leaf"></i> Lingkungan</button>
          <button class="chip pressable" data-cat="Acara"><i class="fas fa-calendar-alt"></i> Acara</button>
          <button class="chip pressable" data-pinned="only"><i class="fas fa-thumbtack"></i> Pinned</button>
        </div>
      </div>
      <div class="card-body">
        <div id="info-grid" class="info-grid stagger-container" aria-live="polite"></div>
      </div>
    </section>

    <!-- Modal: Create/Edit Informasi -->
    <div id="info-modal" class="kk-modal" aria-hidden="true">
      <div class="kk-modal__overlay" data-close></div>
      <div class="kk-modal__content kk-modal__content--md" role="dialog" aria-modal="true" aria-labelledby="info-modal-title">
        <div class="kk-modal__header">
          <h3 id="info-modal-title"><i class="fas fa-bullhorn"></i> <span id="modal-title-text">Buat Informasi</span></h3>
          <button class="kk-modal__close pressable" data-close aria-label="Tutup"><i class="fas fa-times"></i></button>
        </div>
        <form id="info-form" class="kk-form">
          <input type="hidden" id="info-id" />
          <div class="kk-form__grid">
            <div class="kk-form__field">
              <label for="title">Judul</label>
              <input id="title" type="text" placeholder="Judul informasi" required />
            </div>
            <div class="kk-form__field">
              <label for="category">Kategori</label>
              <select id="category">
                <option>Umum</option>
                <option>Keamanan</option>
                <option>Lingkungan</option>
                <option>Acara</option>
              </select>
            </div>
            <div class="kk-form__field">
              <label for="date">Tanggal</label>
              <input id="date" type="date" />
            </div>
            <div class="kk-form__field kk-form__field--checkbox">
              <label class="kk-checkbox">
                <input id="pinned" type="checkbox" />
                <span>Pin Informasi</span>
              </label>
            </div>
            <div class="kk-form__field kk-form__field--full">
              <label for="content">Konten</label>
              <textarea id="content" rows="4" placeholder="Detail informasi..."></textarea>
            </div>
            <div class="kk-form__field kk-form__field--full">
              <label for="banner">Banner (opsional)</label>
              <div class="dropzone">
                <input id="banner" type="file" accept="image/*" />
                <div class="dropzone-hint">
                  <i class="fas fa-image"></i>
                  <div>
                    <strong>Upload banner</strong>
                    <div class="hint-sub">PNG, JPG — maksimal 2MB · Rekomendasi 1200×600px</div>
                  </div>
                </div>
              </div>
              <div class="banner-preview" id="banner-preview" hidden>
                <img id="banner-img" alt="Banner Preview" />
                <div class="banner-meta" id="banner-meta" hidden></div>
                <button class="btn light sm pressable" id="banner-remove" type="button"><i class="fas fa-times"></i> Hapus</button>
              </div>
            </div>
          </div>
          <div class="kk-modal__footer">
            <button type="button" class="btn light pressable" data-close>Batal</button>
            <button type="submit" class="btn primary pressable"><i class="fas fa-save"></i> Simpan</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Modal: Kelola Kategori -->
    <div id="cats-modal" class="kk-modal" aria-hidden="true">
      <div class="kk-modal__overlay" data-close></div>
      <div class="kk-modal__content kk-modal__content--md" role="dialog" aria-modal="true" aria-labelledby="cats-modal-title">
        <div class="kk-modal__header">
          <h3 id="cats-modal-title"><i class="fas fa-tags"></i> Kelola Kategori</h3>
          <button class="kk-modal__close pressable" data-close aria-label="Tutup"><i class="fas fa-times"></i></button>
        </div>
        <div class="kk-modal__body">
          <div class="cats-add-row">
            <input id="cat-input" type="text" placeholder="Tambah kategori baru" />
            <button id="cat-add" class="btn primary pressable"><i class="fas fa-plus"></i> Tambah</button>
          </div>
          <div id="cats-list" class="cats-list"></div>
          <div class="cats-hint">Kategori "Umum" tidak dapat dihapus.</div>
        </div>
        <div class="kk-modal__footer">
          <button type="button" class="btn light pressable" data-close>Batal</button>
        </div>
      </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div id="confirm-modal" class="kk-modal" aria-hidden="true">
      <div class="kk-modal__overlay" data-close></div>
      <div class="kk-modal__content kk-modal__content--sm" role="dialog" aria-modal="true" aria-labelledby="confirm-title">
        <div class="kk-modal__header">
          <h3 id="confirm-title"><i class="fas fa-exclamation-triangle"></i> Konfirmasi Hapus</h3>
          <button class="kk-modal__close pressable" data-close aria-label="Tutup"><i class="fas fa-times"></i></button>
        </div>
        <div class="kk-modal__body">
          <p id="confirm-body">Yakin ingin menghapus informasi ini? Tindakan ini tidak dapat dibatalkan.</p>
        </div>
        <div class="kk-modal__footer">
          <button type="button" class="btn light pressable" data-close>Batal</button>
          <button type="button" class="btn danger pressable" id="confirm-delete-btn"><i class="fas fa-trash"></i> Hapus</button>
        </div>
      </div>
    </div>

    <!-- Toast -->
    <div id="kk-toast" class="kk-toast" role="status" aria-live="polite" aria-atomic="true" hidden></div>
  </div>

  <style>
    /* THEME */
    .info-ui {
      --primary: #085895;
      --primary-600: #0a5ca8;
      --danger: #ef4444;
      --warning: #f59e0b;
      --success: #16a34a;

      --bg: #f5f7fb;
      --surface: #ffffff;
      --surface-2: #f7f9fc;
      --outline: #e6eaf0;
      --outline-2: #d8dde5;

      --text: #0f172a;
      --text-muted: #64748b;
      --text-subtle: #7c8aa3;

      --radius-lg: 16px;
      --radius-md: 12px;
      --radius-sm: 8px;

      --shadow-sm: 0 2px 10px rgba(20, 40, 80, 0.06);
      --shadow-md: 0 8px 22px rgba(20, 40, 80, 0.08);
      --shadow-lg: 0 16px 44px rgba(20, 40, 80, 0.10);

      --ring: #93c5fd;
      --glass: color-mix(in srgb, #fff 72%, transparent);
      --glass-strong: color-mix(in srgb, #fff 60%, transparent);
    }
    .info-ui {
      display: grid;
      gap: 20px;
      padding: 16px;
      color: var(--text);
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
    }

    /* UTIL */
    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }
    .pressable:active { transform: translateY(0.5px) scale(.98); }
    .pre-anim { opacity: 0; transform: translateY(8px); }
    .animate-in { animation: kk-fade-up .45s cubic-bezier(.2,.7,.2,1) forwards; }
    .stagger-container > * { opacity: 0; transform: translateY(8px); }
    .stagger-container > *.stagger-in { animation: kk-fade-up .45s cubic-bezier(.2,.7,.2,1) forwards; }
    @keyframes kk-fade-up { to { opacity: 1; transform: translateY(0); } }

    /* HEADER */
    .section-header-card {
      display: flex; justify-content: space-between; align-items: center; gap: 12px;
      background: linear-gradient(135deg, var(--surface), var(--surface-2));
      border: 1px solid var(--outline); border-radius: var(--radius-lg);
      padding: 20px 24px; box-shadow: var(--shadow-md);
      backdrop-filter: blur(10px);
      position: relative;
      overflow: hidden;
    }
    .section-header-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--primary), #4d9be6, var(--primary));
      background-size: 200% 100%;
      animation: gradient-shift 4s ease infinite;
    }
    @keyframes gradient-shift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    .section-header-left { display: flex; gap: 16px; align-items: center; }
    .section-icon {
      width: 52px; height: 52px; display: grid; place-items: center;
      background: linear-gradient(135deg, #e9f3ff, #d1e6ff);
      color: var(--primary);
      border: 1px solid var(--outline); border-radius: 14px;
      font-size: 1.3rem;
      box-shadow: 0 4px 12px rgba(8, 88, 149, 0.15);
      transition: all 0.3s ease;
    }
    .section-icon:hover {
      transform: scale(1.05) rotate(5deg);
      box-shadow: 0 6px 16px rgba(8, 88, 149, 0.25);
    }
    .section-icon i {
      animation: icon-bounce 2s ease infinite;
    }
    @keyframes icon-bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
    .section-title h1 { 
      margin: 0; font-size: 1.4rem; font-weight: 800; 
      letter-spacing: .2px; 
      background: linear-gradient(90deg, var(--primary), #4d9be6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }
    .section-title p { 
      margin: 4px 0 0; 
      color: var(--text-muted); 
      font-size: 0.95rem;
      max-width: 500px;
    }

    /* BUTTONS */
    .btn {
      display: inline-flex; align-items: center; gap: 8px;
      height: 38px; padding: 0 16px; border-radius: 12px;
      border: 1px solid var(--outline); background: var(--surface-2);
      color: var(--text); font-weight: 800; box-shadow: var(--shadow-sm);
      outline: none; position: relative; overflow: hidden;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    }
    .btn::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      pointer-events: none;
      background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
      background-repeat: no-repeat;
      background-position: 50%;
      transform: scale(10, 10);
      opacity: 0;
      transition: transform .5s, opacity .5s;
    }
    .btn:active::after {
      transform: scale(0, 0);
      opacity: .3;
      transition: 0s;
    }
    .btn:hover { transform: translateY(-2px); box-shadow: 0 8px 20px rgba(15, 23, 42, .12); }
    .btn:active { transform: translateY(1px) scale(.98); box-shadow: var(--shadow-sm); }
    .btn:focus-visible { box-shadow: 0 0 0 3px var(--ring); }
    .btn.primary { 
      background: linear-gradient(135deg, var(--primary), var(--primary-600)); 
      border-color: #0a5699; color: #fff; 
      box-shadow: 0 4px 12px rgba(8, 88, 149, 0.2);
    }
    .btn.primary:hover {
      box-shadow: 0 8px 24px rgba(8, 88, 149, 0.3);
    }
    .btn.soft { background: var(--surface); }
    .btn.light { background: var(--surface-2); }
    .btn.danger { 
      background: linear-gradient(135deg, #ef4444, #dc2626); 
      color: white; border-color: #b91c1c; 
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2);
    }
    .btn.danger:hover {
      box-shadow: 0 8px 24px rgba(239, 68, 68, 0.3);
    }
    .btn.sm { height: 32px; padding: 0 14px; border-radius: 10px; font-weight: 800; }
    
    /* Button special effects */
    .btn-glow {
      animation: button-glow 2s infinite alternate;
    }
    @keyframes button-glow {
      0% { box-shadow: 0 0 5px rgba(8, 88, 149, 0.5); }
      100% { box-shadow: 0 0 20px rgba(8, 88, 149, 0.8); }
    }
    
    .btn-hover-effect:hover {
      letter-spacing: 0.5px;
    }

    /* STATS ROW */
    .stats-row {
      display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 16px;
    }
    .stat-box {
      display: grid; grid-template-columns: auto 1fr; gap: 14px; align-items: center;
      background: linear-gradient(135deg, var(--surface), var(--surface-2)); 
      border: 1px solid var(--outline); border-radius: var(--radius-lg);
      padding: 16px 18px; box-shadow: var(--shadow-sm);
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }
    .stat-box:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-md);
      border-color: var(--outline-2);
    }
    .stat-box::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, transparent, var(--primary), transparent);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .stat-box:hover::after {
      opacity: 1;
    }
    .stat-icon {
      width: 48px; height: 48px; display: grid; place-items: center; border-radius: 14px;
      border: 1px solid var(--outline); 
      background: linear-gradient(135deg, var(--surface-2), #f0f7ff); 
      color: var(--primary);
      box-shadow: 0 4px 12px rgba(8, 88, 149, 0.1);
      position: relative;
      z-index: 1;
    }
    .stat-icon i {
      font-size: 1.2rem;
    }
    .stat-icon-pulse i {
      animation: pulse 2s infinite;
    }
    .stat-icon-float i {
      animation: float 3s ease-in-out infinite;
    }
    .stat-icon-rotate i {
      animation: rotate 4s linear infinite;
    }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.15); }
      100% { transform: scale(1); }
    }
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .stat-icon.warning { 
      color: #b87300; 
      background: linear-gradient(135deg, #fff4e0, #ffeccc); 
      border-color: #f3e1c0; 
      box-shadow: 0 4px 12px rgba(184, 115, 0, 0.1);
    }
    .stat-icon.success { 
      color: #0c6b2f; 
      background: linear-gradient(135deg, #e8f6ee, #d7eadf); 
      border-color: #d7eadf; 
      box-shadow: 0 4px 12px rgba(12, 107, 47, 0.1);
    }
    .stat-meta { display: grid; gap: 4px; }
    .stat-label { 
      color: var(--text-muted); 
      font-weight: 700; 
      font-size: .85rem; 
      display: flex;
      align-items: center;
      gap: 6px;
    }
    .stat-value { 
      font-weight: 900; 
      font-size: 1.4rem; 
      background: linear-gradient(90deg, var(--primary), #4d9be6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }
    .stat-progress {
      height: 6px;
      width: 100%;
      background: #e6eaf0;
      border-radius: 999px;
      margin-top: 6px;
      overflow: hidden;
    }
    .stat-progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--primary), #4d9be6);
      border-radius: 999px;
      width: 75%;
      transition: width 1s ease;
    }
    .stat-progress-bar.warning {
      background: linear-gradient(90deg, #f59e0b, #fbbf24);
      width: 45%;
    }
    .stat-progress-bar.success {
      background: linear-gradient(90deg, #16a34a, #4ade80);
      width: 85%;
    }

    /* CARD WRAPPER */
    .card.block {
      background: linear-gradient(135deg, var(--surface), var(--surface-2)); 
      border: 1px solid var(--outline); border-radius: var(--radius-lg);
      box-shadow: var(--shadow-sm); overflow: hidden;
      container-type: inline-size; /* enable container queries */
      transition: all 0.3s ease;
    }
    .card.block:hover {
      box-shadow: var(--shadow-md);
      border-color: var(--outline-2);
    }
    .card-header {
      display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap;
      padding: 18px 20px; border-bottom: 1px solid var(--outline);
      background: linear-gradient(to right, rgba(233, 243, 255, 0.3), transparent);
    }
    .card-title { display: flex; align-items: center; gap: 12px; }
    .title-icon {
      width: 42px; height: 42px; display: grid; place-items: center;
      border: 1px solid var(--outline); border-radius: 12px;
      background: linear-gradient(135deg, #eef4fb, #d1e6ff); 
      color: var(--primary);
      box-shadow: 0 4px 12px rgba(8, 88, 149, 0.1);
      transition: all 0.3s ease;
    }
    .title-icon:hover {
      transform: rotate(10deg) scale(1.05);
      box-shadow: 0 6px 16px rgba(8, 88, 149, 0.2);
    }
    .title-icon i {
      font-size: 1.2rem;
      animation: icon-pulse 2s infinite alternate;
    }
    @keyframes icon-pulse {
      0% { transform: scale(1); }
      100% { transform: scale(1.15); }
    }
    .card-title h2 { 
      margin: 0; font-size: 1.1rem; font-weight: 900; 
      background: linear-gradient(90deg, var(--primary), #4d9be6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }
    .actions-wrap {
      display: flex; align-items: center; gap: 18px; flex-wrap: wrap;
      justify-content: flex-start; width: 100%;
    }
    .actions-wrap > * { flex: 0 0 auto; position: relative; z-index: 0; }
    .card-subheader { 
      padding: 12px 16px; 
      border-bottom: 1px solid var(--outline); 
      background: linear-gradient(to right, rgba(233, 243, 255, 0.2), transparent);
    }

    /* INPUT GROUP */
    .input-group { 
      position: relative; width: auto; flex: 1 1 480px; min-width: 200px; margin-right: 0; 
      z-index: 0; 
    }
    .input-group input {
      width: 100%; height: 42px; border-radius: 999px; 
      border: 1px solid var(--outline);
      background: linear-gradient(180deg, var(--surface-2), var(--surface)); 
      padding: 0 16px 0 44px; color: var(--text); font-weight: 600; 
      outline: none; font-size: 0.95rem;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
    }
    .input-group input:hover { 
      border-color: var(--outline-2); 
      box-shadow: 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    .input-group input:focus-visible { 
      box-shadow: 0 0 0 3px var(--ring), 0 8px 20px rgba(8,88,149,.15); 
      border-color: var(--ring); 
      transform: translateY(-2px);
    }
    .input-group::before {
      content: '';
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: radial-gradient(circle at center, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      opacity: 0;
      transform: scale(0);
      transition: transform 0.5s ease, opacity 0.3s ease;
      pointer-events: none;
      z-index: 1;
    }
    .input-group:active::before {
      opacity: 1;
      transform: scale(2);
      transition: transform 0.3s ease, opacity 0.3s ease;
    }
    .input-icon { 
      position: absolute; left: 16px; top: 50%; 
      transform: translateY(-50%); 
      color: var(--text-subtle); 
      transition: all 0.3s ease;
      font-size: 1rem;
    }
    .input-group:hover .input-icon,
    .input-group input:focus ~ .input-icon { 
      color: var(--primary); 
      transform: translateY(-50%) scale(1.1);
    }

    /* SELECT + SEGMENTED */
    .select-box { z-index: 1; margin-left: 2px; position: relative; }
    .select-box .select {
      height: 42px; border-radius: 12px; 
      border: 1px solid var(--outline); 
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      padding: 0 14px; font-weight: 800; color: var(--text); 
      outline: none; cursor: pointer;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
    }
    .select-box .select:hover {
      border-color: var(--outline-2);
      box-shadow: 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    .select:focus-visible { 
      box-shadow: 0 0 0 3px var(--ring), 0 8px 20px rgba(8,88,149,.15); 
      border-color: var(--ring);
      transform: translateY(-2px);
    }
    .select-box::after {
      content: '\f107'; /* FontAwesome chevron-down */
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      right: 14px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-subtle);
      pointer-events: none;
      transition: transform 0.3s ease;
    }
    .select-box:hover::after {
      transform: translateY(-50%) rotate(180deg);
      color: var(--primary);
    }
    .segmented { 
      display: inline-flex; 
      background: linear-gradient(180deg, var(--surface-2), var(--surface)); 
      border: 1px solid var(--outline); 
      border-radius: 12px; 
      padding: 2px; 
      height: 42px; 
      z-index: 1; 
      margin-left: 2px; 
      box-shadow: inset 0 1px 0 rgba(255,255,255,.6), 0 2px 8px rgba(0,0,0,.04); 
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    }
    .segmented:hover {
      border-color: var(--outline-2);
      box-shadow: inset 0 1px 0 rgba(255,255,255,.6), 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    .seg-btn {
      display: inline-flex; align-items: center; gap: 6px; 
      height: 38px; padding: 0 14px; border: 0; 
      background: transparent; color: var(--text); 
      font-weight: 800; border-radius: 10px; outline: none;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }
    .seg-btn::before {
      content: '';
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: radial-gradient(circle at center, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      opacity: 0;
      transform: scale(0);
      transition: transform 0.5s ease, opacity 0.3s ease;
      pointer-events: none;
    }
    .seg-btn:hover {
      color: var(--primary);
    }
    .seg-btn:hover i {
      transform: rotate(15deg) scale(1.2);
    }
    .seg-btn:active::before {
      opacity: 1;
      transform: scale(2);
      transition: transform 0.3s ease, opacity 0.3s ease;
    }
    .seg-btn i {
      transition: transform 0.3s ease;
    }
    .seg-btn.active { 
      background: var(--surface); 
      border: 1px solid var(--outline); 
      box-shadow: 0 6px 16px rgba(15, 23, 42, .06); 
      color: var(--primary);
    }

    /* Attach look only on wide screens */
    @media (min-width: 1024px){
      .actions-wrap .input-group + .select-box { margin-left: 40px; }
      .actions-wrap .input-group input { border-top-right-radius: 999px; border-bottom-right-radius: 999px; }
      .actions-wrap .input-group + .select-box .select { border-top-left-radius: 12px; border-bottom-left-radius: 12px; border-left: 1px solid var(--outline); }
    }

    /* Responsive tweak to avoid collisions */
    @media (max-width: 900px){
      .card-header{ flex-wrap: wrap; row-gap: 10px; }
      .actions-wrap{ width: 100%; gap: 12px; justify-content: flex-start; }
      .input-group{ order: -1; width: 100%; flex: 1 1 100%; min-width: 0; margin-right: 0; }
      .select-box, .segmented{ flex: 0 0 auto; }
      .actions-wrap .input-group + .select-box{ margin-left: 0; }
    }

    /* Ensure wrap also in tablet widths */
    @media (max-width: 1024px){
      /* Switch to grid so search can be forced to the first full-width row */
      .card-header{ display: grid; grid-template-columns: 1fr; row-gap: 10px; }
      .actions-wrap{ grid-row: 1; justify-self: stretch; width: 100%; justify-content: flex-start; display: grid; grid-template-columns: 1fr auto auto; column-gap: 8px; }
      .card-title{ grid-row: 2; }
      .input-group{ order: 0; width: 100%; flex: 1 1 100%; min-width: 0; grid-column: 1 / -1; }
      .actions-wrap .input-group + .select-box{ margin-left: 0; }
      .segmented{ margin-left: 0; }
    }

    /* Compact search for small screens */
    @media (max-width: 640px){
      .card-header{ align-items: stretch; }
      .actions-wrap{ width: 100%; gap: 10px; }
      .actions-wrap .input-group{ order: -1; width: 100%; flex: 1 1 100%; min-width: 0; margin-right: 0; }
      .actions-wrap .input-group + .select-box{ margin-left: 0; }
      .segmented{ margin-left: 0; }

      .input-group input{ height: 36px; padding-left: 36px; font-size: .95rem; }
      .input-icon{ left: 10px; }

      .select-box .select{ height: 36px; border-radius: 10px; padding: 0 10px; }
      .segmented{ height: 36px; border-radius: 10px; }
      .seg-btn{ height: 32px; padding: 0 10px; gap: 4px; font-size: .94rem; }
    }

    /* CHIPS */
    .chips { 
      display: flex; overflow-x: auto; gap: 10px; padding: 4px 2px 6px; 
      scrollbar-width: thin; scrollbar-color: var(--primary-600) transparent;
      position: relative;
    }
    .chips::-webkit-scrollbar { height: 6px; }
    .chips::-webkit-scrollbar-thumb { 
      background: linear-gradient(90deg, var(--primary-600), var(--primary)); 
      border-radius: 999px; 
    }
    .chip {
      display: inline-flex; align-items: center; gap: 8px; height: 36px; 
      padding: 0 14px; border-radius: 999px;
      border: 1px solid var(--outline); 
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      color: var(--text); font-weight: 800; outline: none; white-space: nowrap; 
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      position: relative;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
    }
    .chip::before {
      content: '';
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: radial-gradient(circle at center, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      opacity: 0;
      transform: scale(0);
      transition: transform 0.5s ease, opacity 0.3s ease;
    }
    .chip:hover { 
      border-color: var(--outline-2); 
      box-shadow: 0 6px 16px rgba(0,0,0,.1); 
      transform: translateY(-2px);
    }
    .chip:active::before {
      opacity: 1;
      transform: scale(2);
      transition: transform 0.3s ease, opacity 0.3s ease;
    }
    .chip:focus-visible { box-shadow: 0 0 0 3px var(--ring); }
    .chip.active, .chip[aria-pressed="true"] { 
      background: linear-gradient(180deg, var(--primary), var(--primary-600)); 
      color: #fff; border-color: #0a5699; 
      box-shadow: 0 10px 24px rgba(8,88,149,.22); 
    }
    .chip i {
      transition: transform 0.3s ease;
    }
    .chip:hover i {
      transform: rotate(15deg) scale(1.2);
    }

    /* GRID / LIST */
    .card-body { padding: 16px; }
    .info-grid.grid-mode { display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 16px; }
    .info-grid.list-mode { display: grid; gap: 10px; }

    /* CARD ITEM */
    .info-card{
      position: relative;
      background: linear-gradient(180deg, var(--surface), var(--surface-2)); border: 1px solid var(--outline);
      border-radius: 18px; box-shadow: var(--shadow-sm);
      overflow: hidden; transition: all .3s cubic-bezier(0.16, 1, 0.3, 1);
    }
    .info-card:hover { 
      box-shadow: 0 12px 28px rgba(0,0,0,0.15); 
      transform: translateY(-5px); 
      border-color: var(--outline-2); 
    }
    .info-card::before { /* accent bar */
      content: ""; position: absolute; top: 0; left: 0; right: 0; height: 4px; background: transparent;
      transition: all 0.3s ease;
    }
    .info-card.pinned::before { background: linear-gradient(90deg, #facc15, #f59e0b); }
    /* Pin ribbon */
    .pin-ribbon{ 
      position:absolute; top:12px; right:-32px; 
      background:linear-gradient(45deg, #facc15, #f59e0b); 
      color:#7c5800; padding:4px 32px; font-weight:900; 
      font-size:.78rem; transform:rotate(45deg); 
      border-radius:0; border-bottom:1px solid rgba(0,0,0,0.1); 
      box-shadow:0 4px 12px rgba(0,0,0,.12); 
      z-index:10;
    }
    .thumb { 
      width: 100%; height: 180px; object-fit: cover; 
      background: var(--surface-2); display: block; 
      border-bottom: 1px solid var(--outline); 
      transition: transform 0.5s ease;
    }
    .info-card:hover .thumb {
      transform: scale(1.05);
    }
    .pad { padding: 1.2rem 1.4rem; display: grid; gap: .8rem; }
    .info-meta { display: flex; align-items: center; justify-content: space-between; gap: .5rem; color: var(--text-subtle); font-size: .8rem; }
    .badge { 
      display: inline-flex; align-items: center; gap: 6px; 
      height: 26px; padding: 0 12px; border-radius: 999px; 
      border: 1px solid var(--outline); font-weight: 800; 
      transition: all 0.2s ease;
    }
    .badge.pill { 
      background: #eef5ff; color: #0a5fb3; 
      border-color: #d9e7f8; 
      box-shadow: inset 0 -1px 0 rgba(255,255,255,.35), 0 2px 8px rgba(10, 95, 179, 0.1); 
    }
    .badge.new { 
      background: #e8f6ee; color: #0c6b2f; 
      border-color: #d7eadf; 
      box-shadow: 0 2px 8px rgba(12, 107, 47, 0.1);
      animation: pulse-badge 2s infinite;
    }
    @keyframes pulse-badge {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    .info-card h3 { 
      margin: .1rem 0 0; font-size: 1.1rem; 
      font-weight: 900; color: var(--text); 
      line-height: 1.3; letter-spacing: .1px; 
      transition: color 0.2s ease;
    }
    .info-card:hover h3 {
      color: var(--primary);
    }
    .info-card p { 
      margin: 0; color: var(--text-muted); 
      font-size: .94rem; line-height: 1.5; 
      display: -webkit-box; -webkit-line-clamp: 3; 
      -webkit-box-orient: vertical; overflow: hidden; 
    }
    .info-actions { 
      display: flex; gap: .7rem; margin-top: .6rem; 
      opacity: 0.8; transition: opacity 0.3s ease;
    }
    .info-card:hover .info-actions {
      opacity: 1;
    }

    /* LIST ROW */
    .info-row {
      position: relative; display: grid; grid-template-columns: 96px 1fr auto; gap: 12px; align-items: center;
      background: var(--surface); border: 1px solid var(--outline); border-radius: 12px; box-shadow: var(--shadow-sm); padding: 10px;
    }
    .info-row:hover { box-shadow: var(--shadow-md); transform: translateY(-2px); transition: box-shadow .18s ease, transform .12s ease, border-color .2s ease; border-color: var(--outline-2); }
    .row-thumb { width: 96px; height: 64px; object-fit: cover; background: var(--surface-2); border-radius: 8px; border: 1px solid var(--outline); }
    .row-content { display: grid; gap: 4px; }
    .row-title { display: flex; align-items: center; gap: 8px; font-weight: 900; }
    .row-title .title { font-size: 1rem; color: var(--text); letter-spacing: .1px; }
    .row-meta { display: flex; gap: 8px; flex-wrap: wrap; color: var(--text-subtle); font-size: .86rem; }
    .row-actions { display: inline-flex; gap: 6px; }

    /* CATEGORY COLORS */
    .cat-Umum { background:#eef5ff; color:#0a5fb3; border-color:#d9e7f8; }
    .cat-Keamanan { background:#fff2f2; color:#b22234; border-color:#f4c7ce; }
    .cat-Lingkungan { background:#ebfaef; color:#0c6b2f; border-color:#cfe9d9; }
    .cat-Acara { background:#fff7e6; color:#b87300; border-color:#f1e0b9; }

    /* SKELETON */
    .card-skeleton {
      border: 1px solid var(--outline); border-radius: var(--radius-md); overflow: hidden; background: var(--surface);
      box-shadow: var(--shadow-sm);
      animation: kk-pulse 1.2s ease-in-out infinite;
    }
    .skeleton { background: var(--surface-2); border-radius: 8px; }
    .sk-thumb { height: 160px; width: 100%; }
    .sk-line { height: 12px; margin: .4rem 1rem; }
    .sk-line.lg { height: 14px; }
    @keyframes kk-pulse { 0%,100% { opacity: .85; } 50% { opacity: .6; } }

    .empty-state {
      display: grid; place-items: center; gap: 8px;
      border: 1px dashed var(--outline-2); border-radius: var(--radius-md);
      color: var(--text-subtle); padding: 28px 12px; background: var(--surface-2);
      font-weight: 700;
    }

    /* MODAL */
    .kk-modal { position: fixed; inset: 0; display: none; z-index: 80; }
    .kk-modal.show { display: block; }
    .kk-modal__overlay {
      position: absolute; inset: 0; 
      background: rgba(15, 23, 42, 0.45); 
      backdrop-filter: blur(10px);
      animation: kk-fade-in .3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    }
    @keyframes kk-fade-in { from { opacity: 0; } to { opacity: 1; } }
    .kk-modal__content {
      position: absolute; inset: auto 0 0 0; margin: auto; top: 56px; width: min(720px, 92vw);
      background: linear-gradient(135deg, var(--surface), var(--surface-2)); 
      border: 1px solid var(--outline); 
      border-radius: 18px;
      box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(255, 255, 255, 0.1) inset; 
      overflow: hidden; 
      transform: translateY(20px) scale(0.98); 
      opacity: 0;
      animation: kk-modal-in .4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    }
    .kk-modal__content--md { width: min(560px, 92vw); }
    .kk-modal__content--sm { width: min(460px, 92vw); }
    @keyframes kk-modal-in { to { opacity: 1; transform: translateY(0) scale(1); } }

    .kk-modal__header, .kk-modal__footer { 
      padding: 16px 20px; 
      display: flex; 
      align-items: center; 
      justify-content: space-between; 
      gap: 12px; 
    }
    .kk-modal__header { 
      border-bottom: 1px solid var(--outline); 
      background: linear-gradient(to right, rgba(233, 243, 255, 0.3), transparent);
    }
    .kk-modal__footer { 
      border-top: 1px solid var(--outline); 
      background: linear-gradient(to right, rgba(233, 243, 255, 0.2), transparent);
    }
    .kk-modal__body { padding: 18px 20px; }
    .kk-modal__header h3 { 
      margin: 0; 
      display: inline-flex; 
      align-items: center; 
      gap: 10px; 
      font-weight: 900; 
      font-size: 1.1rem;
      background: linear-gradient(90deg, var(--primary), #4d9be6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }
    .kk-modal__header h3 i {
      color: var(--primary);
      font-size: 1.2rem;
      animation: icon-pulse 2s infinite alternate;
    }
    .kk-modal__close { 
      width: 38px; 
      height: 38px; 
      border-radius: 12px; 
      border: 1px solid var(--outline); 
      background: linear-gradient(135deg, var(--surface-2), var(--surface)); 
      color: var(--text-subtle); 
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    .kk-modal__close:hover {
      color: #e53e3e;
      border-color: #fbd5d5;
      box-shadow: 0 6px 16px rgba(229, 62, 62, 0.15);
      transform: rotate(90deg);
    }
    .kk-modal__close::before {
      content: '';
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: radial-gradient(circle at center, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      opacity: 0;
      transform: scale(0);
      transition: transform 0.5s ease, opacity 0.3s ease;
    }
    .kk-modal__close:active::before {
      opacity: 1;
      transform: scale(2);
      transition: transform 0.3s ease, opacity 0.3s ease;
    }

    /* FORM + DROPZONE */
    .kk-form__grid { 
      display: grid; 
      grid-template-columns: repeat(2, minmax(0, 1fr)); 
      gap: 1rem 1.2rem; 
      padding: 16px 20px; 
      background: linear-gradient(135deg, rgba(233, 243, 255, 0.2), transparent);
      border-radius: 12px;
    }
    
    /* Form elements styling */
    .kk-form__group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }
    
    .kk-form__label {
      font-weight: 700;
      font-size: 0.9rem;
      color: var(--text);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .kk-form__label i {
      color: var(--primary);
      font-size: 0.9rem;
    }
    
    .kk-form__input,
    .kk-form__textarea,
    .kk-form__select {
      border: 1px solid var(--outline);
      border-radius: 12px;
      padding: 10px 14px;
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      color: var(--text);
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
      outline: none;
    }
    
    .kk-form__input:hover,
    .kk-form__textarea:hover,
    .kk-form__select:hover {
      border-color: var(--outline-2);
      box-shadow: 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    
    .kk-form__input:focus,
    .kk-form__textarea:focus,
    .kk-form__select:focus {
      box-shadow: 0 0 0 3px var(--ring), 0 8px 20px rgba(8,88,149,.15);
      border-color: var(--ring);
      transform: translateY(-2px);
    }
    
    .kk-form__textarea {
      min-height: 120px;
      resize: vertical;
    }
    
    /* Dropzone styling */
    .kk-dropzone {
      border: 2px dashed var(--outline-2);
      border-radius: 14px;
      padding: 24px;
      text-align: center;
      background: linear-gradient(135deg, rgba(233, 243, 255, 0.3), rgba(233, 243, 255, 0.1));
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      cursor: pointer;
    }
    
    .kk-dropzone:hover {
      border-color: var(--primary-600);
      background: linear-gradient(135deg, rgba(233, 243, 255, 0.5), rgba(233, 243, 255, 0.2));
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(8,88,149,.1);
    }
    
    .kk-dropzone.dragover {
      border-color: var(--primary);
      background: linear-gradient(135deg, rgba(233, 243, 255, 0.7), rgba(233, 243, 255, 0.3));
      box-shadow: 0 8px 20px rgba(8,88,149,.15);
    }
    
    .kk-dropzone__icon {
      font-size: 2rem;
      color: var(--primary-600);
      margin-bottom: 10px;
      transition: transform 0.3s ease;
    }
    
    .kk-dropzone:hover .kk-dropzone__icon {
      transform: translateY(-5px);
      color: var(--primary);
    }
    
    .kk-dropzone__text {
      font-weight: 700;
      color: var(--text);
      margin-bottom: 6px;
    }
    
    .kk-dropzone__hint {
      font-size: 0.85rem;
      color: var(--text-subtle);
    }
    
    .kk-dropzone__preview {
      margin-top: 16px;
      position: relative;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0,0,0,.1);
      transition: all 0.3s ease;
    }
    
    .kk-dropzone__preview:hover {
      transform: scale(1.02);
      box-shadow: 0 8px 20px rgba(0,0,0,.15);
    }
    
    .kk-dropzone__preview img {
      width: 100%;
      height: auto;
      display: block;
    }
    
    .kk-dropzone__remove {
      position: absolute;
      top: 8px;
      right: 8px;
      width: 28px;
      height: 28px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.9);
      color: #e53e3e;
      display: grid;
      place-items: center;
      cursor: pointer;
      opacity: 0;
      transform: scale(0.8);
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0,0,0,.2);
    }
    
    .kk-dropzone__preview:hover .kk-dropzone__remove {
      opacity: 1;
      transform: scale(1);
    }
    
    .kk-dropzone__remove:hover {
      background: #fff;
      transform: scale(1.1);
      box-shadow: 0 4px 12px rgba(229, 62, 62, 0.2);
    }
    .kk-form__field { 
      display: flex; 
      flex-direction: column; 
      gap: .6rem; 
      margin-bottom: 10px;
    }
    
    .kk-form__field label {
      font-weight: 700;
      font-size: 0.9rem;
      color: var(--text);
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .kk-form__field label i {
      color: var(--primary);
      font-size: 0.9rem;
    }
    
    .kk-form__field input,
    .kk-form__field textarea,
    .kk-form__field select {
      border: 1px solid var(--outline);
      border-radius: 12px;
      padding: 10px 14px;
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      color: var(--text);
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
      outline: none;
    }
    
    .kk-form__field input:hover,
    .kk-form__field textarea:hover,
    .kk-form__field select:hover {
      border-color: var(--outline-2);
      box-shadow: 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    
    .kk-form__field input:focus,
    .kk-form__field textarea:focus,
    .kk-form__field select:focus {
      box-shadow: 0 0 0 3px var(--ring), 0 8px 20px rgba(8,88,149,.15);
      border-color: var(--ring);
      transform: translateY(-2px);
    }
    
    .kk-form__field--checkbox { 
      align-self: end; 
      flex-direction: row;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      padding: 6px 10px;
      border-radius: 10px;
      transition: all 0.3s ease;
    }
    
    .kk-form__field--checkbox:hover {
      background: rgba(233, 243, 255, 0.5);
    }
    
    .kk-form__field--checkbox input[type="checkbox"] {
      appearance: none;
      -webkit-appearance: none;
      width: 20px;
      height: 20px;
      border: 1px solid var(--outline);
      border-radius: 6px;
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      cursor: pointer;
      position: relative;
      box-shadow: 0 2px 6px rgba(0,0,0,.08);
      transition: all 0.3s ease;
    }
    
    .kk-form__field--checkbox input[type="checkbox"]:checked {
      background: linear-gradient(135deg, var(--primary), var(--primary-600));
      border-color: var(--primary-600);
    }
    
    .kk-form__field--checkbox input[type="checkbox"]:checked::after {
      content: '\f00c'; /* FontAwesome check */
      font-family: 'Font Awesome 6 Free';
      font-weight: 900;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 0.7rem;
    }
    
    .kk-form__field--checkbox input[type="checkbox"]:hover {
      border-color: var(--primary-600);
      transform: scale(1.05);
    }
    
    .kk-form__field--checkbox label {
      font-weight: 600;
      font-size: 0.9rem;
      cursor: pointer;
    }
    .kk-form__field--full { grid-column: 1 / -1; }
    .kk-form label { 
      font-weight: 800; 
      color: var(--text); 
      display: flex;
      align-items: center;
      gap: 6px;
      transition: all 0.3s ease;
    }
    
    .kk-form label i {
      color: var(--primary);
      font-size: 0.9rem;
      transition: transform 0.3s ease;
    }
    
    .kk-form__field:hover label i {
      transform: rotate(10deg) scale(1.1);
    }
    
    /* Submit button styling */
    .kk-form__submit {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 20px;
      border-radius: 12px;
      font-weight: 800;
      font-size: 0.95rem;
      background: linear-gradient(135deg, var(--primary), var(--primary-600));
      color: white;
      border: none;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 6px 16px rgba(8, 88, 149, 0.2);
      position: relative;
      overflow: hidden;
    }
    
    .kk-form__submit::before {
      content: '';
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      background: radial-gradient(circle at center, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      opacity: 0;
      transform: scale(0);
      transition: transform 0.5s ease, opacity 0.3s ease;
    }
    
    .kk-form__submit:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 24px rgba(8, 88, 149, 0.3);
    }
    
    .kk-form__submit:active {
      transform: translateY(1px);
      box-shadow: 0 4px 12px rgba(8, 88, 149, 0.2);
    }
    
    .kk-form__submit:active::before {
      opacity: 1;
      transform: scale(2);
      transition: transform 0.3s ease, opacity 0.3s ease;
    }
    
    .kk-form__submit i {
      font-size: 1rem;
      transition: transform 0.3s ease;
    }
    
    .kk-form__submit:hover i {
      transform: translateX(3px);
    }
    .kk-form input[type="text"], .kk-form input[type="date"], .kk-form select, .kk-form textarea {
      border: 1px solid var(--outline); 
      border-radius: 12px; 
      background: linear-gradient(180deg, var(--surface-2), var(--surface));
      padding: 10px 14px; 
      width: 100%; 
      color: var(--text); 
      font-weight: 600;
      outline: none;
      transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
      box-shadow: 0 2px 8px rgba(0,0,0,.04);
    }
    
    .kk-form input:hover, .kk-form select:hover, .kk-form textarea:hover {
      border-color: var(--outline-2);
      box-shadow: 0 6px 16px rgba(0,0,0,.08);
      transform: translateY(-2px);
    }
    
    .kk-form input:focus-visible, .kk-form select:focus-visible, .kk-form textarea:focus-visible { 
      box-shadow: 0 0 0 3px var(--ring), 0 8px 20px rgba(8,88,149,.15); 
      border-color: var(--ring);
      transform: translateY(-2px);
    }
    
    .kk-form select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23475569' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 12px center;
      padding-right: 36px;
      cursor: pointer;
    }
    
    .kk-form textarea {
      min-height: 120px;
      resize: vertical;
      line-height: 1.5;
    }
    
    /* Custom date input styling */
    .kk-form input[type="date"]::-webkit-calendar-picker-indicator {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23475569' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'/%3E%3Cline x1='16' y1='2' x2='16' y2='6'/%3E%3Cline x1='8' y1='2' x2='8' y2='6'/%3E%3Cline x1='3' y1='10' x2='21' y2='10'/%3E%3C/svg%3E");
      cursor: pointer;
      transition: transform 0.3s ease;
    }
    
    .kk-form input[type="date"]:hover::-webkit-calendar-picker-indicator {
      transform: scale(1.1);
    }
    .kk-checkbox { display: inline-flex; align-items: center; gap: .5rem; color: var(--text-muted); }

    .dropzone {
      position: relative; border: 1px dashed var(--outline-2); border-radius: 12px; background: var(--surface); padding: 10px;
      display: flex; align-items: center; gap: 10px;
    }
    .dropzone:hover { border-color: var(--primary); box-shadow: 0 0 0 3px color-mix(in srgb, var(--ring) 40%, transparent); cursor: pointer; }
    .dropzone.is-drag { border-color: var(--primary); background: color-mix(in srgb, var(--surface) 70%, var(--primary) 30% / 6%); }
    .dropzone input[type="file"] { inline-size: 1px; block-size: 1px; opacity: 0; position: absolute; inset: 0; cursor: pointer; }
    .dropzone-hint { display: inline-flex; align-items: center; gap: 10px; color: var(--text-muted); }
    .dropzone-hint i { color: var(--primary); }

    .banner-preview { display: grid; grid-template-columns: 1fr auto; align-items: start; gap: .6rem; margin-top: .5rem; }
    .banner-preview img { display:block; width: 100%; height: auto; max-height: 240px; object-fit: contain; border-radius: var(--radius-sm); border: 1px solid var(--outline); background: var(--surface-2); }
    .banner-meta { align-self: start; color: var(--text-subtle); font-size: .82rem; font-weight: 700; }

    /* TOAST */
    .kk-toast {
      position: fixed; left: 50%; bottom: 18px; transform: translateX(-50%) translateY(10px);
      background: #0f172a; color: #fff; border: 1px solid #0b1220; border-radius: 12px;
      padding: 10px 14px; font-weight: 800; box-shadow: var(--shadow-md);
      opacity: 0; pointer-events: none; z-index: 99;
    }
    .kk-toast.show { animation: kk-toast-in .22s ease forwards; }
    @keyframes kk-toast-in { to { opacity: 1; transform: translateX(-50%) translateY(0); } }

    /* RESPONSIVE */
    @media (max-width: 980px) {
      .stats-row { grid-template-columns: 1fr; }
    }
    @media (max-width: 780px) {
      .section-header-card { flex-direction: column; align-items: stretch; }
      .section-actions { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; }
      .kk-form__grid { grid-template-columns: 1fr; }
      .kk-modal__content { top: 30px; }
      .info-row { grid-template-columns: 72px 1fr auto; }
      .row-thumb { width: 72px; height: 56px; }
    }

    /* Categories modal */
    .cats-add-row{ display:grid; grid-template-columns:1fr auto; gap:8px; }
    #cat-input{ border:1px solid var(--outline); border-radius:10px; background:var(--surface-2); padding:.6rem .7rem; color:var(--text); font-weight:600; outline:none; }
    #cat-input:focus-visible{ box-shadow:0 0 0 3px var(--ring); }
    .cats-list{ display:grid; gap:8px; margin-top:10px; }
    .cat-row{ display:grid; grid-template-columns:1fr auto; gap:8px; align-items:center; border:1px solid var(--outline); border-radius:10px; background:var(--surface); padding:8px 10px; }
    .cat-name{ font-weight:800; color:var(--text); }
    .cat-meta{ color:var(--text-subtle); font-weight:700; font-size:.86rem; }
    .cat-actions{ display:inline-flex; gap:6px; }
    .cats-hint{ margin-top:8px; color:var(--text-subtle); font-size:.86rem; font-weight:700; }

    /* DARK MODE (optional) */
    @media (prefers-color-scheme: dark) {
      .info-ui{
        --bg: #0b1220;
        --surface: #0f172a;
        --surface-2: #0b1325;
        --outline: #253046;
        --outline-2: #2e3b55;
        --text: #e5e7eb;
        --text-muted: #9aa4b2;
        --text-subtle: #8a97ac;
        --ring: #2563eb80;
        --shadow-sm: 0 2px 10px rgba(0,0,0,.25);
        --shadow-md: 0 8px 22px rgba(0,0,0,.35);
        --shadow-lg: 0 16px 44px rgba(0,0,0,.5);
      }
      .chip.active, .chip[aria-pressed="true"]{ box-shadow: 0 10px 24px rgba(37,99,235,.28); }
    }

    /* REDUCED MOTION */
    @media (prefers-reduced-motion: reduce){
      .pre-anim, .stagger-container > * { opacity: 1 !important; transform: none !important; animation: none !important; }
      .kk-modal__content { animation: none !important; opacity: 1 !important; transform: none !important; }
      .kk-modal__overlay { animation: none !important; }
      .kk-toast { animation: none !important; opacity: 1 !important; transform: translateX(-50%) !important; }
      .card-skeleton { animation: none !important; }
    }
  </style>

  <script>
    // @ts-nocheck
    (() => {
      const root = document.querySelector('.info-ui');
      if (!root) return;

      // Elements
      const grid = document.getElementById('info-grid');
      const btnOpenCreate = document.getElementById('btn-open-create');
      const btnManageCats = document.getElementById('btn-manage-cats');
      const searchInput = document.getElementById('info-search');
      const chips = document.getElementById('info-chips');

      const sortSelect = document.getElementById('sort-select');
      const viewToggle = document.getElementById('view-toggle');

      const infoModal = document.getElementById('info-modal');
      const infoForm = document.getElementById('info-form');
      const modalTitleText = document.getElementById('modal-title-text');
      const inputId = document.getElementById('info-id');
      const inputTitle = document.getElementById('title');
      const inputCategory = document.getElementById('category');
      const inputDate = document.getElementById('date');
      const inputPinned = document.getElementById('pinned');
      const inputContent = document.getElementById('content');
      const inputBanner = document.getElementById('banner');
      const bannerPreview = document.getElementById('banner-preview');
      const bannerImg = document.getElementById('banner-img');
      const bannerMeta = document.getElementById('banner-meta');
      const bannerRemove = document.getElementById('banner-remove');

      const confirmModal = document.getElementById('confirm-modal');
      const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
      const confirmTitle = document.getElementById('confirm-title');
      const confirmBody = document.querySelector('#confirm-modal .kk-modal__body p');

      const toast = document.getElementById('kk-toast');

      const catsModal = document.getElementById('cats-modal');
      const catsList = document.getElementById('cats-list');
      const catInput = document.getElementById('cat-input');
      const catAddBtn = document.getElementById('cat-add');

      const statTotal = document.getElementById('stat-total');
      const statPinned = document.getElementById('stat-pinned');
      const statCats = document.getElementById('stat-categories');

      if (!grid || !btnOpenCreate || !infoModal || !infoForm) return;

      // State
      const STORAGE_KEY = 'kk_infos_v3';
      const CATS_KEY = 'kk_info_categories_v1';
      let activeCat = 'all';
      let pinnedOnly = false;
      let isLoading = true;
      let deleteHook = null;
      let viewMode = localStorage.getItem('info_view') || 'grid'; // 'grid' | 'list'
      let sortMode = localStorage.getItem('info_sort') || 'newest'; // 'newest' | 'oldest' | 'title' | 'pinned'

      // Helpers
      const readData = () => {
        try { return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]'); } catch { return []; }
      };
      const writeData = (items) => localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
      const readCats = () => { try { return JSON.parse(localStorage.getItem(CATS_KEY) || '[]'); } catch { return []; } };
      const writeCats = (arr) => localStorage.setItem(CATS_KEY, JSON.stringify(arr));
      const uid = () => Math.random().toString(36).slice(2) + Date.now().toString(36);
      const fmtDate = (iso) => {
        if (!iso) return '-';
        try { const d = new Date(iso + 'T00:00:00'); return d.toLocaleDateString('id-ID', { day: '2-digit', month: 'short', year: 'numeric' }); } catch { return iso; }
      };
      const prettySize = (bytes) => {
        if (!bytes && bytes !== 0) return '';
        const units = ['B','KB','MB','GB'];
        let v = bytes; let i = 0; while (v >= 1024 && i < units.length-1) { v/=1024; i++; }
        return `${v.toFixed(i ? 1 : 0)} ${units[i]}`;
      };
      const isNewInfo = (iso) => {
        if (!iso) return false;
        const d = new Date(iso + 'T00:00:00').getTime();
        return (Date.now() - d) / 86400000 <= 3; // <= 3 hari
      };
      function showToast(message) {
        if (!toast) return;
        toast.textContent = message;
        toast.hidden = false;
        toast.classList.add('show');
        setTimeout(() => {
          toast?.classList.remove('show');
          setTimeout(() => { if (toast) toast.hidden = true; }, 220);
        }, 1600);
      }

      // Ensure default categories exist on first load
      (function seedDefaultCategories(){
        const current = readCats();
        if (!Array.isArray(current) || current.length === 0) {
          writeCats(['Umum','Keamanan','Lingkungan','Acara']);
        }
      })();

      // Seed data first time
      if (readData().length === 0) {
        writeData([
          { id: uid(), title: 'Patroli Malam', category: 'Keamanan', date: new Date().toISOString().slice(0,10), pinned: true, content: 'Jadwal patroli malam ditambah menjadi 3 shift.', banner: '' },
          { id: uid(), title: 'Festival 17 Agustus', category: 'Acara', date: new Date(Date.now()-86400000).toISOString().slice(0,10), pinned: false, content: 'Persiapan lomba antar RT dimulai bulan depan.', banner: '' },
          { id: uid(), title: 'Pembersihan Selokan', category: 'Lingkungan', date: new Date(Date.now()-2*86400000).toISOString().slice(0,10), pinned: false, content: 'Kerja bakti pada Hari Minggu pukul 07.00.', banner: '' },
        ]);
      }

      // Modal controls
      function openModal(mode = 'create', data) {
        infoModal.classList.add('show');
        infoModal.setAttribute('aria-hidden', 'false');
        modalTitleText.textContent = mode === 'edit' ? 'Edit Informasi' : 'Buat Informasi';

        if (mode === 'edit' && data) {
          renderCategorySelect(data.category || 'Umum');
          inputId.value = data.id;
          inputTitle.value = data.title || '';
          inputCategory.value = data.category || 'Umum';
          inputDate.value = data.date || '';
          inputPinned.checked = !!data.pinned;
          inputContent.value = data.content || '';
          if (data.banner && bannerImg && bannerPreview) { bannerImg.src = data.banner; bannerPreview.hidden = false; }
          else if (bannerPreview && bannerImg) { bannerPreview.hidden = true; bannerImg.removeAttribute('src'); }
        } else {
          renderCategorySelect('Umum');
          inputId.value = '';
          infoForm.reset();
          if (bannerPreview && bannerImg) { bannerPreview.hidden = true; bannerImg.removeAttribute('src'); }
        }
        setTimeout(() => inputTitle?.focus?.(), 20);
      }
      function closeModal() {
        infoModal.classList.remove('show');
        infoModal.setAttribute('aria-hidden', 'true');
      }
      infoModal.addEventListener('click', (e) => {
        const target = e.target;
        if (target?.closest('[data-close]')) closeModal();
      });

      // Confirm modal
      function openConfirm(onConfirm, opts = {}) {
        deleteHook = onConfirm;
        confirmModal.classList.add('show');
        confirmModal.setAttribute('aria-hidden', 'false');
        if (opts.title && confirmTitle) confirmTitle.textContent = opts.title;
        if (opts.body && confirmBody) confirmBody.textContent = opts.body;
        confirmDeleteBtn.onclick = () => { deleteHook && deleteHook(); closeConfirm(); };
      }
      function closeConfirm() {
        confirmModal.classList.remove('show');
        confirmModal.setAttribute('aria-hidden', 'true');
        deleteHook = null;
        if (confirmTitle) confirmTitle.textContent = 'Konfirmasi Hapus';
        if (confirmBody) confirmBody.textContent = 'Yakin ingin menghapus informasi ini? Tindakan ini tidak dapat dibatalkan.';
      }
      confirmModal?.addEventListener('click', (e) => {
        const target = e.target;
        if (target?.closest('[data-close]')) closeConfirm();
      });
      document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { closeModal(); closeConfirm(); } });

      // Banner preview
      // Allow clicking anywhere on dropzone to open picker
      document.querySelector('.dropzone')?.addEventListener('click', (e) => {
        if (e.target?.id === 'banner') return; // native click
        if (inputBanner) { inputBanner.value = ''; inputBanner.click(); }
      });
      // Drag & Drop support
      const dz = document.querySelector('.dropzone');
      dz?.addEventListener('dragover', (e) => { e.preventDefault(); dz.classList.add('is-drag'); });
      dz?.addEventListener('dragleave', () => dz.classList.remove('is-drag'));
      dz?.addEventListener('drop', (e) => {
        e.preventDefault(); dz.classList.remove('is-drag');
        if (!e.dataTransfer || !inputBanner) return;
        const files = Array.from(e.dataTransfer.files || []).filter(f => f.type.startsWith('image/'));
        if (files.length) {
          const dt = new DataTransfer();
          dt.items.add(files[0]);
          inputBanner.files = dt.files;
          inputBanner.dispatchEvent(new Event('change', { bubbles: true }));
        }
      });
      inputBanner?.addEventListener('change', () => {
        const file = inputBanner.files?.[0];
        if (!file || !bannerImg || !bannerPreview) return;
        if (!file.type.startsWith('image/')) {
          showToast('File bukan gambar');
          inputBanner.value = '';
          return;
        }
        // Enforce 2MB limit
        if (file.size > 2 * 1024 * 1024) {
          showToast('Ukuran file melebihi 2MB');
          inputBanner.value = '';
          if (bannerMeta) { bannerMeta.hidden = true; bannerMeta.textContent = ''; }
          bannerPreview.hidden = true;
          bannerImg.removeAttribute('src');
          return;
        }
        const reader = new FileReader();
        reader.onload = () => {
          const dataUrl = String(reader.result || '');
          bannerImg.onload = () => {
            try {
              const w = bannerImg.naturalWidth || 0;
              const h = bannerImg.naturalHeight || 0;
              if (bannerMeta) { bannerMeta.textContent = `${w}×${h} · ${prettySize(file.size)}`; bannerMeta.hidden = false; }
            } catch {}
          };
          bannerImg.src = dataUrl;
          bannerPreview.hidden = false;
        };
        reader.readAsDataURL(file);
      });
      bannerRemove?.addEventListener('click', () => {
        if (!inputBanner || !bannerPreview || !bannerImg) return;
        inputBanner.value = '';
        bannerPreview.hidden = true;
        bannerImg.removeAttribute('src');
        if (bannerMeta) { bannerMeta.hidden = true; bannerMeta.textContent = ''; }
      });

      // Stats
      function updateStats(items) {
        statTotal && (statTotal.textContent = String(items.length));
        statPinned && (statPinned.textContent = String(items.filter(i => i.pinned).length));
        statCats && (statCats.textContent = String(new Set(items.map(i => i.category)).size));
      }

      // Render (grid/list)
      function render(query = '') {
        if (!grid) return;
        const items = readData();
        updateStats(items);

        const q = query.trim().toLowerCase();
        grid.innerHTML = '';
        grid.classList.toggle('grid-mode', viewMode === 'grid');
        grid.classList.toggle('list-mode', viewMode === 'list');

        if (isLoading) {
          const sk = () => `
            <div class="card-skeleton">
              <div class="skeleton sk-thumb"></div>
              <div class="skeleton sk-line lg" style="width:60%; margin:.5rem 0"></div>
              <div class="skeleton sk-line" style="width:90%; margin-bottom:.9rem;"></div>
            </div>`;
          grid.innerHTML = sk() + sk() + sk() + sk() + sk() + sk();
          return;
        }

        let filtered = items.filter((x) => {
          const matchQ = !q || x.title?.toLowerCase().includes(q) || x.category?.toLowerCase().includes(q) || x.content?.toLowerCase().includes(q);
          const matchCat = activeCat === 'all' || x.category === activeCat;
          const matchPinned = !pinnedOnly || !!x.pinned;
          return matchQ && matchCat && matchPinned;
        });

        // Sort
        filtered = filtered.sort((a, b) => {
          if (sortMode === 'pinned') return (Number(b.pinned) - Number(a.pinned)) || (b.date || '').localeCompare(a.date || '');
          if (sortMode === 'title') return (a.title || '').localeCompare(b.title || '', 'id');
          if (sortMode === 'oldest') return (a.date || '').localeCompare(b.date || '');
          return (b.date || '').localeCompare(a.date || ''); // newest
        });

        if (filtered.length === 0) {
          grid.innerHTML = `<div class="empty-state"><i class="fas fa-inbox"></i><div>Tidak ada informasi ditemukan</div></div>`;
          return;
        }

        const frag = document.createDocumentFragment();

        if (viewMode === 'grid') {
          filtered.forEach((item, idx) => {
            const card = document.createElement('article');
            card.className = 'info-card' + (item.pinned ? ' pinned' : '');
            card.innerHTML = `
              ${item.pinned ? `<div class="pin-ribbon" style="position:absolute;top:1rem;right:-3rem;background:var(--primary-blue,#2563eb);color:#fff;padding:0.5rem 3rem;font-size:.8rem;font-weight:800;text-transform:uppercase;transform:rotate(45deg);box-shadow:0 2px 10px rgba(37,99,235,0.3);letter-spacing:.3px;z-index:5;pointer-events:none;user-select:none;display:inline-block;">Pinned</div>` : ``}
              ${item.banner ? `<img class="thumb" src="${item.banner}" alt="${item.title}" />` : `<div class="thumb"></div>`}
              <div class="pad">
                <div class="info-meta">
                  <span class="badge pill cat-${item.category || 'Umum'}">
                    <i class="fas fa-tag"></i> ${item.category || 'Umum'}
                  </span>
                  <div>
                    ${isNewInfo(item.date) ? `<span class="badge new"><i class="fas fa-bolt"></i> Baru</span>` : ``}
                    <time>${fmtDate(item.date)}</time>
                  </div>
                </div>
                <h3>${item.title || '-'}</h3>
                <p>${item.content || ''}</p>
                <div class="info-actions">
                  <button class="btn light sm pressable" data-pin><i class="fas fa-thumbtack"></i> ${item.pinned ? 'Lepas Pin' : 'Pin'}</button>
                  <button class="btn soft sm pressable" data-edit><i class="fas fa-edit"></i> Edit</button>
                  <button class="btn danger sm pressable" data-delete><i class="fas fa-trash"></i> Hapus</button>
                </div>
              </div>
            `;
            wireItemActions(card, item);
            card.style.setProperty('--idx', String(idx));
            frag.appendChild(card);
          });
        } else {
          // list mode
          filtered.forEach((item, idx) => {
            const row = document.createElement('div');
            row.className = 'info-row';
            row.innerHTML = `
              ${item.pinned ? `<div class="pin-ribbon" style="position:absolute;top:1rem;right:-3rem;background:var(--primary-blue,#2563eb);color:#fff;padding:0.5rem 3rem;font-size:.8rem;font-weight:800;text-transform:uppercase;transform:rotate(45deg);box-shadow:0 2px 10px rgba(37,99,235,0.3);letter-spacing:.3px;z-index:5;pointer-events:none;user-select:none;display:inline-block;">Pinned</div>` : ``}
              ${item.banner ? `<img class="row-thumb" src="${item.banner}" alt="${item.title}" />` : `<div class="row-thumb"></div>`}
              <div class="row-content">
                <div class="row-title">
                  <span class="title">${item.title || '-'}</span>
                </div>
                <div class="row-meta">
                  <span class="badge pill cat-${item.category || 'Umum'}"><i class="fas fa-tag"></i> ${item.category || 'Umum'}</span>
                  ${isNewInfo(item.date) ? `<span class="badge new"><i class="fas fa-bolt"></i> Baru</span>` : ``}
                  <time><i class="fas fa-clock"></i> ${fmtDate(item.date)}</time>
                </div>
              </div>
              <div class="row-actions">
                <button class="btn light sm pressable" data-pin><i class="fas fa-thumbtack"></i></button>
                <button class="btn soft sm pressable" data-edit><i class="fas fa-edit"></i></button>
                <button class="btn danger sm pressable" data-delete><i class="fas fa-trash"></i></button>
              </div>
            `;
            wireItemActions(row, item);
            row.style.setProperty('--idx', String(idx));
            frag.appendChild(row);
          });
        }

        grid.appendChild(frag);
        // Stagger reveal
        const children = Array.from(grid.children);
        children.forEach((el, i) => setTimeout(() => el.classList.add('stagger-in'), 20 + i * 40));
      }

      function wireItemActions(scopeEl, item) {
        scopeEl.querySelector('[data-edit]')?.addEventListener('click', () => openModal('edit', item));
        scopeEl.querySelector('[data-delete]')?.addEventListener('click', () =>
          openConfirm(() => {
            const arr = readData().filter((x) => x.id !== item.id);
            writeData(arr);
            showToast('Informasi dihapus');
            render(searchInput?.value || '');
            updateStats(arr);
          })
        );
        scopeEl.querySelector('[data-pin]')?.addEventListener('click', () => {
          const arr = readData();
          const i = arr.findIndex((x) => x.id === item.id);
          if (i >= 0) {
            arr[i].pinned = !arr[i].pinned;
            writeData(arr);
            showToast(arr[i].pinned ? 'Dipin ke atas' : 'Pin dilepas');
            render(searchInput?.value || '');
            updateStats(arr);
          }
        });
      }

      // Events
      btnOpenCreate.addEventListener('click', () => openModal('create'));
      searchInput?.addEventListener('input', () => render(searchInput.value || ''));

      infoForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = inputId.value || uid();
        let bannerData = bannerImg?.getAttribute('src') || '';
        const file = inputBanner?.files?.[0];
        if (file) {
          bannerData = await new Promise((res) => {
            const r = new FileReader();
            r.onload = () => res(String(r.result || ''));
            r.readAsDataURL(file);
          });
        }
        const payload = {
          id,
          title: inputTitle.value.trim(),
          category: inputCategory.value,
          date: inputDate.value,
          pinned: !!inputPinned.checked,
          content: inputContent.value.trim(),
          banner: bannerData,
        };
        const arr = readData();
        const idx = arr.findIndex((x) => x.id === id);
        if (idx >= 0) arr[idx] = payload; else arr.push(payload);
        writeData(arr);
        closeModal();
        render(searchInput?.value || '');
        updateStats(arr);
        showToast('Informasi disimpan');
      });

      // Chips
      function renderChips(){
        if (!chips) return;
        const cats = readCats();
        const chipHtml = [
          `<button class="chip pressable" data-cat="all" aria-pressed="${activeCat==='all'}"><i class="fas fa-layer-group"></i> Semua</button>`,
          ...cats.map(c => `<button class="chip pressable" data-cat="${c}"><i class="fas fa-circle"></i> ${c}</button>`),
          `<button class="chip pressable" data-pinned="only" aria-pressed="${pinnedOnly}"><i class="fas fa-thumbtack"></i> Pinned</button>`
        ].join('');
        chips.innerHTML = chipHtml;
        setActiveChips();
      }
      function setActiveChips() {
        chips?.querySelectorAll('.chip').forEach((ch) => {
          const isActive =
            (ch.hasAttribute('data-cat') && ch.getAttribute('data-cat') === activeCat) ||
            (ch.hasAttribute('data-pinned') && pinnedOnly);
          ch.classList.toggle('active', isActive);
          ch.setAttribute('aria-pressed', String(isActive));
        });
        render(searchInput?.value || '');
      }
      chips?.addEventListener('click', (e) => {
        const btn = e.target?.closest?.('.chip');
        if (!btn) return;
        if (btn.hasAttribute('data-cat')) activeCat = btn.getAttribute('data-cat') || 'all';
        if (btn.hasAttribute('data-pinned')) pinnedOnly = !pinnedOnly;
        setActiveChips();
      });
      // Categories UI
      chips?.addEventListener('keydown', (e) => {
        const target = e.target;
        if ((e.key === 'Enter' || e.key === ' ') && target?.classList.contains('chip')) {
          e.preventDefault();
          target.click();
        }
      });

      // Render category <select> options from categories
      function renderCategorySelect(selectedValue){
        if (!inputCategory) return;
        const cats = readCats();
        if (!cats.length) return;
        inputCategory.innerHTML = cats.map(c => `<option${c===selectedValue ? ' selected' : ''}>${c}</option>`).join('');
      }

      // Wire Manage Categories button (bound later once)

      // Refresh UI after category CRUD
      function openCatsModal() {
        if (!catsModal) return;
        catsModal.classList.add('show');
        catsModal.setAttribute('aria-hidden', 'false');
        renderCats();
        setTimeout(() => catInput?.focus?.(), 20);
      }
      function closeCatsModal() {
        catsModal?.classList.remove('show');
        catsModal?.setAttribute('aria-hidden', 'true');
      }
      catsModal?.addEventListener('click', (e) => { const t = e.target; if (t?.closest('[data-close]')) closeCatsModal(); });
      function normalizeCat(name){ return String(name || '').trim(); }
      function renderCats(){
        if (!catsList) return;
        const cats = readCats();
        const items = readData();
        if (cats.length === 0) { catsList.innerHTML = '<div class="empty-state">Belum ada kategori</div>'; return; }
        catsList.innerHTML = '';
        const frag = document.createDocumentFragment();
        cats.forEach((c) => {
          const count = items.filter(i => i.category === c).length;
          const row = document.createElement('div');
          row.className = 'cat-row';
          row.innerHTML = `
            <div>
              <div class="cat-name">${c}</div>
              <div class="cat-meta">${count} item</div>
            </div>
            <div class="cat-actions">
              <button class="btn soft sm pressable" data-edit><i class="fas fa-edit"></i> Ubah</button>
              <button class="btn danger sm pressable" data-del><i class="fas fa-trash"></i> Hapus</button>
            </div>`;
          row.querySelector('[data-edit]')?.addEventListener('click', () => {
            const inp = document.createElement('input');
            inp.type = 'text'; inp.value = c; inp.className = 'kk-input-edit';
            inp.style.cssText = 'border:1px solid var(--outline);border-radius:10px;padding:.4rem .6rem;font-weight:700;';
            const nameDiv = row.querySelector('.cat-name');
            if (!nameDiv) return;
            nameDiv.replaceWith(inp);
            inp.focus(); inp.select();
            const commit = () => {
              const nv = normalizeCat(inp.value);
              if (!nv) { showToast('Nama tidak boleh kosong'); renderCats(); return; }
              const list = readCats();
              if (list.includes(nv) && nv !== c) { showToast('Kategori sudah ada'); renderCats(); return; }
              // update categories
              const updated = list.map(x => x === c ? nv : x);
              writeCats(updated);
              // update items
              const arr = readData().map(i => i.category === c ? { ...i, category: nv } : i);
              writeData(arr);
              showToast('Kategori diubah');
              renderCats();
              render(searchInput?.value || '');
              renderChips();
              renderCategorySelect(nv);
            };
            inp.addEventListener('blur', commit);
            inp.addEventListener('keydown', (e) => { if (e.key === 'Enter') commit(); if (e.key === 'Escape') renderCats(); });
          });
          row.querySelector('[data-del]')?.addEventListener('click', () => {
            if (c === 'Umum') { showToast('Kategori "Umum" tidak dapat dihapus'); return; }
            openConfirm(() => {
              // move items to Umum and delete category
              const list = readCats().filter(x => x !== c);
              writeCats(list);
              const arr = readData().map(i => i.category === c ? { ...i, category: 'Umum' } : i);
              writeData(arr);
              showToast('Kategori dihapus');
              // fix active filter if needed
              if (activeCat === c) activeCat = 'all';
              renderCats();
              render(searchInput?.value || '');
              setActiveChips();
              renderChips();
              renderCategorySelect('Umum');
            }, { title: 'Hapus Kategori', body: `Hapus kategori "${c}"? Item akan dipindah ke "Umum".` });
          });
          frag.appendChild(row);
        });
        catsList.appendChild(frag);
      }
      catAddBtn?.addEventListener('click', () => {
        const nv = normalizeCat(catInput?.value);
        if (!nv) { showToast('Nama tidak boleh kosong'); return; }
        const list = readCats();
        if (list.includes(nv)) { showToast('Kategori sudah ada'); return; }
        writeCats([...list, nv]);
        catInput.value = '';
        showToast('Kategori ditambahkan');
        renderCats();
        render(searchInput?.value || '');
        renderChips();
        renderCategorySelect(nv);
      });
      catInput?.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); catAddBtn?.click(); } });
      btnManageCats?.addEventListener('click', openCatsModal);

      // Initial render with skeleton then data
      // Initial UI render
      renderCategorySelect('Umum');
      renderChips();
      render();
      setTimeout(() => { isLoading = false; render(searchInput?.value || ''); }, 450);

      // Intersection Observer for pre-anim
      const io = new IntersectionObserver((entries) => {
        entries.forEach((en) => {
          if (en.isIntersecting) {
            en.target.classList.add('animate-in');
            io.unobserve(en.target);
          }
        });
      }, { threshold: .15 });
      root.querySelectorAll('.pre-anim').forEach((el) => io.observe(el));

      // Make clicks "pressable"
      root.querySelectorAll('button, .chip').forEach((el) => el.classList.add('pressable'));
    })();
  </script>

</Layout>