---
import Layout from "~/layouts/admin-layout.astro";
import AdminSidebar from "../../components/Admin-site/admin-sidebar.astro";
import AdminTopbar from "../../components/Admin-site/admin-topbar.astro";
// Complex branding to show in admin UI
const complexName = 'Komplek Anggrek Asri';
const complexImage = 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=100&h=100&fit=crop&crop=center';
---

<Layout>
  <AdminSidebar slot="sidebar" complexName={complexName} complexImage={complexImage} />
  <AdminTopbar slot="topbar" complexName={complexName} complexImage={complexImage} />

  <div class="page">
    <div class="page-header">
      <div class="page-title">
        <h1 class="title">Data Warga</h1>
        <p class="muted">Kelola data warga, verifikasi, dan analitik demografi. Fitur sesuai paket Plus.</p>
      </div>
      <div class="actions">
        <button id="btn-add" class="btn primary">
          <i class="fas fa-user-plus"></i>
          <span>Tambah Warga</span>
        </button>
        <button id="btn-export" class="btn">
          <i class="fas fa-file-export"></i>
          <span>Export CSV</span>
        </button>
      </div>
    </div>

    <!-- Template Surat Management -->
    <div class="section-card template-surat-card" data-step="template" data-animate>
      <div class="section-header">
        <div class="section-icon">
          <i class="fa-solid fa-file-lines"></i>
        </div>
        <div class="section-text">
          <h2>Template Surat</h2>
          <p>Kelola template surat yang tersedia untuk warga. Upload file PDF atau Word untuk template baru.</p>
        </div>
      </div>

      <div class="template-section">
        <div class="template-actions">
          <div class="template-actions-left">
            <button id="btn-add-template" class="btn primary">
              <i class="fas fa-plus"></i>
              <span>Tambah Template</span>
            </button>
            <button id="btn-refresh-templates" class="btn">
              <i class="fas fa-sync"></i>
              <span>Refresh</span>
            </button>
          </div>
          
          <div class="template-actions-right">
            <div class="template-stats">
              <div class="template-stat">
                <div class="template-stat-number" id="totalTemplates">0</div>
                <div class="template-stat-label">Total</div>
              </div>
              <div class="template-stat">
                <div class="template-stat-number" id="activeTemplates">0</div>
                <div class="template-stat-label">Aktif</div>
              </div>
              <div class="template-stat">
                <div class="template-stat-number" id="totalDownloads">0</div>
                <div class="template-stat-label">Download</div>
              </div>
            </div>
          </div>
        </div>

        <div class="template-grid" id="templateGrid">
          <!-- Template cards will be generated here -->
        </div>
      </div>
    </div>

    <!-- Import Data Warga (Modern UI) -->
    <div class="section-card import-warga-card" data-step="warga" data-animate>
      <div class="section-header">
        <div class="section-icon">
          <i class="fa-solid fa-file-excel"></i>
        </div>
        <div class="section-text">
          <h2>Import Data Warga</h2>
          <p>Upload file Excel dengan format: <strong>Nama, NIK, Telepon, Alamat, Blok, NoRumah</strong></p>
        </div>
      </div>

      <div class="import-section">
        <div class="import-area" id="wargaDropArea">
          <div class="import-icon">
            <i class="fas fa-cloud-upload-alt"></i>
          </div>
          <div class="import-text">
            <h3>Drop file Excel di sini</h3>
            <p>atau klik untuk browse file</p>
            <input type="file" id="excelWarga" accept=".xlsx,.xls" hidden />
          </div>
          <div class="import-actions">
            <button type="button" class="browse-btn">
              <i class="fas fa-folder-open"></i>
              Pilih File
            </button>
            <button type="button" id="downloadTemplateWarga" class="template-btn">
              <i class="fas fa-download"></i>
              Download Template
            </button>
          </div>
          <div class="import-hint" aria-hidden="true">Format: .xlsx / .xls Â· Maks 5MB</div>
        </div>

        <div class="data-preview" id="wargaPreview" style="display: none;">
          <div class="preview-header">
            <h3>Preview Data Warga</h3>
            <span class="data-count" id="wargaCount">0 data</span>
          </div>
          <div class="table-container">
            <table class="data-table modern" id="wargaTable">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Nama</th>
                  <th>NIK</th>
                  <th>Telepon</th>
                  <th>Alamat</th>
                  <th>Blok</th>
                  <th>No Rumah</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="filters card" data-animate>
      <div class="row g">
        <div class="col span-3">
          <label for="q">Cari</label>
          <div class="input-icon">
            <i class="fas fa-search" aria-hidden="true"></i>
            <input id="q" type="text" placeholder="Nama/NIK/KK/Alamat" />
          </div>
        </div>

        <div class="col">
          <label for="f-rt">RT</label>
          <input id="f-rt" type="text" placeholder="01" inputmode="numeric" />
        </div>

        <div class="col">
          <label for="f-rw">RW</label>
          <input id="f-rw" type="text" placeholder="01" inputmode="numeric" />
        </div>

        <div class="col">
          <label for="f-status">Status</label>
          <select id="f-status">
            <option value="">Semua</option>
            <option value="aktif">Aktif</option>
            <option value="pindah">Pindah</option>
            <option value="nonaktif">Nonaktif</option>
          </select>
        </div>

        <div class="col">
          <label for="f-verified">Verifikasi</label>
          <select id="f-verified">
            <option value="">Semua</option>
            <option value="true">Terverifikasi</option>
            <option value="false">Belum</option>
          </select>
        </div>

        <div class="col end no-label">
          <label class="sr-only" aria-hidden="true">Aksi</label>
          <div class="btns-end">
            <button id="btn-reset" class="btn ghost">
              <i class="fas fa-undo"></i>
              <span>Reset</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- KPIs -->
    <div class="kpi-grid" data-animate>
      <div class="kpi card">
        <div class="kpi-title">Total Warga Aktif</div>
        <div id="kpi-aktif" class="kpi-value">0</div>
      </div>
      <div class="kpi card">
        <div class="kpi-title">Total KK</div>
        <div id="kpi-kk" class="kpi-value">0</div>
      </div>
      <div class="kpi card">
        <div class="kpi-title">Terverifikasi</div>
        <div id="kpi-verified" class="kpi-value">0</div>
      </div>
      <div class="kpi card">
        <div class="kpi-title">Belum Verifikasi</div>
        <div id="kpi-unverified" class="kpi-value">0</div>
      </div>
    </div>

    <!-- Charts -->
    <div class="grid-2">
      <div class="card chart-card" data-animate>
        <div class="card-header">
          <h3>Distribusi RT/RW</h3>
          <div class="card-actions">
            <button class="action-button" aria-label="Unduh grafik" title="Unduh PNG" data-action="download" data-target="chart-rt">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
            <button class="action-button" aria-label="Layar penuh" title="Layar penuh" data-action="fullscreen">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 3 21 3 21 9"/>
                <polyline points="9 21 3 21 3 15"/>
                <line x1="21" y1="3" x2="14" y2="10"/>
                <line x1="3" y1="21" x2="10" y2="14"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="card-body chart-body">
          <canvas id="chart-rt"></canvas>
        </div>
      </div>

      <div class="card chart-card" data-animate>
        <div class="card-header">
          <h3>Status & Verifikasi</h3>
          <div class="card-actions">
            <button class="action-button" aria-label="Unduh grafik" title="Unduh PNG" data-action="download" data-target="chart-status">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </button>
            <button class="action-button" aria-label="Layar penuh" title="Layar penuh" data-action="fullscreen">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 3 21 3 21 9"/>
                <polyline points="9 21 3 21 3 15"/>
                <line x1="21" y1="3" x2="14" y2="10"/>
                <line x1="3" y1="21" x2="10" y2="14"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="card-body chart-body">
          <canvas id="chart-status"></canvas>
        </div>
      </div>
    </div>

    <!-- Table -->
    <div class="card table-card" data-animate>
      <div class="card-header">
        <h3>Daftar Warga</h3>
      </div>
      <div class="card-body">
        <div class="table-container">
          <table class="table" id="tbl-warga" aria-describedby="tabel-warga">
            <thead>
              <tr>
                <th>Nama</th>
                <th>NIK</th>
                <th>No. KK</th>
                <th>Alamat</th>
                <th>RT/RW</th>
                <th>Status</th>
                <th>Verifikasi</th>
                <th>Aksi</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        
        <!-- Mobile Cards View -->
        <div class="mobile-cards" id="mobile-cards" style="display: none;">
          <!-- Mobile cards will be generated here -->
        </div>
      </div>
    </div>

    <!-- Modal Tambah/Edit -->
    <dialog id="dlg-warga" class="modal">
      <form id="form-warga" method="dialog" class="modal-content" novalidate>
        <header class="modal-header">
          <h3 id="dlg-title">Tambah Warga</h3>
          <button type="reset" class="icon-btn" aria-label="Tutup">
            <i class="fas fa-times"></i>
          </button>
        </header>

        <div class="grid form-grid">
          <h4 class="form-section span-12">Data Pribadi</h4>
          <label>Nama<input name="nama" required /></label>
          <label>NIK<input name="nik" required pattern="\\d{8,20}" /></label>
          <label class="span-12">No. KK<input name="kk" required pattern="\\d{8,20}" /></label>
          <label class="span-12">Alamat<input name="alamat" required /></label>

          <h4 class="form-section span-12">Domisili</h4>
          <label>RT<input name="rt" required /></label>
          <label>RW<input name="rw" required /></label>
          <label class="span-12">No. Rumah<input name="no_rumah" /></label>

          <h4 class="form-section span-12">Kontak & Status</h4>
          <label>Telepon<input name="telepon" /></label>
          <label>Status
            <select name="status">
              <option value="aktif">Aktif</option>
              <option value="pindah">Pindah</option>
              <option value="nonaktif">Nonaktif</option>
            </select>
          </label>
          <label class="span-12">Email<input type="email" name="email" /></label>
        </div>

        <footer class="modal-actions">
          <button type="reset" class="btn ghost">Batal</button>
          <button type="submit" class="btn primary">Simpan</button>
        </footer>
      </form>

      <div class="backdrop" aria-hidden="true"></div>
    </dialog>
  </div>

  <!-- Modal: Add/Edit Template -->
  <dialog id="dlg-template" class="modal">
    <form id="form-template" method="dialog" class="modal-content" novalidate>
      <header class="modal-header">
        <h3 id="dlg-template-title">Tambah Template Surat</h3>
        <button type="reset" class="icon-btn" aria-label="Tutup">
          <i class="fas fa-times"></i>
        </button>
      </header>

      <div class="grid form-grid">
        <h4 class="form-section span-12">Informasi Template</h4>
        <label class="span-12">Nama Template<input name="name" required /></label>
        <label class="span-12">Jenis Surat
          <select name="type" required>
            <option value="">Pilih Jenis Surat</option>
            <option value="pengantar">Surat Pengantar</option>
            <option value="undangan">Surat Undangan</option>
            <option value="keterangan">Surat Keterangan</option>
            <option value="izin">Surat Izin</option>
            <option value="pemberitahuan">Surat Pemberitahuan</option>
            <option value="lainnya">Lainnya</option>
          </select>
        </label>
        <label class="span-12">Deskripsi<textarea name="description" rows="3"></textarea></label>
        
        <h4 class="form-section span-12">File Template</h4>
        <label class="span-12">File Template
          <input type="file" name="file" accept=".pdf,.doc,.docx" required />
          <small>Format yang didukung: PDF, DOC, DOCX (Maksimal 10MB)</small>
        </label>
      </div>

      <footer class="modal-actions">
        <button type="reset" class="btn ghost">Batal</button>
        <button type="submit" class="btn primary">Simpan</button>
      </footer>
    </form>

    <div class="backdrop" aria-hidden="true"></div>
  </dialog>

  <!-- Modal: Import Error -->
  <dialog id="dlg-import-error" class="modal">
    <div class="modal-content">
      <header class="modal-header">
        <h3 id="dlg-import-error-title">Kesalahan Import</h3>
        <button type="button" class="icon-btn" aria-label="Tutup" id="dlg-import-error-close">
          <i class="fas fa-times"></i>
        </button>
      </header>
      <div class="modal-body" style="padding: 16px;">
        <div class="error-summary" id="dlg-import-error-summary"></div>
        <ul class="error-list" id="dlg-import-error-list" role="list"></ul>
      </div>
      <footer class="modal-actions">
        <button type="button" class="btn primary" id="dlg-import-error-ok">Mengerti</button>
      </footer>
    </div>
    <div class="backdrop" aria-hidden="true"></div>
  </dialog>

  <style>
    /* ========== RESET & CONTAINER ========== */
    *, *::before, *::after { box-sizing: border-box; }
    html, body { height: 100%; }
    img, svg, canvas { max-width: 100%; display: block; }
    :root {
      --bg: #f7f8fb;
      --surface: #ffffff;
      --surface-2: #fbfcfe;
      --text: #0f172a;
      --muted: #64748b;
      --border: #e6e8ee;
      --primary: #2563eb;
      --success: #16a34a;
      --warning: #f59e0b;
      --danger: #ef4444;

      --radius-6: 6px;
      --radius-8: 8px;
      --radius-10: 10px;
      --radius-12: 12px;

      --shadow-1: 0 1px 2px rgba(15, 23, 42, 0.05), 0 1px 1px rgba(15, 23, 42, 0.04);
      --shadow-2: 0 6px 16px rgba(15, 23, 42, 0.06), 0 2px 6px rgba(15, 23, 42, 0.04);

      --space-1: 4px;
      --space-2: 8px;
      --space-3: 12px;
      --space-4: 16px;
      --space-5: 20px;
      --space-6: 24px;
      --space-8: 32px;

      --focus: 0 0 0 3px rgba(37, 99, 235, 0.18);
    }


    html, body {
      height: 100%;
      overflow-x: hidden;
      max-width: 100vw;
    }
    
    .page {
      max-width: 1200px;
      margin: 0 auto;
      padding-inline: clamp(12px, 3vw, 24px);
      padding-block: 16px;
      background: var(--bg);
      color: var(--text);
      contain: layout paint;
      width: 100%;
      overflow-x: hidden;
    }
    
    @media (max-width: 640px) {
      .page {
        padding-inline: clamp(8px, 2vw, 16px);
        padding-block: 12px;
      }
    }
    
    @media (max-width: 480px) {
      .section-card .section-header { padding: var(--space-3) var(--space-4); flex-direction: column; text-align: center; }
      .section-card .section-text { text-align: center; }
      .section-card .section-text p { margin: 0 auto; }
      
      .import-section { padding: var(--space-4); }
      .import-area { padding: 24px 16px; min-height: 160px; }
      .import-icon { width: 52px; height: 52px; }
      .import-icon i { font-size: 22px; }
      
      .browse-btn, .template-btn { 
        padding: 12px 16px; 
        font-size: 14px; 
        min-height: 46px;
      }
      
      .page {
        padding-inline: clamp(6px, 1.5vw, 12px);
        padding-block: 10px;
      }
    }
    
    @media (max-width: 360px) {
      .page {
        padding-inline: 4px;
        padding-block: 8px;
      }
    }

    /* ========== HEADER ========== */
    .page-header {
      display: flex; justify-content: space-between; align-items: center; gap: 16px;
      margin-bottom: 12px;
      padding-inline: 2px;
    }
    .page-title { min-width: 0; }
    .title { margin: 0; font-size: clamp(18px, 2.2vw, 22px); font-weight: 800; letter-spacing: .2px; }
    .muted { color: var(--muted); }

    .actions { display: inline-flex; gap: 8px; flex-wrap: wrap; }
    .actions .btn span { white-space: nowrap; }

    @media (max-width: 840px) {
      .page-header { flex-direction: column; align-items: stretch; }
      .actions { width: 100%; display: grid; grid-template-columns: 1fr 1fr; gap: 8px; }
      .actions .btn { width: 100%; justify-content: center; }
    }
    
    @media (max-width: 640px) {
      .page-header { gap: 12px; }
      .page-title { text-align: center; }
      .title { font-size: 18px; }
      .muted { font-size: 13px; text-align: center; }
    }
    
    @media (max-width: 420px) {
      .actions .btn span { display: none; }
      .actions .btn i { margin-right: 0; }
      .page-header { gap: 10px; }
      .title { font-size: 16px; }
      .muted { font-size: 12px; }
    }
    
    @media (max-width: 360px) {
      .actions { gap: 6px; }
      .actions .btn { padding: 8px 10px; min-height: 40px; }
      .actions .btn i { font-size: 14px; }
    }

    /* ========== CARDS ========== */
    .card {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: var(--radius-12);
      box-shadow: var(--shadow-1);
    }
    .card-header {
      display: flex; align-items: center; justify-content: space-between;
      padding: var(--space-3) var(--space-4);
      border-bottom: 1px solid var(--border);
    }
    .card-header h3 { margin: 0; font-size: 16px; font-weight: 800; letter-spacing: .2px; }
    .card-actions { display: inline-flex; gap: 8px; align-items: center; }
    .card-body { padding: var(--space-4); }
    
    @media (max-width: 480px) {
      .card { border-radius: var(--radius-10); }
      .card-header { padding: 8px 10px; }
      .card-header h3 { font-size: 14px; }
      .card-body { padding: 10px; }
      .action-button { width: 30px; height: 30px; }
    }
    
    @media (max-width: 360px) {
      .card { border-radius: var(--radius-8); }
      .card-header { padding: 6px 8px; }
      .card-header h3 { font-size: 13px; }
      .card-body { padding: 8px; }
      .action-button { width: 28px; height: 28px; }
    }

    .action-button {
      display: inline-flex; align-items: center; justify-content: center;
      width: 36px; height: 36px;
      border: 1px solid var(--border);
      background: var(--surface-2);
      border-radius: var(--radius-8);
    }
    .action-button:focus-visible { box-shadow: var(--focus); }

    /* ========== IMPORT (Upload & Preview) ========== */
    .section-card.import-warga-card { margin-top: var(--space-3); }
    .section-card .section-header {
      display: flex; gap: var(--space-3); align-items: center;
      padding: var(--space-4); border-bottom: 1px solid var(--border);
    }
    .section-card .section-icon {
      width: 40px; height: 40px; border-radius: 10px; display: grid; place-items: center;
      background: #eef4ff; color: var(--primary);
    }
    .section-card .section-text h2 { margin: 0; font-size: 16px; font-weight: 800; }
    .section-card .section-text p { margin: 4px 0 0; color: var(--muted); font-size: 13px; }

    .import-section { padding: var(--space-4); display: grid; gap: var(--space-3); }
    .import-area {
      border: 2px dashed #d8deea; border-radius: var(--radius-12);
      background: #f9fbff; padding: 28px; text-align: center;
      display: grid; gap: 10px; justify-items: center;
      transition: background .15s ease, border-color .15s ease, transform .12s ease;
      cursor: pointer;
    }
    .import-area:hover { background: #f3f7ff; border-color: #c9d4ea; }
    .import-area.drag-active { background: #eef4ff; border-color: var(--primary); box-shadow: 0 0 0 3px rgba(37,99,235,.12) inset; }
    .import-icon { width: 60px; height: 60px; border-radius: 12px; background: #fff; display: grid; place-items: center; box-shadow: var(--shadow-1); }
    .import-icon i { font-size: 24px; color: var(--primary); }
    .import-text h3 { margin: 0; font-size: 15px; font-weight: 800; }
    .import-text p { margin: 4px 0 0; color: var(--muted); font-size: 13px; }
    .import-actions { display: inline-flex; gap: 10px; margin-top: 4px; flex-wrap: wrap; }
    .browse-btn, .template-btn {
      display: inline-flex; align-items: center; gap: 8px; font-weight: 800;
      padding: 10px 14px; border-radius: 10px; border: 1px solid var(--border);
      background: #fff; color: var(--text); cursor: pointer;
    }
    .browse-btn { background: var(--primary); color: #fff; border-color: var(--primary); }
    .browse-btn i, .template-btn i { font-size: 14px; }
    .import-hint { color: var(--muted); font-size: 12px; }

    .data-preview {
      border: 1px solid var(--border); border-radius: var(--radius-12); background: var(--surface);
      box-shadow: var(--shadow-1);
    }
    .data-preview .table-container { max-height: 360px; overflow: auto; border-radius: 0 0 var(--radius-12) var(--radius-12); }
    .preview-header {
      display: grid; grid-template-columns: 1fr auto auto; align-items: center;
      column-gap: 16px; row-gap: 8px; padding: 14px 18px; border-bottom: 1px solid var(--border);
      background: #fbfcff; border-radius: var(--radius-12) var(--radius-12) 0 0;
    }
    .preview-header h3 { margin: 0; font-size: 14px; font-weight: 900; }
    .preview-header .data-count { justify-self: center; color: var(--muted); font-size: 12px; }
    .preview-header .preview-actions { 
      justify-self: end; display: inline-flex; gap: 20px; align-items: center;
      padding: 10px 14px; background: rgba(255,255,255,.9); border: 1px solid var(--border);
      border-radius: 999px; box-shadow: var(--shadow-1); margin-right: 12px;
      backdrop-filter: saturate(150%) blur(4px);
      flex-wrap: nowrap; white-space: nowrap;
    }
    /* remove inner divider for cleaner look */
    .preview-header .preview-actions::before { display: none; }

    /* Text buttons only within preview actions to avoid affecting chart icon buttons */
    .preview-actions > .action-button {
      width: auto; min-width: 140px; height: auto; padding: 10px 18px; gap: 8px;
      border-radius: 999px; font-size: 13.25px; font-weight: 800;
      background: #fff; color: var(--text); border: 1px solid var(--border);
      transition: background .18s ease, border-color .18s ease, box-shadow .18s ease, transform .08s ease;
      display: inline-flex !important; align-items: center; justify-content: center;
      white-space: nowrap;
    }
    /* Fallback spacing for older browsers or overridden gap */
    .preview-actions > .action-button + .action-button { margin-left: 20px !important; }
    .preview-actions > .action-button span { white-space: nowrap; display: inline-block; }
    .preview-actions .action-button i { font-size: 14px; margin-right: 10px; display: inline-block; min-width: 16px; }
    .preview-actions .action-button:hover { background: #f8fafc; border-color: #d9dfeb; box-shadow: 0 2px 10px rgba(15, 23, 42, .08); }
    .preview-actions .action-button:active { transform: translateY(1px) scale(.99); }
    .preview-actions .action-button:focus-visible {
      outline: 3px solid rgba(59,130,246,.35); outline-offset: 2px;
    }
    .preview-actions .action-button.outline { background: #fff; }
    /* Hard spacing between specific buttons as a final guard */
    .preview-actions #btnWargaChange { margin-right: 20px !important; }
    .preview-actions #btnWargaCancel { margin-left: 0 !important; }
    /* Spacer element between buttons as the ultimate fallback */
    .preview-actions .actions-gap { display: inline-block; width: 20px; height: 1px; flex: 0 0 20px; }
    /* Variant: secondary (Ganti Data) */
    /* Variant: success (Ganti Baru) */
    .preview-actions .action-button.is-success { 
      background: linear-gradient(180deg, #16a34a 0%, #15803d 100%);
      border-color: #15803d; color: #ffffff;
      box-shadow: 0 1px 0 rgba(0,0,0,.03), 0 6px 18px rgba(22,163,74,.25);
    }
    .preview-actions .action-button.is-success:hover { background: linear-gradient(180deg, #16a34a 0%, #166534 100%); border-color: #166534; }
    .preview-actions .action-button.is-success:active { background: #166534; }
    /* Variant: danger (Batal) */
    .preview-actions .action-button.is-danger { 
      background: linear-gradient(180deg, #ef4444 0%, #dc2626 100%);
      border-color: #b91c1c; color: #ffffff;
      box-shadow: 0 1px 0 rgba(0,0,0,.03), 0 6px 18px rgba(239,68,68,.22);
    }
    .preview-actions .action-button.is-danger:hover { background: linear-gradient(180deg, #ef4444 0%, #b91c1c 100%); border-color: #991b1b; }
    .preview-actions .action-button.is-danger:active { background: #991b1b; }
    .preview-actions .action-button.is-danger:focus-visible { outline-color: rgba(239,68,68,.35); }

    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
      .preview-actions > .action-button { transition: none; }
      .preview-actions .action-button:active { transform: none; }
    }

    @media (max-width: 640px) {
      .preview-header { grid-template-columns: 1fr; row-gap: 8px; }
      .preview-header .preview-actions { justify-self: center; gap: 14px; margin-right: 0; padding: 8px 12px; }
      .preview-header .preview-actions::before { display: none; }
      .preview-actions .action-button { min-width: 138px; }
    }

    /* Modern compact table for preview */
    .data-table.modern {
      width: 100%; border-collapse: separate; border-spacing: 0; table-layout: auto;
    }
    .data-table.modern thead th {
      position: sticky; top: 0; z-index: 1; background: #f6f8fc; color: var(--muted);
      font-size: 12px; font-weight: 800; padding: 10px 12px; border-bottom: 1px solid var(--border);
    }
    .data-table.modern tbody td { padding: 10px 12px; border-bottom: 1px solid var(--border); font-size: 13px; }
    .data-table.modern tbody tr:nth-child(odd) { background: #fbfdff; }
    .data-table.modern tbody tr:hover { background: #f5f9ff; }

    @media (max-width: 640px) {
      .import-section { padding: var(--space-3); }
      .import-area { padding: 20px; }
      .preview-header { grid-template-columns: 1fr; text-align: center; }
      .preview-header .preview-actions { justify-self: center; }
    }

    /* ========== FILTERS ========== */
    .filters { margin-bottom: var(--space-3); }
    .row.g {
      display: grid;
      gap: var(--space-3);
      grid-template-columns: 2fr repeat(4, minmax(120px, 1fr)) auto;
      align-items: end;
    }
    .row.g .span-2 { grid-column: span 2; }
    .row.g .span-3 { grid-column: span 3; }
    @media (max-width: 960px) {
      .row.g {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: var(--space-2);
      }
      .row.g .span-3 { grid-column: span 2; }
    }
    @media (max-width: 640px) {
      .filters { padding: 10px; }
      .row.g { 
        grid-template-columns: repeat(2, 1fr); 
        gap: 8px;
      }
      .row.g .span-3 { grid-column: span 2; }
      .btns-end { width: 100%; }
      #btn-reset { width: 100%; justify-content: center; }
    }
    
    @media (max-width: 480px) {
      .filters { padding: 8px; }
      .row.g { 
        grid-template-columns: 1fr; 
        gap: 6px; 
      }
      .row.g .span-3 { grid-column: span 1; }
      .col.end { grid-column: span 1; }
      .btns-end { width: 100%; }
      #btn-reset { width: 100%; justify-content: center; }
    }
    
    @media (max-width: 360px) {
      .filters { padding: 6px; }
      .row.g { gap: 4px; }
      .filters label { font-size: 10px; margin-bottom: 3px; }
      .filters input, .filters select { height: 32px; padding: 4px 6px; font-size: 12px; }
    }

    label { display: block; font-size: 12px; color: var(--muted); margin-bottom: 6px; }
    input, select {
      width: 100%; height: 40px; padding: 8px 10px;
      border: 1px solid var(--border); border-radius: var(--radius-8);
      background: var(--surface-2);
      color: var(--text);
      outline: none; transition: none;
      min-width: 0; /* prevent overflow in grid */
    }
    input:focus, select:focus {
      border-color: var(--primary);
      box-shadow: var(--focus);
      background: #fff;
    }
    .input-icon { position: relative; }
    .input-icon i { position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: var(--muted); font-size: 14px; }
    .input-icon input { padding-left: 34px; }

    .btn {
      display: inline-flex; align-items: center; gap: 4px;
      padding: 10px 12px; border: 1px solid var(--border);
      border-radius: var(--radius-10); background: #fff; color: var(--text);
      cursor: pointer; font-weight: 700; transition: none;
    }
    .btn.primary { background: var(--primary); border-color: var(--primary); color: #fff; }
    .btn.ghost { background: #f8fafc; }
    .btn.small { padding: 8px 10px; font-size: 12px; border-radius: var(--radius-8); }
    .btn:focus-visible { box-shadow: var(--focus); }
    .btn:active { transform: translateY(1px); }
    
    @media (max-width: 480px) {
      label { font-size: 11px; margin-bottom: 4px; }
      input, select { height: 36px; padding: 6px 8px; font-size: 13px; }
      .filters input, .filters select { height: 34px; }
      .col label { margin-bottom: 3px; }
      .input-icon i { left: 8px; font-size: 12px; }
      .input-icon input { padding-left: 28px; }
      .btn { padding: 6px 8px; gap: 3px; font-size: 12px; border-radius: var(--radius-8); }
      .btn.small { padding: 3px 5px; font-size: 10px; border-radius: var(--radius-6); }
    }

    .icon-btn {
      border: none; background: transparent; color: var(--muted); cursor: pointer; padding: 6px;
      border-radius: var(--radius-8);
    }
    .icon-btn:focus-visible { box-shadow: var(--focus); }

    /* ========== KPI ========== */
    .kpi-grid {
      display: grid; grid-template-columns: repeat(4, 1fr);
      gap: var(--space-3); margin: var(--space-3) 0;
    }
    @media (max-width: 960px) {
      .kpi-grid { grid-template-columns: repeat(2, 1fr); gap: var(--space-2); }
    }
    @media (max-width: 520px) {
      .kpi-grid { grid-template-columns: 1fr; gap: var(--space-2); }
    }
    .kpi { padding: var(--space-4); }
    .kpi-title { color: var(--muted); font-size: 12px; }
    .kpi-value { font-size: 24px; font-weight: 900; margin-top: 6px; }
    
    @media (max-width: 768px) {
      .kpi { padding: 12px; }
      .kpi-value { font-size: 22px; }
    }
    @media (max-width: 480px) {
      .kpi { padding: 10px; }
      .kpi-title { font-size: 11px; }
      .kpi-value { font-size: 20px; margin-top: 4px; }
    }
    
    @media (max-width: 360px) {
      .kpi { padding: 8px; }
      .kpi-title { font-size: 10px; }
      .kpi-value { font-size: 18px; margin-top: 3px; }
    }

    /* ========== CHARTS ========== */
    .grid-2 { display: grid; gap: var(--space-3); grid-template-columns: 1fr 1fr; }
    @media (max-width: 960px) {
      .grid-2 { grid-template-columns: 1fr; gap: var(--space-2); }
    }
    .chart-body { position: relative; min-height: 260px; }
    .chart-body canvas { width: 100% !important; height: 100% !important; }
    @media (max-width: 640px) { .chart-body { min-height: 220px; } }
    @media (max-width: 480px) { .chart-body { min-height: 200px; } }
    @media (max-width: 360px) { .chart-body { min-height: 180px; } }

    /* ========== TABLE ========== */
    .table-card { margin-top: var(--space-3); }
    .table-container {
      width: 100%;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      border-radius: var(--radius-10);
    }
    .table { 
      width: 100%; 
      border-collapse: separate; 
      border-spacing: 0; 
      table-layout: auto; /* Changed from fixed to auto for better text handling */
    }
    .table th, .table td {
      padding: 10px 12px; 
      border-bottom: 1px solid var(--border); 
      text-align: left;
      vertical-align: middle;
      overflow-wrap: break-word; /* Better text wrapping */
      word-break: break-word; /* Prevent long words from overflowing */
      max-width: 0; /* Force text wrapping */
    }
    
    /* Column width optimization */
    .table th:nth-child(1), .table td:nth-child(1) { width: 15%; min-width: 120px; } /* Nama */
    .table th:nth-child(2), .table td:nth-child(2) { width: 12%; min-width: 100px; } /* NIK */
    .table th:nth-child(3), .table td:nth-child(3) { width: 12%; min-width: 100px; } /* No. KK */
    .table th:nth-child(4), .table td:nth-child(4) { width: 20%; min-width: 150px; } /* Alamat */
    .table th:nth-child(5), .table td:nth-child(5) { width: 8%; min-width: 60px; } /* RT/RW */
    .table th:nth-child(6), .table td:nth-child(6) { width: 10%; min-width: 80px; } /* Status */
    .table th:nth-child(7), .table td:nth-child(7) { width: 15%; min-width: 120px; } /* Verifikasi */
    .table th:nth-child(8), .table td:nth-child(8) { width: 8%; min-width: 80px; } /* Aksi */
    
    .table thead th {
      position: sticky; 
      top: 0; 
      background: var(--surface); 
      z-index: 1;
      box-shadow: inset 0 -1px var(--border);
      font-size: 12px; 
      color: var(--muted); 
      font-weight: 800; 
      letter-spacing: .2px;
      white-space: nowrap; /* Keep headers on one line */
    }
    .table tbody tr:nth-child(odd) { background: #fafbfd; }
    .table td .btn.small { white-space: nowrap; }
    .table .num { text-align: right; }
    
    /* Enhanced mobile table */
    @media (max-width: 1024px) {
      .table th:nth-child(2), .table td:nth-child(2), /* NIK */
      .table th:nth-child(3), .table td:nth-child(3) { /* No. KK */
        font-size: 11px;
        word-break: break-all; /* Break long numbers */
      }
    }
    
    @media (max-width: 768px) {
      .table-container {
        overflow-x: auto;
        margin: 0 -4px;
        padding: 0 4px;
        width: calc(100% + 8px);
      }
      .table { 
        min-width: 700px; 
        font-size: 12px; 
      }
      .table th, .table td { 
        padding: 8px 8px; 
      }
      .table th:nth-child(4), .table td:nth-child(4) { /* Alamat */
        max-width: 120px;
      }
    }
    
    @media (max-width: 640px) {
      .table-container {
        overflow-x: auto;
        margin: 0 -8px;
        padding: 0 8px;
        width: calc(100% + 16px);
      }
      .table { 
        min-width: 600px; 
        font-size: 11px; 
      }
      .table th, .table td { 
        padding: 6px 6px; 
      }
      .table th:nth-child(2), .table td:nth-child(2), /* NIK */
      .table th:nth-child(3), .table td:nth-child(3) { /* No. KK */
        font-size: 10px;
        max-width: 80px;
      }
      .table th:nth-child(4), .table td:nth-child(4) { /* Alamat */
        max-width: 100px;
      }
    }
    
    @media (max-width: 480px) {
      .table-card { margin-top: 8px; }
      .table-container {
        margin: 0 -12px;
        padding: 0 12px;
        width: calc(100% + 24px);
        max-width: 100vw;
      }
      .table { 
        min-width: 500px; 
        font-size: 10px; 
      }
      .table th, .table td { 
        padding: 4px 4px; 
        white-space: normal; 
      }
      .table th:nth-child(2), .table td:nth-child(2), /* NIK */
      .table th:nth-child(3), .table td:nth-child(3) { /* No. KK */
        font-size: 9px;
        max-width: 70px;
      }
      .table th:nth-child(4), .table td:nth-child(4) { /* Alamat */
        max-width: 80px;
      }
      .table th:nth-child(7), .table td:nth-child(7) { /* Verifikasi */
        max-width: 90px;
      }
    }
    
    @media (max-width: 360px) {
      .table { 
        min-width: 450px; 
        font-size: 9px;
      }
      .table th:nth-child(2), .table td:nth-child(2), /* NIK */
      .table th:nth-child(3), .table td:nth-child(3) { /* No. KK */
        font-size: 8px;
        max-width: 60px;
      }
      .table th:nth-child(4), .table td:nth-child(4) { /* Alamat */
        max-width: 70px;
      }
      .table th:nth-child(7), .table td:nth-child(7) { /* Verifikasi */
        max-width: 80px;
      }
    }
    
    /* Mobile Card View for Table */
    @media (max-width: 640px) {
      .table-container {
        overflow: visible;
        margin: 0;
        padding: 0;
        width: 100%;
      }
      
      .table {
        display: none; /* Hide table on mobile */
      }
      
      /* Show mobile cards instead */
      .mobile-cards {
        display: block;
      }
      
      .mobile-card {
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-10);
        padding: var(--space-3);
        margin-bottom: var(--space-2);
        box-shadow: var(--shadow-1);
        transition: all 0.2s ease;
      }
      
      .mobile-card:hover {
        box-shadow: var(--shadow-2);
        transform: translateY(-1px);
      }
      
      .mobile-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--space-2);
        gap: var(--space-2);
      }
      
      .mobile-card-name {
        font-weight: 700;
        font-size: 14px;
        color: var(--text);
        flex: 1;
        line-height: 1.3;
      }
      
      .mobile-card-status {
        display: flex;
        gap: var(--space-1);
        flex-wrap: wrap;
        align-items: center;
      }
      
      .mobile-card-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-2);
        margin-bottom: var(--space-2);
      }
      
      .mobile-card-detail {
        display: flex;
        flex-direction: column;
        gap: 4px;
      }
      
      .mobile-card-label {
        font-size: 10px;
        color: var(--muted);
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      
      .mobile-card-value {
        font-size: 12px;
        color: var(--text);
        word-break: break-word;
        line-height: 1.4;
      }
      
      .mobile-card-actions {
        display: flex;
        justify-content: flex-end;
      }
      
      .mobile-card .btn.small {
        padding: 8px 12px;
        font-size: 12px;
        min-height: 36px;
      }
    }
    
    @media (max-width: 480px) {
      .mobile-card {
        padding: var(--space-2);
        margin-bottom: var(--space-1);
      }
      
      .mobile-card-header {
        margin-bottom: var(--space-1);
      }
      
      .mobile-card-name {
        font-size: 13px;
      }
      
      .mobile-card-details {
        grid-template-columns: 1fr;
        gap: var(--space-1);
      }
      
      .mobile-card-detail {
        gap: 2px;
      }
      
      .mobile-card-label {
        font-size: 9px;
      }
      
      .mobile-card-value {
        font-size: 11px;
      }
    }

    /* Badges */
    .badge {
      display: inline-flex; align-items: center; gap: 6px;
      border-radius: 999px; padding: 2px 10px; font-size: 12px; font-weight: 700;
    }
    .badge.ok { background: #e8faf1; color: #10713b; }
    .badge.warn { background: #fff3e1; color: #925a0a; }
    .badge.aktif { background: #e9f7ee; color: #176f39; }
    .badge.pindah { background: #fff7e6; color: #8a5b0a; }
    .badge.nonaktif { background: #eef2f7; color: #475569; }

    /* ========== MODAL (dialog) ========== */
    .modal {
      width: min(720px, 96vw); padding: 0; border: none; border-radius: var(--radius-12);
      box-shadow: var(--shadow-2); background: transparent; max-height: 90vh;
    }
    .modal[open] .modal-content {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: var(--radius-12);
      display: flex; flex-direction: column; max-height: 90vh; overflow: hidden;
      animation: pop .18s ease-out;
    }
    .modal-header {
      display: flex; align-items: center; justify-content: space-between;
      padding: 14px 16px; border-bottom: 1px solid var(--border);
      position: sticky; top: 0; background: var(--surface); z-index: 2;
    }
    .modal-header h3 { font-size: 16px; font-weight: 800; margin: 0; }
    .modal-content { padding: 0; }
    .form-grid {
      padding: var(--space-4);
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      column-gap: var(--space-6);
      row-gap: var(--space-4);
      overflow: auto; flex: 1;
    }
    .form-grid label {
      grid-column: span 6;
      display: flex; flex-direction: column; gap: 6px;
      margin: 0; font-size: 12px; color: var(--muted);
      min-width: 0;
    }
    .form-grid label.span-12 { grid-column: span 12; }
    .form-grid .form-section {
      grid-column: span 12;
      margin: var(--space-3) 0 var(--space-3);
      font-size: 13px; font-weight: 900; letter-spacing: .2px; color: var(--text);
      padding-top: var(--space-2);
      border-top: 1px dashed var(--border);
    }
    .modal-actions {
      display: flex; justify-content: flex-end; gap: var(--space-2);
      padding: var(--space-3) var(--space-4); border-top: 1px solid var(--border);
      background: #fafbff; position: sticky; bottom: 0; z-index: 2;
    }
    .modal .form-grid input, .modal .form-grid select {
      height: 42px; background: #fff; border: 1px solid var(--border); border-radius: var(--radius-8);
    }
    .modal .form-grid select { appearance: none; }

    /* Error modal specific tweaks */
    #dlg-import-error .error-summary { 
      font-size: 13px; color: var(--text); font-weight: 700; margin-bottom: 8px;
    }
    #dlg-import-error .error-list { 
      margin: 0; padding-left: 18px; display: grid; gap: 6px; max-height: 40vh; overflow: auto;
    }
    #dlg-import-error .error-list li { 
      color: #991b1b; background: #fef2f2; border: 1px solid #fee2e2; border-radius: 8px; padding: 8px 10px; list-style: none;
    }

    @media (max-width: 768px) {
      .form-grid { padding: var(--space-3); column-gap: var(--space-4); row-gap: var(--space-3); }
    }
    @media (max-width: 640px) {
      .form-grid { grid-template-columns: 1fr; }
      .form-grid label, .form-grid label.span-12 { grid-column: span 1; }
    }
    @media (max-width: 520px) {
      .modal { width: 100vw; max-height: 100dvh; border-radius: 0; }
      .modal[open] .modal-content { max-height: 100dvh; border-radius: 0; animation: slide-in-up .28s ease-out; }
      .modal-header { padding: 10px 12px; }
      .modal-header h3 { font-size: 14px; }
      .form-grid { padding: 10px; column-gap: 10px; row-gap: 10px; }
      .modal-actions { padding: var(--space-2); flex-direction: column; gap: var(--space-2); }
      .modal-actions .btn { width: 100%; justify-content: center; }
    }
    
    @media (max-width: 360px) {
      .modal-header { padding: 8px 10px; }
      .form-grid { padding: 8px; column-gap: 8px; row-gap: 8px; }
      .form-grid .form-section { margin: 6px 0; font-size: 12px; }
      .modal .form-grid input, .modal .form-grid select { height: 38px; font-size: 13px; }
      .modal-header h3 { font-size: 13px; }
      .modal-actions { padding: 8px; }
      .modal-actions .btn { padding: 8px 12px; font-size: 12px; }
    }

    /* Accessibility & SR-Only */
    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }

    /* Animations (no hover) */
    @keyframes enter { from { opacity: 0; transform: translateY(8px) scale(.98); } to { opacity: 1; transform: translateY(0) scale(1); } }
    @keyframes pop { from { opacity: 0; transform: translateY(10px) scale(.98); } to { opacity: 1; transform: translateY(0) scale(1); } }
    @keyframes slide-in-up { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
    [data-animate] { animation: enter .24s ease-out both; }
    .kpi { animation: enter .26s ease-out both; }
    .kpi:nth-child(2){ animation-delay: .04s; }
    .kpi:nth-child(3){ animation-delay: .08s; }
    .kpi:nth-child(4){ animation-delay: .12s; }

    @media (prefers-reduced-motion: reduce) {
      * { animation: none !important; transition: none !important; }
    }

    /* ========== Template Surat Management ========== */
    .section-card.template-surat-card {
      background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
      border: 1px solid #e2e8f0;
      border-radius: 24px;
      box-shadow: 
        0 20px 60px rgba(0, 0, 0, 0.08),
        0 8px 20px rgba(0, 0, 0, 0.04);
      margin: var(--space-5) 0;
      overflow: hidden;
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto;
      position: relative;
    }
    
    .section-card.template-surat-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #085895, #00b4d8, #0077be);
    }
    
    .template-section {
      padding: 2rem 2.5rem;
    }
    
    .template-actions {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
    }
    
    .template-actions-left {
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    
    .template-actions-right {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }
    
    .template-stats {
      display: flex;
      gap: 1.5rem;
      align-items: center;
      padding: 1rem 1.5rem;
      background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
      border-radius: 16px;
      border: 1px solid #cbd5e1;
    }
    
    .template-stat {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.25rem;
    }
    
    .template-stat-number {
      font-size: 1.5rem;
      font-weight: 800;
      color: #085895;
      line-height: 1;
    }
    
    .template-stat-label {
      font-size: 0.75rem;
      color: #64748b;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .template-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: 1.5rem;
    }
    
    .template-card {
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 20px;
      padding: 1.5rem;
      box-shadow: 
        0 8px 25px rgba(0, 0, 0, 0.08),
        0 3px 10px rgba(0, 0, 0, 0.04);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }
    
    .template-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #085895, #00b4d8);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }
    
    .template-card:hover {
      box-shadow: 
        0 20px 40px rgba(0, 0, 0, 0.12),
        0 8px 20px rgba(0, 0, 0, 0.08);
      transform: translateY(-8px) scale(1.02);
      border-color: #cbd5e1;
    }
    
    .template-card:hover::before {
      transform: scaleX(1);
    }
    
    .template-card-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .template-icon {
      width: 56px;
      height: 56px;
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      flex-shrink: 0;
      transition: transform 0.3s ease;
    }
    
    .template-card:hover .template-icon {
      transform: rotate(5deg) scale(1.1);
    }
    
    .template-icon.pengantar {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
    }
    
    .template-icon.undangan {
      background: linear-gradient(135deg, #f59e0b, #d97706);
      color: white;
    }
    
    .template-icon.keterangan {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
    }
    
    .template-icon.izin {
      background: linear-gradient(135deg, #8b5cf6, #7c3aed);
      color: white;
    }
    
    .template-icon.pemberitahuan {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
    }
    
    .template-icon.default {
      background: linear-gradient(135deg, #6b7280, #4b5563);
      color: white;
    }
    
    .template-info {
      flex: 1;
      min-width: 0;
    }
    
    .template-info h4 {
      margin: 0 0 0.5rem 0;
      font-size: 1.125rem;
      font-weight: 700;
      color: #1e293b;
      line-height: 1.3;
    }
    
    .template-type {
      font-size: 0.75rem;
      color: #64748b;
      background: #f1f5f9;
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      display: inline-block;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .template-description {
      font-size: 0.875rem;
      color: #64748b;
      line-height: 1.5;
      margin-bottom: 1rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .template-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.75rem;
      color: #64748b;
      margin-bottom: 1rem;
      padding: 0.75rem;
      background: #f8fafc;
      border-radius: 12px;
      border: 1px solid #e2e8f0;
    }
    
    .template-meta-item {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-weight: 600;
    }
    
    .template-actions-card {
      display: flex;
      gap: 0.5rem;
    }
    
    .template-actions-card .btn {
      flex: 1;
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
      font-weight: 600;
      border-radius: 12px;
      transition: all 0.2s ease;
    }
    
    .template-actions-card .btn:hover {
      transform: translateY(-1px);
    }
    
    .template-actions-card .btn.download {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      border: none;
    }
    
    .template-actions-card .btn.edit {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      border: none;
    }
    
    .template-actions-card .btn.delete {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
      border: none;
    }
    
    .template-empty-state {
      grid-column: 1 / -1;
      text-align: center;
      padding: 4rem 2rem;
      background: linear-gradient(135deg, #f8fafc, #f1f5f9);
      border-radius: 20px;
      border: 2px dashed #cbd5e1;
    }
    
    .template-empty-icon {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1.5rem;
      font-size: 2rem;
      color: #64748b;
    }
    
    .template-empty-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      margin: 0 0 0.5rem 0;
    }
    
    .template-empty-desc {
      font-size: 1rem;
      color: #64748b;
      margin: 0 0 2rem 0;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
    }
    
    /* Template Replacement Dialog */
    .template-replacement-dialog {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 1000;
    }
    
    .template-replacement-dialog .dialog-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem;
    }
    
    .template-replacement-dialog .dialog-content {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      max-width: 500px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .template-replacement-dialog .dialog-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1.5rem 2rem 1rem;
      border-bottom: 1px solid #e2e8f0;
    }
    
    .template-replacement-dialog .dialog-header h3 {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 700;
      color: #1e293b;
    }
    
    .template-replacement-dialog .dialog-close {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      border: none;
      background: #f1f5f9;
      color: #64748b;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .template-replacement-dialog .dialog-close:hover {
      background: #e2e8f0;
      color: #1e293b;
    }
    
    .template-replacement-dialog .dialog-body {
      padding: 1.5rem 2rem;
    }
    
    .template-replacement-dialog .dialog-body p {
      margin: 0 0 1rem 0;
      color: #64748b;
      line-height: 1.6;
    }
    
    .template-replacement-dialog .existing-template-info {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      padding: 1rem;
      margin: 1rem 0;
    }
    
    .template-replacement-dialog .template-preview {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .template-replacement-dialog .template-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      color: white;
    }
    
    .template-replacement-dialog .template-details h4 {
      margin: 0 0 0.25rem 0;
      font-size: 1rem;
      font-weight: 600;
      color: #1e293b;
    }
    
    .template-replacement-dialog .template-details .template-type {
      font-size: 0.75rem;
      color: #64748b;
      background: #e2e8f0;
      padding: 0.125rem 0.5rem;
      border-radius: 999px;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .template-replacement-dialog .dialog-actions {
      display: flex;
      gap: 1rem;
      padding: 1rem 2rem 2rem;
      justify-content: flex-end;
    }
    
    .template-replacement-dialog .dialog-actions .btn {
      padding: 0.75rem 1.5rem;
      border-radius: 12px;
      font-weight: 600;
      transition: all 0.2s ease;
    }
    
    .template-replacement-dialog .dialog-actions .btn.primary {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
      border: none;
    }
    
    .template-replacement-dialog .dialog-actions .btn.primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 8px 20px rgba(239, 68, 68, 0.3);
    }
    
    @media (max-width: 768px) {
      .template-section {
        padding: 1.5rem 1rem;
      }
      
      .template-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .template-actions {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
      }
      
      .template-actions-left,
      .template-actions-right {
        justify-content: center;
      }
      
      .template-stats {
        justify-content: center;
        gap: 1rem;
      }
      
      .template-actions-card {
        flex-direction: column;
      }
      
      .template-replacement-dialog .dialog-content {
        margin: 1rem;
        max-width: none;
      }
      
      .template-replacement-dialog .dialog-header,
      .template-replacement-dialog .dialog-body,
      .template-replacement-dialog .dialog-actions {
        padding-left: 1.5rem;
        padding-right: 1.5rem;
      }
      
      .template-replacement-dialog .dialog-actions {
        flex-direction: column;
      }
    }

    /* ========== Import Data Warga (Modern UI) ========== */
    .section-card.import-warga-card {
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: var(--radius-16);
      box-shadow: var(--shadow-2);
      margin: var(--space-5) 0;
      overflow: hidden;
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto;
    }
    .section-card.import-warga-card:hover { border-color: #dfe5f1; box-shadow: var(--shadow-3); }
    .section-card .section-header {
      display: flex; align-items: center; gap: 24px;
      padding: var(--space-5) var(--space-6);
      border-bottom: 1px solid var(--border);
      background: linear-gradient(to right, rgba(249, 250, 251, 0.9), rgba(248, 250, 252, 0.2));
    }
    .section-card .section-icon {
      width: 64px; height: 64px; border-radius: 18px;
      display: inline-flex; align-items: center; justify-content: center;
      background: linear-gradient(180deg, #eef2ff, #e0e7ff);
      color: #4f46e5; font-size: 24px; border: 1px solid #e3e8f5;
      box-shadow: 0 3px 2px rgba(15,23,42,.06), 0 10px 20px rgba(79,70,229,.15);
      flex-shrink: 0;
    }
    .section-card .section-text h2 { margin: 0 0 8px; font-size: 24px; font-weight: 800; letter-spacing: .3px; }
    .section-card .section-text p { margin: 0; color: var(--muted); font-size: 16px; line-height: 1.6; max-width: 90%; }
    .section-card .section-text p strong { color: var(--text); font-weight: 700; }

    .import-section { padding: var(--space-6) var(--space-7); }
    .import-area {
      border: 2px dashed #d1ddf0;
      background: var(--surface-2);
      border-radius: var(--radius-20);
      padding: 48px 40px;
      display: grid; gap: 24px; place-items: center; text-align: center;
      transition: all .28s ease;
      position: relative; min-height: 240px;
      max-width: 900px;
      margin: 0 auto;
    }
    /* soft pattern */
    .import-area::after {
      content: ""; position: absolute; inset: 10px; border-radius: inherit; pointer-events: none;
      background: radial-gradient(circle at 20% 30%, rgba(37,99,235,.05), transparent 40%),
                  radial-gradient(circle at 80% 70%, rgba(37,99,235,.04), transparent 45%);
      mask: linear-gradient(#000, transparent 85%);
    }
    .import-area:hover { border-color: var(--primary); background: #f8fbff; box-shadow: var(--shadow-3); transform: translateY(-3px); }
    .import-area.drag-active { border-color: var(--primary); background: #f8fbff; box-shadow: var(--shadow-3); transform: translateY(-3px); }
    .import-icon { 
      color: var(--primary); margin-bottom: 16px; 
      display: inline-flex; align-items: center; justify-content: center;
      width: 80px; height: 80px; border-radius: 20px;
      background: linear-gradient(180deg, #eef6ff, #dbeafe);
      border: 1px solid #e3e8f5; box-shadow: 0 8px 20px rgba(37,99,235,.2);
    }
    .import-icon i { font-size: 32px; }
    .import-text h3 { margin: 10px 0 8px; font-size: 22px; font-weight: 800; letter-spacing: .3px; }
    .import-text p { margin: 0; color: var(--muted); font-size: 16px; }
    .import-actions { display: inline-flex; gap: 24px; flex-wrap: wrap; margin-top: 24px; align-items: center; justify-content: center; }
    .browse-btn, .template-btn {
      display: inline-flex; align-items: center; justify-content: center; gap: 12px;
      padding: 16px 24px; border-radius: var(--radius-14); cursor: pointer;
      border: 1px solid var(--border); font-weight: 700; min-height: 56px;
      min-width: 180px; transition: all .28s ease;
      letter-spacing: 0.4px;
    }
    .browse-btn { 
      background: linear-gradient(180deg, #3b82f6, #2563eb); 
      color: #fff; 
      border-color: transparent; 
      box-shadow: 0 4px 8px rgba(37,99,235,.3);
      font-size: 16px;
    }
    .browse-btn:hover { 
      filter: brightness(1.08); 
      box-shadow: 0 12px 28px rgba(37,99,235,.25); 
      transform: translateY(-3px);
    }
    .browse-btn:active {
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(37,99,235,.25);
    }
    .template-btn { 
      background: #fff; 
      box-shadow: 0 3px 6px rgba(15,23,42,.1);
      font-size: 16px;
    }
    .template-btn:hover { 
      background: #f7faff; 
      border-color: var(--primary); 
      color: var(--primary); 
      box-shadow: 0 8px 20px rgba(37,99,235,.15);
      transform: translateY(-3px);
    }
    .template-btn:active {
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(15,23,42,.1);
    }
    .browse-btn i, .template-btn i {
      font-size: 18px;
    }
    .browse-btn:focus-visible, .template-btn:focus-visible { box-shadow: var(--focus); outline: none; }
    .import-hint { color: var(--muted); font-size: 14px; margin-top: 16px; font-weight: 500; }

    .data-preview { margin-top: 16px; display: block; }
    .preview-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px; }
    .preview-header h3 { margin: 0; font-size: 14px; font-weight: 800; }
    .data-count { color: var(--muted); font-size: 12px; }
    .data-table.modern { width: 100%; border-collapse: separate; border-spacing: 0; }
    .data-table.modern th, .data-table.modern td { padding: 10px 12px; border-bottom: 1px solid var(--border); text-align: left; }
    .data-table.modern thead th { background: var(--surface); color: var(--muted); font-size: 12px; font-weight: 800; position: sticky; top: 0; z-index: 1; }
    .data-table.modern tbody tr:nth-child(odd) { background: #fafbfd; }

    @media (max-width: 768px) {
      .section-card.import-warga-card { max-width: 100%; }
      .import-area { max-width: 100%; padding: 40px 32px; }
    }

    @media (max-width: 640px) {
      .section-card.import-warga-card { border-radius: var(--radius-12); }
      .section-card .section-header { padding: var(--space-4) var(--space-5); gap: 16px; }
      .section-card .section-icon { width: 48px; height: 48px; font-size: 18px; border-radius: 12px; }
      .section-card .section-text h2 { font-size: 20px; margin-bottom: 6px; }
      .section-card .section-text p { font-size: 14px; max-width: 100%; }
      
      .import-section { padding: var(--space-5); }
      .import-area { padding: 32px 24px; min-height: 180px; gap: 20px; }
      .import-icon { width: 60px; height: 60px; margin-bottom: 12px; }
      .import-icon i { font-size: 24px; }
      .import-text h3 { font-size: 20px; margin: 6px 0; }
      .import-text p { font-size: 14px; }
      
      .import-actions { display: grid; grid-template-columns: 1fr; gap: 16px; width: 100%; }
      .browse-btn, .template-btn { 
          padding: 14px 20px; 
          font-size: 15px; 
          width: 100%; 
          min-height: 52px;
          justify-content: center; 
      }
      .browse-btn i, .template-btn i { font-size: 15px; }
      .data-table.modern { font-size: 12px; }
      .import-hint { font-size: 12px; margin-top: 8px; }
    }
    
    @media (max-width: 480px) {
      .section-card .section-header { flex-direction: column; align-items: flex-start; text-align: center; }
      .section-card .section-icon { margin: 0 auto 8px; }
      .section-card .section-text { text-align: center; width: 100%; }
      .import-area { padding: 20px 12px; }
    }
  </style>

  <script>
    // @ts-nocheck
    // -----------------------------
    // State & Data
    // -----------------------------
    const STORAGE_KEY = 'warga_data_v1';
    const FILTER_KEY = 'warga_filters_v1';

    const state = {
      warga: [],
      filters: { q:'', rt:'', rw:'', status:'', verified:'' },
      editingId: null,
      charts: { rt:null, status:null },
      chartMap: new Map(), // id -> chart instance
      templates: [], // Letter templates
      editingTemplateId: null,
    };

    // Admin notification helper (safe wrapper around global KKNotif API)
    function addAdminNotif(type, title, message){
      try{
        const api = window && window.KKNotif;
        if(api && typeof api.add === 'function') api.add(type, title, message);
      }catch(_){/* noop */}
    }

    // Global Chart registry to avoid canvas reuse across navigations/rerenders
    ;(function initChartRegistry(){
      // plain JS (no TS casts in this file)
      (window as any)?.dashboardCharts; // keep potential tooling happy
      // ensure global map exists
      // @ts-ignore
      window.dashboardCharts = window.dashboardCharts || new Map();
    })();

    function destroyChartForCanvasId(id){
      try{
        const w = window;
        const canvas = document.getElementById(id);
        if(!canvas) return;
        // @ts-ignore
        const reg = w.dashboardCharts;
        const prev = reg && typeof reg.get === 'function' ? reg.get(id) : null;
        if(prev && typeof prev.destroy === 'function'){
          prev.destroy();
          reg.delete(id);
        }
        // Defensive: also destroy any chart bound to this canvas even if untracked
        // @ts-ignore
        if(w.Chart && typeof w.Chart.getChart === 'function'){
          // @ts-ignore
          const bound = w.Chart.getChart(canvas);
          if(bound && typeof bound.destroy === 'function'){
            bound.destroy();
          }
        }
      }catch{/* noop */}
    }

    function getCtxPrepared(id){
      destroyChartForCanvasId(id);
      const el = document.getElementById(id);
      // el might be null or not a canvas; getContext exists on canvas only
      // @ts-ignore
      return el && typeof el.getContext === 'function' ? el.getContext('2d') : null;
    }

    function seedIfEmpty(){
      const raw = localStorage.getItem(STORAGE_KEY);
      if(raw) return;
      const sample = [];
      const rts = ['01','02','03'];
      const rws = ['01','02'];
      const statuses = ['aktif','pindah','nonaktif'];
      const names = ['Budi','Siti','Andi','Dewi','Rudi','Ayu','Fajar','Nina','Doni','Maya'];
      let id=1;
      for(let i=0;i<40;i++){
        const rt = rts[Math.floor(Math.random()*rts.length)];
        const rw = rws[Math.floor(Math.random()*rws.length)];
        const status = Math.random()<0.75 ? 'aktif' : statuses[Math.floor(Math.random()*statuses.length)];
        const verified = Math.random()<0.6;
        const nama = names[Math.floor(Math.random()*names.length)] + ' ' + (['Santoso','Wibowo','Rahma','Putra','Sari'][Math.floor(Math.random()*5)]);
        sample.push({
          id: String(id++),
          nama,
          nik: String(3201000000000000 + Math.floor(Math.random()*1e6)),
          kk: String(3201000000000000 + Math.floor(Math.random()*1e6)),
          alamat: `Blok ${String.fromCharCode(65+Math.floor(Math.random()*6))} No. ${10+Math.floor(Math.random()*80)}`,
          rt, rw,
          no_rumah: String(10+Math.floor(Math.random()*90)),
          telepon: '08' + Math.floor(1000000000 + Math.random()*899999999),
          email: '',
          status, verified,
          tanggal_masuk: new Date(Date.now()-Math.floor(Math.random()*800)*86400000).toISOString().slice(0,10),
          tanggal_keluar: '',
          anggota_keluarga: [],
          documents: [],
          history: [{time:Date.now(), action:'seed', by:'system'}],
        });
      }
      localStorage.setItem(STORAGE_KEY, JSON.stringify(sample));
    }

    function load(){ seedIfEmpty(); state.warga = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]'); }
    function save(){ localStorage.setItem(STORAGE_KEY, JSON.stringify(state.warga)); }
    function restoreFilters(){ try{ Object.assign(state.filters, JSON.parse(localStorage.getItem(FILTER_KEY)||'{}')||{}); }catch(e){} }
    function persistFilters(){ localStorage.setItem(FILTER_KEY, JSON.stringify(state.filters)); }

    function filtered(){
      const f = state.filters;
      const q = f.q.trim().toLowerCase();
      let rows = state.warga.slice();
      if(q){ rows = rows.filter(r => [r.nama,r.nik,r.kk,r.alamat].some(x=>String(x).toLowerCase().includes(q))); }
      if(f.rt) rows = rows.filter(r => r.rt === f.rt);
      if(f.rw) rows = rows.filter(r => r.rw === f.rw);
      if(f.status) rows = rows.filter(r => r.status === f.status);
      if(f.verified!=='' ) rows = rows.filter(r => String(r.verified) === f.verified);
      return rows;
    }
    function formatRTRW(rt,rw){ return `${rt||'-'}/${rw||'-'}`; }
    function capitalize(s){ return (s||'').charAt(0).toUpperCase()+s.slice(1); }

    // -----------------------------
    // Modal: Add/Edit Warga
    // -----------------------------
    function openDialog(mode = 'add', data = null){
      try {
        const dlg = document.getElementById('dlg-warga');
        const form = document.getElementById('form-warga');
        const title = document.getElementById('dlg-title');
        if(!dlg || !form || !title) return;

        form.reset();
        form.classList.remove('was-validated');
        state.editingId = null;

        if(mode === 'edit' && data){
          title.textContent = 'Edit Warga';
          state.editingId = data.id;
          form.elements['nama'].value = data.nama || '';
          form.elements['nik'].value = data.nik || '';
          form.elements['kk'].value = data.kk || '';
          form.elements['alamat'].value = data.alamat || '';
          form.elements['rt'].value = data.rt || '';
          form.elements['rw'].value = data.rw || '';
          form.elements['no_rumah'].value = data.no_rumah || '';
          form.elements['telepon'].value = data.telepon || '';
          form.elements['status'].value = data.status || 'aktif';
          form.elements['email'].value = data.email || '';
        } else {
          title.textContent = 'Tambah Warga';
        }

        if(typeof dlg.showModal === 'function'){
          dlg.showModal();
        } else {
          dlg.setAttribute('open','');
        }
      } catch(e){ console.warn('openDialog failed', e); }
    }

    function serializeForm(form){
      const fd = new FormData(form);
      const obj = Object.fromEntries(fd.entries());
      return obj;
    }

    function validateForm(form){
      // Use native validation; add class for styling feedback if needed
      const ok = form.checkValidity();
      if(!ok){
        form.classList.add('was-validated');
      }
      return ok;
    }

    function submitForm(e){
      e.preventDefault();
      const form = document.getElementById('form-warga');
      if(!form) return;
      if(!validateForm(form)) return;

      const isUpdate = Boolean(state.editingId);
      const data = serializeForm(form);
      const now = Date.now();

      // Normalize fields
      const rec = {
        id: state.editingId || String(((state.warga?.length||0) ? Math.max(...state.warga.map(r=>Number(r.id)||0))+1 : 1)),
        nama: (data.nama||'').trim(),
        nik: (data.nik||'').trim(),
        kk: (data.kk||'').trim(),
        alamat: (data.alamat||'').trim(),
        rt: (data.rt||'').trim(),
        rw: (data.rw||'').trim(),
        no_rumah: (data.no_rumah||'').trim(),
        telepon: (data.telepon||'').trim(),
        email: (data.email||'').trim(),
        status: data.status || 'aktif',
        verified: false,
        tanggal_masuk: new Date().toISOString().slice(0,10),
        tanggal_keluar: '',
        anggota_keluarga: [],
        documents: [],
        history: [{ time: now, action: state.editingId ? 'update' : 'create', by: 'admin' }]
      };

      if(state.editingId){
        const idx = state.warga.findIndex(x=>String(x.id)===String(state.editingId));
        if(idx>=0){
          // Preserve existing fields not present in form
          const existing = state.warga[idx];
          state.warga[idx] = { ...existing, ...rec, id: existing.id, history: (existing.history||[]).concat(rec.history) };
        }
      } else {
        state.warga.push(rec);
      }

      save();
      renderTable();
      if(window.Chart){ renderCharts(); }

      // Send admin notification and dispatch event for new registrations
      if(!isUpdate){
        addAdminNotif('info', 'Pendaftaran Warga Baru', `Warga ${rec.nama || '-'} berhasil didaftarkan.`);
        
        // Dispatch custom event for real-time notification
        window.dispatchEvent(new CustomEvent('kk-new-resident', {
          detail: {
            name: rec.nama,
            id: rec.id,
            address: rec.alamat,
            rt: rec.rt,
            rw: rec.rw,
            time: new Date().toISOString()
          }
        }));
      }

      // Close dialog and reset
      try {
        form.classList.remove('was-validated');
        const dlg = document.getElementById('dlg-warga');
        dlg?.close?.();
      } catch(_){}
    }

    // -----------------------------
    // Table & KPI
    // -----------------------------
    function renderTable(){
      const tbody = document.querySelector('#tbl-warga tbody');
      const mobileCards = document.getElementById('mobile-cards');
      tbody.innerHTML = '';
      mobileCards.innerHTML = '';
      const rows = filtered();

      if(rows.length===0){
        // Empty table
        const tr = document.createElement('tr');
        const td = document.createElement('td');
        td.colSpan=8; td.className='muted'; td.textContent='Tidak ada data';
        tr.appendChild(td);
        tbody.appendChild(tr);
        
        // Empty mobile cards
        mobileCards.innerHTML = '<div class="mobile-card"><div class="mobile-card-value muted">Tidak ada data</div></div>';
      } else {
        rows.forEach((r, index)=>{
          // Table row
          const tr = document.createElement('tr');
          tr.style.setProperty('--row-index', index);
          tr.innerHTML = `
            <td>${r.nama}</td>
            <td>${r.nik}</td>
            <td>${r.kk}</td>
            <td>${r.alamat}</td>
            <td>${formatRTRW(r.rt,r.rw)}</td>
            <td><span class="badge ${r.status}">${capitalize(r.status)}</span></td>
            <td>${r.verified?'<span class="badge ok"><i class="fas fa-check"></i> Terverifikasi</span>':'<span class="badge warn"><i class="fas fa-exclamation"></i> Belum</span>'}</td>
            <td><a class="btn small" href="/admin/kelola-warga?id=${encodeURIComponent(r.id)}"><i class="fas fa-edit"></i> Kelola</a></td>`;
          tbody.appendChild(tr);
          
          // Mobile card
          const card = document.createElement('div');
          card.className = 'mobile-card';
          card.innerHTML = `
            <div class="mobile-card-header">
              <div class="mobile-card-name">${r.nama}</div>
              <div class="mobile-card-status">
                <span class="badge ${r.status}">${capitalize(r.status)}</span>
                ${r.verified?'<span class="badge ok"><i class="fas fa-check"></i></span>':'<span class="badge warn"><i class="fas fa-exclamation"></i></span>'}
              </div>
            </div>
            <div class="mobile-card-details">
              <div class="mobile-card-detail">
                <div class="mobile-card-label">NIK</div>
                <div class="mobile-card-value">${r.nik}</div>
              </div>
              <div class="mobile-card-detail">
                <div class="mobile-card-label">No. KK</div>
                <div class="mobile-card-value">${r.kk}</div>
              </div>
              <div class="mobile-card-detail">
                <div class="mobile-card-label">Alamat</div>
                <div class="mobile-card-value">${r.alamat}</div>
              </div>
              <div class="mobile-card-detail">
                <div class="mobile-card-label">RT/RW</div>
                <div class="mobile-card-value">${formatRTRW(r.rt,r.rw)}</div>
              </div>
            </div>
            <div class="mobile-card-actions">
              <a class="btn small" href="/admin/kelola-warga?id=${encodeURIComponent(r.id)}">
                <i class="fas fa-edit"></i> Kelola
              </a>
            </div>
          `;
          mobileCards.appendChild(card);
        });
      }

      const aktif = state.warga.filter(x=>x.status==='aktif').length;
      const kk = new Set(state.warga.map(x=>x.kk)).size;
      const ver = state.warga.filter(x=>x.verified).length;
      document.getElementById('kpi-aktif').textContent = aktif;
      document.getElementById('kpi-kk').textContent = kk;
      document.getElementById('kpi-verified').textContent = ver;
      document.getElementById('kpi-unverified').textContent = state.warga.length - ver;
    }

    // -----------------------------
    // Charts
    // -----------------------------
    function ensureChartJs(then){
      function calibrate(){
        if(!window.Chart) return;
        Chart.defaults.font.family = 'ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial, sans-serif';
        Chart.defaults.color = '#64748b';
        Chart.defaults.plugins.legend.labels.usePointStyle = true;
        Chart.defaults.plugins.legend.labels.boxWidth = 10;
      }
      if(window.Chart){ calibrate(); then(); return; }
      const s = document.createElement('script');
      s.src='https://cdn.jsdelivr.net/npm/chart.js';
      s.onload=()=>{ calibrate(); then(); };
      document.head.appendChild(s);
      
      // Load Real-time Chart Update System
      const realtimeScript = document.createElement('script');
      realtimeScript.type = 'module';
      realtimeScript.src = '/src/utils/chart-realtime.js';
      document.head.appendChild(realtimeScript);
      
      // Load Shared State Management
      const sharedStateScript = document.createElement('script');
      sharedStateScript.type = 'module';
      sharedStateScript.src = '/src/utils/shared-state.js';
      document.head.appendChild(sharedStateScript);
    }

    function renderCharts(){
      const rows = filtered();

      // Distribusi RT/RW
      const byRTRW = {};
      rows.forEach(r=>{ const k = `${r.rt}/${r.rw}`; byRTRW[k]=(byRTRW[k]||0)+1; });
      const labels1 = Object.keys(byRTRW);
      const data1 = Object.values(byRTRW);

      // Status & Verifikasi
      const byStatus = { aktif:0, pindah:0, nonaktif:0 };
      const byVer = { ver:0, nver:0 };
      rows.forEach(r=>{ byStatus[r.status]=(byStatus[r.status]||0)+1; r.verified?byVer.ver++:byVer.nver++; });

      // Bar RT/RW
      const ctx1 = getCtxPrepared('chart-rt');
      state.charts.rt && state.charts.rt.destroy();
      state.charts.rt = new Chart(ctx1, {
        type:'bar',
        data:{ labels:labels1, datasets:[{ label:'Jumlah', data:data1, backgroundColor:'#60a5fa', borderRadius: 8, maxBarThickness: 32 }] },
        options:{
          responsive:true, maintainAspectRatio:false,
          scales: {
            x: { grid: { display:false }, ticks: { color:'#475569' } },
            y: { grid: { color:'#eef2f7' }, ticks: { stepSize: 1, precision:0, color:'#475569' } }
          },
          plugins:{ legend:{ display:false } },
          layout: { padding: 8 }
        }
      });
      state.chartMap.set('chart-rt', state.charts.rt);
      // @ts-ignore
      window.dashboardCharts.set('chart-rt', state.charts.rt);

      // Doughnut Status & Verifikasi
      const ctx2 = getCtxPrepared('chart-status');
      state.charts.status && state.charts.status.destroy();
      state.charts.status = new Chart(ctx2, {
        type:'doughnut',
        data:{
          labels:['Aktif','Pindah','Nonaktif','Verifikasi','Belum'],
          datasets:[{ data:[byStatus.aktif,byStatus.pindah,byStatus.nonaktif,byVer.ver,byVer.nver], backgroundColor:['#22c55e','#f59e0b','#94a3b8','#10b981','#ef4444'], borderWidth: 0 }]
        },
        options:{ cutout:'56%', plugins:{ legend:{ position:'bottom' } }, layout: { padding: 8 }, responsive:true, maintainAspectRatio:false }
      });
      state.chartMap.set('chart-status', state.charts.status);
      // @ts-ignore
      window.dashboardCharts.set('chart-status', state.charts.status);
    }

    /**
     * Initialize Real-time Chart Updates untuk Warga
     */
    function initRealTimeCharts() {
      // Pastikan ChartUpdateManager tersedia
      if (!window.chartUpdateManager) {
        console.warn('[Warga] ChartUpdateManager not available, skipping real-time updates');
        return;
      }

      // Data fetcher untuk chart updates
      async function fetchChartData() {
        try {
          // Baca data dari localStorage
          const localData = localStorage.getItem('warga_data');
          if (localData) {
            const warga = JSON.parse(localData);
            if (Array.isArray(warga) && warga.length > 0) {
              const rows = warga;
              
              // Distribusi RT/RW
              const byRTRW = {};
              rows.forEach(r=>{ const k = `${r.rt}/${r.rw}`; byRTRW[k]=(byRTRW[k]||0)+1; });
              const labels1 = Object.keys(byRTRW).sort();
              const data1 = labels1.map(k=>byRTRW[k]);

              // Status & Verifikasi
              const byStatus = { aktif:0, pindah:0, nonaktif:0 };
              const byVer = { ver:0, nver:0 };
              rows.forEach(r=>{ byStatus[r.status]=(byStatus[r.status]||0)+1; r.verified?byVer.ver++:byVer.nver++; });

              return {
                rtRwData: { labels: labels1, data: data1 },
                statusData: { 
                  labels: ['Aktif','Pindah','Nonaktif','Verifikasi','Belum'],
                  data: [byStatus.aktif,byStatus.pindah,byStatus.nonaktif,byVer.ver,byVer.nver]
                }
              };
            }
          }
        } catch (error) {
          console.warn('[Warga] Failed to fetch chart data:', error);
        }

        // Return default data jika gagal
        return {
          rtRwData: { 
            labels: ['RT 01', 'RT 02', 'RT 03', 'RT 04'], 
            data: [15, 12, 18, 10] 
          },
          statusData: { 
            labels: ['Aktif','Pindah','Nonaktif','Verifikasi','Belum'],
            data: [45, 5, 2, 40, 12]
          }
        };
      }

      // Update function untuk RT/RW Chart
      function updateRTRWChart(newData) {
        const chart = state.charts.rt;
        if (!chart) return;

        chart.data.labels = newData.rtRwData.labels;
        chart.data.datasets[0].data = newData.rtRwData.data;
        chart.update('active');
      }

      // Update function untuk Status Chart
      function updateStatusChart(newData) {
        const chart = state.charts.status;
        if (!chart) return;

        chart.data.labels = newData.statusData.labels;
        chart.data.datasets[0].data = newData.statusData.data;
        chart.update('active');
      }

      // Register semua chart untuk auto-update
      const charts = [
        { id: 'chart-rt', instance: state.charts.rt, updateFn: updateRTRWChart },
        { id: 'chart-status', instance: state.charts.status, updateFn: updateStatusChart }
      ];

      charts.forEach(({ id, instance, updateFn }) => {
        if (instance) {
          window.chartUpdateManager.registerChart(
            id,
            instance,
            fetchChartData,
            updateFn
          );
          console.log(`[Warga] Registered ${id} for real-time updates`);
        }
      });

      // Set update frequency ke 30 detik
      window.chartUpdateManager.setUpdateFrequency(30000);

      // Listen untuk perubahan data dari halaman lain
      window.addEventListener('storage', (e) => {
        if (e.key === 'warga_data') {
          console.log('[Warga] Detected data change, updating charts...');
          window.chartUpdateManager.updateAllCharts();
        }
      });

      // Listen untuk custom events
      window.addEventListener('chart-data-updated', () => {
        console.log('[Warga] Received chart-data-updated event');
        window.chartUpdateManager.updateAllCharts();
      });

      console.log('[Warga] Real-time chart updates initialized');
    }

    // Chart actions: download + fullscreen
    function bindChartActions(){
      document.querySelectorAll('.chart-card .action-button').forEach(btn=>{
        if(btn.dataset.bound) return;
        btn.dataset.bound='1';
        btn.addEventListener('click', async ()=>{
          const action = btn.dataset.action;
          if(action==='download'){
            const targetId = btn.dataset.target;
            const chart = state.chartMap.get(targetId);
            if(chart?.canvas){
              const link = document.createElement('a');
              link.href = chart.canvas.toDataURL('image/png');
              link.download = `${targetId || 'chart'}.png`;
              link.click();
            }
          } else if(action==='fullscreen'){
            const card = btn.closest('.chart-card');
            if(!document.fullscreenElement){
              card?.scrollIntoView({ behavior: 'smooth', block: 'center' });
              await new Promise(r=>setTimeout(r,150));
              if(card?.requestFullscreen) await card.requestFullscreen();
            } else {
              await document.exitFullscreen();
            }
          }
        });
      });

      // Resize charts on window resize
      let t;
      window.addEventListener('resize', ()=>{
        clearTimeout(t);
        t = setTimeout(()=>{
          state.chartMap.forEach(ch => ch?.resize && ch.resize());
        }, 120);
      });
    }

    // -----------------------------
    // Export
    // -----------------------------
    function exportCSV(){
      const rows = filtered();
      const headers = ['id','nama','nik','kk','alamat','rt','rw','no_rumah','telepon','email','status','verified','tanggal_masuk','tanggal_keluar'];
      const lines = [headers.join(',')].concat(rows.map(r=>headers.map(h=>`"${String(r[h]??'').replace(/"/g,'""')}"`).join(',')));
      const blob = new Blob(["\uFEFF"+lines.join('\n')], {type:'text/csv;charset=utf-8;'});
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'data-warga.csv';
      a.click();
    }

    // -----------------------------
    // Import Data Warga (Excel)
    // -----------------------------
    async function fetchWithFallback(path, options = {}){
      try {
        const res = await fetch(path, options);
        if (res.status !== 404) return res;
      } catch(_){}
      const directUrl = path.startsWith('/api') ? `http://127.0.0.1:8000${path}` : path;
      return fetch(directUrl, options);
    }

    function preventDefaults(e){ e.preventDefault(); e.stopPropagation(); }

    function handleWargaDrop(e){
      e.preventDefault();
      const dt = e.dataTransfer;
      const files = dt?.files || [];
      if(files.length>0){
        const wargaInput = document.getElementById('excelWarga');
        // Cache last dropped files for quick re-use
        try { window.lastWargaFiles = files; } catch(_) { /* noop */ }
        if(wargaInput){ wargaInput.files = files; handleWargaFile({ target:{ files } }); }
      }
    }

    async function handleWargaFile(e){
      const file = e.target?.files?.[0];
      // Cache last picked files so 'Ganti Baru' can immediately re-apply the latest drop/select
      if(e?.target?.files){ try { window.lastWargaFiles = e.target.files; } catch(_) { /* noop */ } }
      if(!file) return;
      if(!/\.(xlsx|xls)$/i.test(file.name||'')){
        showImportError('Format File Salah', [
          'File harus berformat .xlsx atau .xls.',
          'Silakan gunakan template resmi melalui tombol Download Template.'
        ]);
        return;
      }
      if(file.size > 5*1024*1024){
        showImportError('Ukuran File Terlalu Besar', [
          'Ukuran file maksimum 5MB.',
          'Kurangi isi atau kompresi workbook Anda lalu coba lagi.'
        ]);
        return;
      }
      try{
        const fd = new FormData();
        fd.append('file', file);
        const res = await fetchWithFallback('/api/import/warga/preview', { method:'POST', body: fd, credentials:'include' });
        const payload = await res.json().catch(()=>({ status:'error', message:'Response tidak valid' }));
        if(!res.ok){ 
          showImportError('Gagal Memproses File', [ payload?.message || 'Terjadi kesalahan pada server saat memproses file.' ]);
          return; 
        }
        const { status, data, errors, summary } = payload || {};
        const serverOk = status === 'ok';

        // Client-side validation to enforce exact template
        const rows = Array.isArray(data) ? data : [];
        const v = validateWargaRows(rows);

        if(!serverOk || !v.ok){
          const allErrors = ([]).concat(errors||[], v.errors||[]);
          const maxShow = 12;
          const show = allErrors.slice(0, maxShow);
          if(allErrors.length>maxShow) show.push(`Dan ${allErrors.length-maxShow} isu lainnya...`);
          showImportError('Validasi Gagal', [
            'Pastikan file mengikuti template resmi: Kolom (Nama, NIK, Telepon, Alamat, Blok, NoRumah).',
            ...(show.length ? show : ['Format header tidak sesuai atau data kosong.'])
          ]);
          console.warn('Validasi import warga:', allErrors);
          return; // stop, do not render preview for invalid file
        }

        // All good, render preview
        renderWargaData(rows);
        // File preview generated successfully
      }catch(err){
        console.error('Import error', err);
        showImportError('Kesalahan Sistem', ['Terjadi kesalahan saat mengunggah/validasi file. Coba lagi beberapa saat.']);
      }
    }

    // Enforce warga template: Nama, NIK, Telepon, Alamat, Blok, NoRumah
    function validateWargaRows(rows){
      const result = { ok: true, errors: [] };
      const required = ['Nama','NIK','Telepon','Alamat','Blok','NoRumah'];
      if(!Array.isArray(rows) || rows.length===0){
        result.ok = false; result.errors.push('File kosong atau tidak terbaca.');
        return result;
      }
      // header check: ensure every row has required keys (tolerate extra cols)
      const hasAllKeys = rows.every(r => r && required.every(k => Object.prototype.hasOwnProperty.call(r, k)));
      if(!hasAllKeys){
        result.ok = false;
        result.errors.push('Header kolom tidak sesuai. Wajib: Nama, NIK, Telepon, Alamat, Blok, NoRumah');
        return result;
      }
      // row-wise checks
      const nikRe = /^\d{8,20}$/;
      const telRe = /^[+]?\d[\d\s\-()]{6,}$/; // permissive but numeric
      rows.forEach((r, idx)=>{
        const row = idx+1;
        if(!String(r.Nama||'').trim()) result.errors.push(`Baris ${row}: Nama wajib diisi`);
        if(!nikRe.test(String(r.NIK||'').trim())) result.errors.push(`Baris ${row}: NIK harus angka (8-20 digit)`);
        if(!String(r.Alamat||'').trim()) result.errors.push(`Baris ${row}: Alamat wajib diisi`);
        if(!String(r.Blok||'').trim()) result.errors.push(`Baris ${row}: Blok wajib diisi`);
        if(!String(r.NoRumah||'').trim()) result.errors.push(`Baris ${row}: NoRumah wajib diisi`);
        const tel = String(r.Telepon||'').trim();
        if(tel && !telRe.test(tel)) result.errors.push(`Baris ${row}: Telepon tidak valid`);
      });
      if(result.errors.length){ result.ok = false; }
      return result;
    }

    function renderWargaData(rows){
      const preview = document.getElementById('wargaPreview');
      const tbody = document.querySelector('#wargaTable tbody');
      const count = document.getElementById('wargaCount');
      if(!preview || !tbody) return;
      tbody.innerHTML = '';
      (rows||[]).forEach((r,i)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${i+1}</td>
          <td>${r?.Nama ?? ''}</td>
          <td>${r?.NIK ?? ''}</td>
          <td>${r?.Telepon ?? ''}</td>
          <td>${r?.Alamat ?? ''}</td>
          <td>${r?.Blok ?? ''}</td>
          <td>${r?.NoRumah ?? ''}</td>`;
        tbody.appendChild(tr);
      });
      if(count) count.textContent = `${rows?.length||0} data`;
      preview.style.display = 'block';
      // Hide drop area while preview is shown
      const drop = document.getElementById('wargaDropArea');
      if(drop){
        if(!drop.dataset.prevDisplay){
          try { drop.dataset.prevDisplay = getComputedStyle(drop).display || ''; } catch(_) {}
        }
        drop.style.display = 'none';
      }
      // Inject actions (Ganti Data, Batal)
      injectWargaPreviewActions();
    }

    async function downloadWargaTemplate(){
      try{
        const res = await fetchWithFallback('/api/templates/warga', { credentials:'include' });
        if(!res.ok){ throw new Error('Gagal menyiapkan template'); }
        const blob = await res.blob();
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = 'template-warga.xlsx';
        a.click();
      }catch(err){
        console.error(err);
        showImportError('Gagal Mengunduh Template', ['Tidak dapat mengunduh template warga saat ini. Coba lagi nanti.']);
      }
    }

    function setupWargaImport(){
      const drop = document.getElementById('wargaDropArea');
      const input = document.getElementById('excelWarga');
      const browseBtn = drop?.querySelector('.browse-btn');
      const templateBtn = document.getElementById('downloadTemplateWarga');
      if(drop && !drop.dataset.prevDisplay){
        try { drop.dataset.prevDisplay = getComputedStyle(drop).display || ''; } catch(_) {}
      }
      if(browseBtn && input){ browseBtn.addEventListener('click', (e)=>{ e.stopPropagation(); input.click(); }); }
      if(drop && input){
        drop.addEventListener('click', ()=> input.click());
        ['dragenter','dragover','dragleave','drop'].forEach(ev=> drop.addEventListener(ev, preventDefaults, false));
        ['dragenter','dragover'].forEach(ev=> drop.addEventListener(ev, ()=> drop.classList.add('drag-active'), false));
        ['dragleave','drop'].forEach(ev=> drop.addEventListener(ev, ()=> drop.classList.remove('drag-active'), false));
        drop.addEventListener('drop', handleWargaDrop, false);
      }
      if(input){ input.addEventListener('change', handleWargaFile); }
      if(templateBtn){ templateBtn.addEventListener('click', (e)=>{ e.stopPropagation(); downloadWargaTemplate(); }); }
    }

    function resetWargaImport(){
      const preview = document.getElementById('wargaPreview');
      const tbody = document.querySelector('#wargaTable tbody');
      const count = document.getElementById('wargaCount');
      const input = document.getElementById('excelWarga');
      const drop = document.getElementById('wargaDropArea');
      if(tbody) tbody.innerHTML = '';
      if(count) count.textContent = '0 data';
      if(preview) preview.style.display = 'none';
      if(input) input.value = '';
      if(drop){ drop.style.display = drop.dataset.prevDisplay || ''; }
    }

    function injectWargaPreviewActions(){
      const preview = document.getElementById('wargaPreview');
      if(!preview) return;
      // Find or create actions container inside preview header
      let header = preview.querySelector('.preview-header');
      if(!header){ header = document.createElement('div'); header.className = 'preview-header'; preview.prepend(header); }
      let actions = header.querySelector('.preview-actions');
      if(!actions){ actions = document.createElement('div'); actions.className = 'preview-actions'; header.appendChild(actions); }
      
      // Clear existing actions to avoid duplicates
      actions.innerHTML = '';

      // Build buttons if not present
      if(!actions.querySelector('#btnWargaChange')){
        const btnChange = document.createElement('button');
        btnChange.type = 'button';
        btnChange.id = 'btnWargaChange';
        btnChange.className = 'action-button is-success';
        btnChange.setAttribute('aria-label', 'Ganti file import warga (unggah baru)');
        btnChange.innerHTML = '<i class="fas fa-rotate"></i><span>Ganti&nbsp;Baru</span>';
        // Hard inline styles to defeat external overrides
        btnChange.style.marginRight = '20px';
        btnChange.style.whiteSpace = 'nowrap';
        btnChange.style.display = 'inline-flex';
        btnChange.style.alignItems = 'center';
        btnChange.style.justifyContent = 'center';
        btnChange.addEventListener('click', ()=>{
          const input = document.getElementById('excelWarga');
          const cached = (typeof window !== 'undefined' && window.lastWargaFiles) ? window.lastWargaFiles : null;
          if(cached && cached.length){
            if(input) input.files = cached;
            handleWargaFile({ target: { files: cached } });
          } else {
            input?.click();
          }
        });
        actions.appendChild(btnChange);
        // Insert spacer to guarantee visible separation
        if(!actions.querySelector('#btnWargaSpacer')){
          const gap = document.createElement('span');
          gap.id = 'btnWargaSpacer';
          gap.className = 'actions-gap';
          gap.style.display = 'inline-block';
          gap.style.width = '20px';
          actions.appendChild(gap);
        }
      }
      if(!actions.querySelector('#btnWargaCancel')){
        const btnCancel = document.createElement('button');
        btnCancel.type = 'button';
        btnCancel.id = 'btnWargaCancel';
        btnCancel.className = 'action-button is-danger';
        btnCancel.setAttribute('aria-label', 'Batalkan preview import (hapus)');
        btnCancel.innerHTML = '<i class="fas fa-xmark"></i><span>Batal</span>';
        // Hard inline styles
        btnCancel.style.whiteSpace = 'nowrap';
        btnCancel.style.display = 'inline-flex';
        btnCancel.style.alignItems = 'center';
        btnCancel.style.justifyContent = 'center';
        btnCancel.addEventListener('click', resetWargaImport);
        actions.appendChild(btnCancel);
      }
      // Add Save button
      const btnSave = document.createElement('button');
      btnSave.type = 'button';
      btnSave.id = 'btnWargaSave';
      btnSave.className = 'action-button is-primary';
      btnSave.setAttribute('aria-label', 'Simpan data warga');
      btnSave.innerHTML = '<i class="fas fa-save"></i><span>Simpan</span>';
      // Hard inline styles
      btnSave.style.whiteSpace = 'nowrap';
      btnSave.style.display = 'inline-flex';
      btnSave.style.alignItems = 'center';
      btnSave.style.justifyContent = 'center';
      btnSave.style.marginRight = '20px';
      btnSave.addEventListener('click', async () => {
        try {
          const previewTable = document.querySelector('#wargaTable tbody');
          const rows = Array.from(previewTable.querySelectorAll('tr')).map(row => ({
            Nama: row.cells[1]?.textContent || '',
            NIK: row.cells[2]?.textContent || '',
            Telepon: row.cells[3]?.textContent || '',
            Alamat: row.cells[4]?.textContent || '',
            Blok: row.cells[5]?.textContent || '',
            NoRumah: row.cells[6]?.textContent || ''
          }));
          
          // Add each resident to the state
          rows.forEach(resident => {
            state.warga.push({
              id: 'warga-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),
              name: resident.Nama,
              nik: resident.NIK,
              phone: resident.Telepon,
              address: resident.Alamat,
              rt: '',
              rw: '',
              blok: resident.Blok,
              no_rumah: resident.NoRumah,
              status: 'aktif',
              verified: false,
              created_at: new Date().toISOString()
            });
            
            // Dispatch event for each imported resident
            window.dispatchEvent(new CustomEvent('kk-new-resident', { 
              detail: { 
                name: resident.Nama,
                nik: resident.NIK,
                address: resident.Alamat,
                blok: resident.Blok,
                no_rumah: resident.NoRumah
              } 
            }));
          });
          
          // Save to local storage
          save();
          renderTable();
          if(window.Chart) { renderCharts(); }
          
          // Reset import UI
          resetWargaImport();
          
          // Show success message
          alert(`Berhasil mengimpor ${rows.length} data warga`);
          
        } catch (error) {
          console.error('Error saving imported data:', error);
          showImportError('Gagal Menyimpan Data', ['Terjadi kesalahan saat menyimpan data. Silakan coba lagi.']);
        }
      });
      actions.insertBefore(btnSave, actions.firstChild);
      
      // Ensure container also declares spacing inline
      actions.style.gap = '20px';
      actions.style.whiteSpace = 'nowrap';
    }

    // -----------------------------
    // Template Surat Management
    // -----------------------------
    async function loadTemplates() {
      try {
        const { safeFetch } = await import('/src/utils/fetch-wrapper.ts');
        const response = await safeFetch('/api/letter-templates?admin=true');
        const result = await response.json();
        
        if (result.status === 'success') {
          state.templates = result.data;
          renderTemplates();
        } else {
          console.error('Failed to load templates:', result.message);
          addAdminNotif('error', 'Gagal Memuat Template', result.message || 'Terjadi kesalahan saat memuat template surat');
        }
      } catch (error) {
        console.error('Error loading templates:', error);
        addAdminNotif('error', 'Gagal Memuat Template', 'Tidak dapat terhubung ke server');
      }
    }

    function renderTemplates() {
      const grid = document.getElementById('templateGrid');
      if (!grid) return;

      // Update stats
      updateTemplateStats();

      if (state.templates.length === 0) {
        grid.innerHTML = `
          <div class="template-empty-state">
            <div class="template-empty-icon">
              <i class="fas fa-file-plus"></i>
            </div>
            <h4 class="template-empty-title">Belum Ada Template</h4>
            <p class="template-empty-desc">Klik "Tambah Template" untuk menambahkan template surat pertama yang dapat digunakan oleh warga.</p>
            <button id="btn-add-template-empty" class="btn primary">
              <i class="fas fa-plus"></i>
              <span>Tambah Template Pertama</span>
            </button>
          </div>
        `;
        
        // Add event listener for empty state button
        const emptyBtn = document.getElementById('btn-add-template-empty');
        if (emptyBtn) {
          emptyBtn.addEventListener('click', () => {
            document.getElementById('btn-add-template').click();
          });
        }
        return;
      }

      grid.innerHTML = state.templates.map(template => `
        <div class="template-card">
          <div class="template-card-header">
            <div class="template-icon ${template.type || ''}">
              <i class="fas fa-file-${getFileIcon(template.file_type)}"></i>
            </div>
            <div class="template-info">
              <h4>${template.name || 'Template'}</h4>
              <div class="template-type">${template.type || 'umum'}</div>
            </div>
          </div>
          
          <div class="template-description">
            ${template.description || 'Tidak ada deskripsi'}
          </div>
          
          <div class="template-meta">
            <div class="template-meta-item">
              <i class="fas fa-download"></i>
              <span>${Number(template.download_count || 0)} download</span>
            </div>
            <div class="template-meta-item">
              <i class="fas fa-file"></i>
              <span>${formatFileSize(template.file_size)}</span>
            </div>
          </div>
          
          <div class="template-actions-card">
            <button class="btn download" onclick="downloadTemplate(${template.id})">
              <i class="fas fa-download"></i> Download
            </button>
            <button class="btn edit" onclick="editTemplate(${template.id})">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button class="btn delete" onclick="deleteTemplate(${template.id})">
              <i class="fas fa-trash"></i> Hapus
            </button>
          </div>
        </div>
      `).join('');
    }
    
    function updateTemplateStats() {
      const totalTemplates = state.templates.length;
      const activeTemplates = state.templates.filter(t => t.is_active || t.active).length;
      const totalDownloads = state.templates.reduce((sum, t) => sum + Number(t.download_count || 0), 0);
      
      const totalEl = document.getElementById('totalTemplates');
      const activeEl = document.getElementById('activeTemplates');
      const downloadsEl = document.getElementById('totalDownloads');
      
      if (totalEl) totalEl.textContent = totalTemplates;
      if (activeEl) activeEl.textContent = activeTemplates;
      if (downloadsEl) downloadsEl.textContent = totalDownloads;
    }

    function getFileIcon(fileType) {
      const ft = String(fileType || '').toLowerCase();
      if (ft.includes('pdf')) return 'pdf';
      if (ft.includes('word') || ft.includes('doc') || ft.includes('document')) return 'word';
      return 'alt';
    }

    function formatFileSize(bytes) {
      const units = ['B', 'KB', 'MB', 'GB'];
      let size = Number(bytes || 0);
      let unitIndex = 0;
      
      while (size >= 1024 && unitIndex < units.length - 1) {
        size /= 1024;
        unitIndex++;
      }
      
      return `${size.toFixed(1)} ${units[unitIndex]}`;
    }

    async function downloadTemplate(id) {
      try {
        const response = await fetch(`/api/letter-templates/${id}/download`);
        
        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `template_${id}.pdf`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
          
          // Refresh templates to update download count
          loadTemplates();
        } else {
          const result = await response.json();
          addAdminNotif('error', 'Gagal Download', result.message || 'Gagal mengunduh template');
        }
      } catch (error) {
        console.error('Download error:', error);
        addAdminNotif('error', 'Gagal Download', 'Tidak dapat mengunduh template');
      }

    }

    function editTemplate(id) {
      const template = state.templates.find(t => t.id === id);
      if (!template) return;

      openTemplateDialog('edit', template);
    }

    // Lightweight confirm dialog (custom popup)
    function confirmDelete(message = 'Anda yakin ingin menghapus template ini?') {
      return new Promise(resolve => {
        const wrap = document.createElement('div');
        wrap.className = 'kk-confirm-overlay';
        wrap.innerHTML = `
          <div class="kk-confirm-dialog" role="dialog" aria-modal="true">
            <div class="kk-confirm-header">
              <h3>Konfirmasi</h3>
              <button class="kk-confirm-close" aria-label="Tutup">&times;</button>
            </div>
            <div class="kk-confirm-body">${message}</div>
            <div class="kk-confirm-actions">
              <button class="btn" data-act="cancel">Batal</button>
              <button class="btn danger" data-act="ok">Hapus</button>
            </div>
          </div>`;
        const style = document.createElement('style');
        style.textContent = `
          .kk-confirm-overlay{position:fixed;inset:0;background:rgba(15,23,42,.4);display:grid;place-items:center;z-index:1000}
          .kk-confirm-dialog{width:min(420px,calc(100% - 32px));background:#fff;border-radius:14px;box-shadow:0 20px 50px rgba(2,6,23,.25);overflow:hidden;animation:kk-pop .2s ease-out}
          .kk-confirm-header{display:flex;justify-content:space-between;align-items:center;padding:14px 16px;border-bottom:1px solid #e6eef7}
          .kk-confirm-header h3{margin:0;font-weight:800;color:#0f172a;font-size:1.05rem}
          .kk-confirm-close{background:transparent;border:0;font-size:20px;cursor:pointer;color:#64748b}
          .kk-confirm-body{padding:16px;color:#334155;font-weight:600}
          .kk-confirm-actions{display:flex;gap:8px;justify-content:flex-end;padding:12px 16px;background:#f8fafc;border-top:1px solid #e6eef7}
          .kk-confirm-actions .btn{display:inline-flex;align-items:center;gap:8px;height:36px;padding:0 14px;border-radius:10px;border:1px solid #e6eef7;background:#f7fbff;color:#0d3f66;font-weight:800}
          .kk-confirm-actions .btn.danger{background:#fff1f1;color:#e11d48;border-color:#fecaca}
          @keyframes kk-pop{from{transform:translateY(8px);opacity:0}to{transform:none;opacity:1}}
        `;
        document.body.appendChild(style);
        document.body.appendChild(wrap);
        function cleanup(v){ try{ document.body.removeChild(wrap); document.body.removeChild(style);}catch{} resolve(v); }
        wrap.addEventListener('click', (e)=>{
          const t = e.target as HTMLElement;
          if (t.classList.contains('kk-confirm-overlay') || t.classList.contains('kk-confirm-close') || t.dataset.act==='cancel') cleanup(false);
          if (t.dataset && t.dataset.act==='ok') cleanup(true);
        });
      });
    }

    async function deleteTemplate(id) {
      // Ask confirmation via custom popup
      const ok = await confirmDelete('Anda yakin ingin menghapus template ini?');
      if (!ok) return;

      try {
        const { safeFetch } = await import('/src/utils/fetch-wrapper.ts');
        const response = await safeFetch(`/api/letter-templates/${id}`, { method: 'DELETE' });
        
        const result = await response.json();
        
        if (result.status === 'success') {
          addAdminNotif('success', 'Template Dihapus', 'Template surat berhasil dihapus');
          loadTemplates();
        } else {
          addAdminNotif('error', 'Gagal Hapus', result.message || 'Gagal menghapus template');
        }
      } catch (error) {
        console.error('Delete error:', error);
        addAdminNotif('error', 'Gagal Hapus', 'Tidak dapat menghapus template');
      }
    }

    // Expose functions for inline onclick handlers (must be in script scope)
    try {
      // @ts-ignore
      window.editTemplate = editTemplate;
      // @ts-ignore
      window.deleteTemplate = deleteTemplate;
      // @ts-ignore
      window.downloadTemplate = downloadTemplate;
    } catch(_) { /* noop */ }

    function openTemplateDialog(mode = 'add', data = null) {
      const dlg = document.getElementById('dlg-template');
      const form = document.getElementById('form-template');
      const title = document.getElementById('dlg-template-title');
      
      if (!dlg || !form || !title) return;

      form.reset();
      form.classList.remove('was-validated');
      state.editingTemplateId = null;

      if (mode === 'edit' && data) {
        title.textContent = 'Edit Template Surat';
        state.editingTemplateId = data.id;
        form.elements['name'].value = data.name || '';
        form.elements['type'].value = data.type || '';
        form.elements['description'].value = data.description || '';
      } else {
        title.textContent = 'Tambah Template Surat';
      }

      if (typeof dlg.showModal === 'function') {
        dlg.showModal();
      } else {
        dlg.setAttribute('open', '');
      }
    }

    async function submitTemplateForm(e) {
      e.preventDefault();
      const form = document.getElementById('form-template');
      if (!form) return;

      if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return;
      }

      const formData = new FormData(form);
      
      try {
        const { safeFetch } = await import('/src/utils/fetch-wrapper.ts');
        const url = state.editingTemplateId 
          ? `/api/letter-templates/${state.editingTemplateId}`
          : '/api/letter-templates';
        
        const method = state.editingTemplateId ? 'PUT' : 'POST';
        
        const response = await safeFetch(url, { method, body: formData });
        
        const result = await response.json();
        
        if (result.status === 'success') {
          const message = state.editingTemplateId 
            ? 'Template surat berhasil diperbarui'
            : 'Template surat berhasil ditambahkan';
          
          addAdminNotif('success', 'Berhasil', message);
          loadTemplates();
          
          // Close dialog
          form.classList.remove('was-validated');
          const dlg = document.getElementById('dlg-template');
          dlg?.close?.();
        } else if (response.status === 409 && result.existing_template) {
          // Show replacement option for new templates only
          if (!state.editingTemplateId) {
            showTemplateReplacementDialog(result.existing_template, formData);
          } else {
            addAdminNotif('error', 'Gagal', result.message || 'Terjadi kesalahan');
          }
        } else {
          addAdminNotif('error', 'Gagal', result.message || 'Terjadi kesalahan');
        }
      } catch (error) {
        console.error('Submit error:', error);
        addAdminNotif('error', 'Gagal', 'Tidak dapat menyimpan template');
      }
    }
    
    function showTemplateReplacementDialog(existingTemplate, formData) {
      const dialog = document.createElement('div');
      dialog.className = 'template-replacement-dialog';
      dialog.innerHTML = `
        <div class="dialog-overlay">
          <div class="dialog-content">
            <div class="dialog-header">
              <h3>Template Sudah Ada</h3>
              <button class="dialog-close" onclick="this.closest('.template-replacement-dialog').remove()">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="dialog-body">
              <p>Template dengan jenis "<strong>${existingTemplate.type}</strong>" sudah ada:</p>
              <div class="existing-template-info">
                <div class="template-preview">
                  <div class="template-icon ${existingTemplate.type}">
                    <i class="fas fa-file-alt"></i>
                  </div>
                  <div class="template-details">
                    <h4>${existingTemplate.name}</h4>
                    <span class="template-type">${existingTemplate.type}</span>
                  </div>
                </div>
              </div>
              <p>Apakah Anda ingin mengganti template yang sudah ada?</p>
            </div>
            <div class="dialog-actions">
              <button class="btn" onclick="this.closest('.template-replacement-dialog').remove()">
                Batal
              </button>
              <button class="btn primary" onclick="replaceTemplate(${existingTemplate.id}, this.closest('.template-replacement-dialog'))">
                <i class="fas fa-exchange-alt"></i>
                Ganti Template
              </button>
            </div>
          </div>
        </div>
      `;
      
      document.body.appendChild(dialog);
      
      // Store formData for replacement
      dialog.formData = formData;
    }
    
    async function replaceTemplate(existingId, dialog) {
      const formData = dialog.formData;
      formData.append('replace_existing', 'true');
      
      try {
        const { safeFetch } = await import('/src/utils/fetch-wrapper.ts');
        const response = await safeFetch('/api/letter-templates/replace', { method: 'POST', body: formData });
        
        const result = await response.json();
        
        if (result.status === 'success') {
          addAdminNotif('success', 'Berhasil', result.message);
          document.getElementById('form-template').reset();
          document.getElementById('dlg-template').close();
          loadTemplates();
        } else {
          addAdminNotif('error', 'Gagal', result.message || 'Terjadi kesalahan');
        }
      } catch (error) {
        console.error('Error replacing template:', error);
        addAdminNotif('error', 'Gagal', 'Tidak dapat mengganti template');
      } finally {
        dialog.remove();
      }
    }

    // -----------------------------
    // Bindings
    // -----------------------------
    function bind(){
      document.getElementById('btn-add').addEventListener('click', ()=> openDialog('add'));
      document.getElementById('form-warga').addEventListener('submit', submitForm);
      document.getElementById('form-warga').addEventListener('reset', ()=> {
        const dlg=document.getElementById('dlg-warga');
        document.getElementById('form-warga').classList.remove('was-validated');
        dlg.close();
      });
      document.querySelector('#dlg-warga .icon-btn')?.addEventListener('click', ()=> {
        const form=document.getElementById('form-warga');
        form.classList.remove('was-validated');
        document.getElementById('dlg-warga').close();
      });

      document.getElementById('btn-export').addEventListener('click', exportCSV);

      // Template surat bindings
      document.getElementById('btn-add-template').addEventListener('click', ()=> openTemplateDialog('add'));
      document.getElementById('btn-refresh-templates').addEventListener('click', loadTemplates);
      document.getElementById('form-template').addEventListener('submit', submitTemplateForm);
      document.getElementById('form-template').addEventListener('reset', ()=> {
        const dlg = document.getElementById('dlg-template');
        document.getElementById('form-template').classList.remove('was-validated');
        dlg?.close?.();
      });
      document.querySelector('#dlg-template .icon-btn')?.addEventListener('click', ()=> {
        const form = document.getElementById('form-template');
        form.classList.remove('was-validated');
        document.getElementById('dlg-template').close();
      });

      const fs = ['q','f-rt','f-rw','f-status','f-verified'];
      fs.forEach(id=>{
        document.getElementById(id).addEventListener('input', ()=>{
          state.filters.q = document.getElementById('q').value.trim();
          state.filters.rt = document.getElementById('f-rt').value.trim();
          state.filters.rw = document.getElementById('f-rw').value.trim();
          state.filters.status = document.getElementById('f-status').value;
          state.filters.verified = document.getElementById('f-verified').value;
          persistFilters();
          renderTable();
          renderCharts();
        }, { passive: true });
      });

      document.getElementById('btn-reset').addEventListener('click', ()=>{
        state.filters = { q:'', rt:'', rw:'', status:'', verified:'' };
        persistFilters();
        ['q','f-rt','f-rw','f-status','f-verified'].forEach(id=> document.getElementById(id).value='');
        renderTable();
        renderCharts();
      });
    }

    function hydrateFiltersUI(){
      document.getElementById('q').value = state.filters.q||'';
      document.getElementById('f-rt').value = state.filters.rt||'';
      document.getElementById('f-rw').value = state.filters.rw||'';
      document.getElementById('f-status').value = state.filters.status||'';
      document.getElementById('f-verified').value = state.filters.verified||'';
    }

    function init(){
      load();
      restoreFilters();
      hydrateFiltersUI();
      renderTable();
      ensureChartJs(()=> {
        renderCharts();
        bindChartActions();
        // Initialize real-time chart updates setelah chart dibuat
        setTimeout(() => {
          initRealTimeCharts();
        }, 1000);
      });
      bind();
      handleResponsiveView();
      // Initialize Warga import section
      setupWargaImport();
      // Import error modal bindings
      const dlg = document.getElementById('dlg-import-error');
      const closeBtn = document.getElementById('dlg-import-error-close');
      const okBtn = document.getElementById('dlg-import-error-ok');
      [closeBtn, okBtn].forEach(btn=> btn?.addEventListener('click', ()=> dlg?.close()));
      
      // Load letter templates
      loadTemplates();
    }
    
    // Handle responsive view switching
    function handleResponsiveView() {
      const table = document.querySelector('.table-container');
      const mobileCards = document.getElementById('mobile-cards');
      
      function updateView() {
        if (window.innerWidth <= 640) {
          // Mobile view - show cards, hide table
          if (table) table.style.display = 'none';
          if (mobileCards) mobileCards.style.display = 'block';
        } else {
          // Desktop view - show table, hide cards
          if (table) table.style.display = 'block';
          if (mobileCards) mobileCards.style.display = 'none';
        }
      }
      
      // Initial view
      updateView();
      
      // Update on resize
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(updateView, 100);
      });
    }
    function showImportError(title, messages){
      const dlg = document.getElementById('dlg-import-error');
      const t = document.getElementById('dlg-import-error-title');
      const sum = document.getElementById('dlg-import-error-summary');
      const list = document.getElementById('dlg-import-error-list');
      if(t) t.textContent = title || 'Kesalahan Import';
      if(sum) sum.textContent = '';
      if(list){
        list.innerHTML = '';
        (messages||[]).forEach(msg=>{
          const li = document.createElement('li'); li.textContent = String(msg); list.appendChild(li);
        });
      }
      if(dlg && !dlg.open){ dlg.showModal?.(); }
    }

    document.addEventListener('DOMContentLoaded', init);
  </script>
</Layout>