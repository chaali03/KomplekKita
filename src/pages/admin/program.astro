---
import Layout from "~/layouts/admin-layout.astro";
import AdminSidebar from "../../components/Admin-site/admin-sidebar.astro";
import AdminTopbar from "../../components/Admin-site/admin-topbar.astro";
// Complex branding to show in admin UI
const complexName = 'Komplek Anggrek Asri';
const complexImage = 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=100&h=100&fit=crop&crop=center';
---

<Layout>
  <AdminSidebar slot="sidebar" complexName={complexName} complexImage={complexImage} />
  <AdminTopbar slot="topbar" complexName={complexName} complexImage={complexImage} />

  <!-- UI Program & Informasi (Improved, no hover & no gradients) -->

<section class="parent-filter">
  <div class="title-wrap">
    <h1>Tambahkan Program</h1>
    <div class="horizontal-line" aria-hidden="true"></div>
  </div>

  <div class="input-container" data-card>
    <div class="form-grid">
      <div class="input-group">
        <label for="nominal-program">Nominal</label>
        <input id="nominal-program" type="number" placeholder="Nominal" class="input-field" inputmode="numeric" />
      </div>

      <div class="input-group">
        <label for="desc-program">Deskripsi</label>
        <input id="desc-program" type="text" placeholder="Desc" class="input-field" />
      </div>

      <div class="input-group full">
        <label for="info-program">Informasi Lanjut</label>
        <input id="info-program" type="text" placeholder="Informasi Lanjut" class="input-field" />
      </div>

      <div class="input-group">
        <label for="deadline-program">Masukan Deadline Program</label>
        <input id="deadline-program" type="date" placeholder="Masukan deadline waktu" class="input-field" />
      </div>

      <div class="input-group">
        <label for="phone-program">No HP (opsional)</label>
        <input id="phone-program" type="tel" placeholder="Contoh: 0812xxxxxxx" class="input-field" />
      </div>

      <div class="input-group">
        <label for="rekening-program">No Rekening (opsional)</label>
        <input id="rekening-program" type="text" placeholder="Contoh: 1234567890 (BNI)" class="input-field" />
      </div>

      <div class="input-group">
        <label for="image-program">Gambar (opsional)</label>
        <input id="image-program" type="file" accept="image/png,image/jpeg,image/webp,image/svg+xml" class="input-field" />
        <small style="color:#64748b">Maks 2MB, akan di-resize maksimal 800×800 px. Format: PNG, JPG, WEBP, SVG.</small>
      </div>

      <div class="input-group full">
        <label for="link-type">Alamat Link (WA atau QRIS) - Wajib</label>
        <select id="link-type" class="input-field" aria-label="Pilih jenis alamat link">
          <option value="">Pilih jenis link</option>
          <option value="wa">WhatsApp</option>
          <option value="qris">QRIS</option>
        </select>
        <input id="link-url" type="url" class="input-field" placeholder="Masukkan tautan sesuai pilihan" />
      </div>
    </div>

    <div class="actions">
      <button class="input-button" id="btn-add-program" aria-label="Input Program">Input</button>
    </div>
  </div>
</section>

<section class="parent-filter">
  <div class="title-wrap">
    <h1>Daftar Data Program</h1>
    <div class="horizontal-line" aria-hidden="true"></div>
  </div>

  <div class="input-container list-container" id="program-list" data-card>
    <div class="empty-state" role="status">Belum ada program. Tambahkan dari formulir di atas.</div>
    <div class="garis"><div class="horizontal-line" aria-hidden="true"></div></div>
  </div>
</section>

<!-- Modal Edit/Create Program -->
<div class="pm-modal" id="program-modal" aria-hidden="true">
  <div class="pm-modal__overlay" data-close></div>
  <div class="pm-modal__content" role="dialog" aria-modal="true" aria-labelledby="pm-title">
    <div class="pm-modal__header">
      <h3 id="pm-title">Edit Program</h3>
      <button class="pm-btn icon" data-close aria-label="Tutup">✕</button>
    </div>
    <form id="pm-form" class="pm-form">
      <input type="hidden" id="pm-id" />
      <div class="pm-grid">
        <label class="pm-field">
          <span>Deskripsi</span>
          <input id="pm-desc" type="text" class="input-field" placeholder="Deskripsi" />
        </label>
        <label class="pm-field">
          <span>Nominal</span>
          <input id="pm-nominal" type="number" class="input-field" placeholder="Nominal" inputmode="numeric" />
        </label>
        <label class="pm-field full">
          <span>Informasi Lanjut</span>
          <input id="pm-info" type="text" class="input-field" placeholder="Informasi Lanjut" />
        </label>
        <label class="pm-field">
          <span>Deadline</span>
          <input id="pm-deadline" type="date" class="input-field" />
        </label>
        <label class="pm-field">
          <span>No HP (opsional)</span>
          <input id="pm-phone" type="tel" class="input-field" placeholder="Contoh: 0812xxxxxxx" />
        </label>
        <label class="pm-field">
          <span>No Rekening (opsional)</span>
          <input id="pm-rek" type="text" class="input-field" placeholder="Contoh: 1234567890 (BNI)" />
        </label>

        <label class="pm-field">
          <span>Gambar (opsional)</span>
          <input id="pm-image" type="file" accept="image/png,image/jpeg,image/webp,image/svg+xml" class="input-field" />
          <small style="color:#64748b">Maks 2MB, akan di-resize maksimal 800×800 px. Format: PNG, JPG, WEBP, SVG.</small>
        </label>
        <label class="pm-field full">
          <span>Alamat Link (WA atau QRIS) - Wajib</span>
          <select id="pm-link-type" class="input-field" aria-label="Pilih jenis alamat link">
            <option value="">Pilih jenis link</option>
            <option value="wa">WhatsApp</option>
            <option value="qris">QRIS</option>
          </select>
          <input id="pm-link-url" type="url" class="input-field" placeholder="Masukkan tautan sesuai pilihan" />
        </label>
      </div>
      <div class="pm-actions">
        <button type="button" class="input-button light" data-close>Batal</button>
        <button type="submit" class="input-button">Simpan</button>
      </div>
    </form>
  </div>
  </div>

<!-- Confirm Delete -->
<div class="pm-modal" id="program-confirm" aria-hidden="true">
  <div class="pm-modal__overlay" data-close></div>
  <div class="pm-modal__content" role="dialog" aria-modal="true" aria-labelledby="pc-title">
    <div class="pm-modal__header">
      <h3 id="pc-title">Hapus Program?</h3>
      <button class="pm-btn icon" data-close aria-label="Tutup">✕</button>
    </div>
    <p>Data yang dihapus tidak dapat dikembalikan.</p>
    <div class="pm-actions">
      <button type="button" class="input-button light" data-close>Batal</button>
      <button type="button" class="input-button danger" id="pc-delete">Hapus</button>
    </div>
  </div>
</div>

<!-- Image Viewer Modal -->
<div class="pm-modal" id="program-image-modal" aria-hidden="true">
  <div class="pm-modal__overlay" data-close></div>
  <div class="pm-modal__content img-viewer" role="dialog" aria-modal="true" aria-labelledby="pimg-title">
    <div class="pm-modal__header">
      <h3 id="pimg-title">Gambar Program</h3>
      <button class="pm-btn icon" data-close aria-label="Tutup">✕</button>
    </div>
    <div class="img-wrap">
      <img id="pimg-src" alt="Gambar Program" />
    </div>
    <div class="pm-actions">
      <button type="button" class="input-button light" data-close>Tutup</button>
    </div>
  </div>
  </div>

<!-- Informasi sections removed as requested -->

<style>
  :root{
    --primary:#085895;
    --primary-600:#0a6bb2;
    --primary-700:#064a7c;
    --input-padding: 0.75rem 1rem;
    --border-radius: 12px;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --bg:#f6f8fb;
    --card:#ffffff;
    --surface:#eef3fb;
    --text:#24303f;
    --muted:#7a869a;
    --ring:#9cc9ff;
    --danger:#e74c3c;
    --success:#1aa36f;
    --shadow-lg:0 20px 40px rgba(8,88,149,0.10);
    --shadow-md:0 10px 24px rgba(8,88,149,0.08);
    --shadow-sm:0 6px 16px rgba(8,88,149,0.06);
    --radius:14px;
    --highlight:#eaf3ff;
    --line:#dbe7f6;
  }
  *{ box-sizing:border-box }
  html,body{
    margin:0;
    padding:0;
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
    color:var(--text);
    background: var(--bg);
    line-height:1.6;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Section wrapper */
  .parent-filter{
    margin: 1.5rem auto;
    width: 100%;
    max-width: 1200px;
    padding: 0 1rem;
    box-sizing: border-box;
    animation: sectionIn 520ms cubic-bezier(.2,.8,.25,1) both;
  }
  
  @media (min-width: 768px) {
    .parent-filter {
      padding: 0 2rem;
      margin: 2rem auto;
    }
  }

  .title-wrap {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .title-wrap h1 {
    font-size: 1.5rem;
    margin: 0;
    color: #1e293b;
    font-weight: 700;
    line-height: 1.2;
  }

  @media (min-width: 640px) {
    .title-wrap {
      flex-direction: row;
      align-items: center;
      gap: 1rem;
    }
    
    .title-wrap h1 {
      font-size: 1.75rem;
    }
  }

  .parent-filter h1{
    margin:0;
    font-size: clamp(1.18rem, 2.2vw, 1.55rem);
    font-weight: 800;
    color: var(--primary);
    letter-spacing:.2px;
  }
  
  @media (max-width: 480px) {
    .title-wrap {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
      margin-bottom: 10px;
    }
    
    .parent-filter h1 {
      font-size: 1.1rem;
      letter-spacing: 0.1px;
    }
  }

  .horizontal-line {
    width: 3rem;
    height: 0.25rem;
    background: var(--primary);
    border-radius: 9999px;
    animation: growLine 900ms cubic-bezier(0.2, 0.8, 0.2, 1) both;
  }

  @media (min-width: 640px) {
    .horizontal-line {
      width: 4.5rem;
      height: 0.25rem;
    }
  }

  /* Card */
  .input-container {
    background: #fff;
    padding: 1.5rem;
    border-radius: 1rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    position: relative;
    margin-bottom: 2rem;
    animation: cardIn 480ms cubic-bezier(0.2, 0.8, 0.2, 1) both;
  }

  @media (min-width: 768px) {
    .input-container {
      padding: 2rem;
    }
  }
  .input-container[data-card]::after{
    /* subtle top edge indicator, no gradient */
    content:"";
    position:absolute;
    inset:auto 12px 0 12px;
    height: 3px;
    background: var(--line);
    border-radius: 8px 8px 12px 12px;
    opacity:.6;
  }

  /* Grid form layout */
  .form-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  @media (min-width: 640px) {
    .form-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.25rem;
    }
  }
  .input-group{
    display:flex;
    flex-direction:column;
    gap:8px;
    animation: fieldIn 500ms cubic-bezier(.2,.8,.2,1) both;
  }
  .input-group:nth-child(1){ animation-delay: 30ms; }
  .input-group:nth-child(2){ animation-delay: 60ms; }
  .input-group:nth-child(3){ animation-delay: 90ms; }
  .input-group:nth-child(4){ animation-delay: 120ms; }
  .input-group.full{ grid-column: 1 / -1; }

  @media (min-width: 720px){
    .form-grid{
      grid-template-columns: repeat(2, 1fr);
      gap: 16px 18px;
    }
  }
  
  @media (max-width: 480px) {
    .form-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }
    .input-container label {
      font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }
    .input-field {
      padding: 0.6rem;
      font-size: 0.95rem;
      border-radius: 8px;
    }
    .input-button {
      height: 38px;
      padding: 0 12px;
      font-size: 0.9rem;
      border-radius: 8px;
    }
    .actions {
      gap: 0.5rem;
      flex-wrap: wrap;
    }
  }

  .input-container label{
    color: #0d3f66;
    font-weight:700;
    font-size:.95rem;
    letter-spacing:.2px;
  }

  /* Input fields */
  .input-field {
    width: 100%;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    border: 1px solid #e2e8f0;
    background: #fff;
    font-size: 1rem;
    color: #1e293b;
    outline: none;
    transition: all 0.2s ease;
    box-sizing: border-box;
  }

  /* Left arrow for select fields */
  select.input-field{
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='14' viewBox='0 0 20 20' fill='none'%3E%3Cpath d='M6.293 9.293a1 1 0 011.414 0L10 11.586l2.293-2.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z' fill='%23677A8E'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: 12px center;
    background-size: 14px 14px;
    padding-left: 2rem; /* space for left arrow */
    padding-right: 1rem;
    direction: ltr; /* keep text LTR */
  }

  .input-field:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(10, 91, 178, 0.1);
  }

  @media (max-width: 640px) {
    .input-field {
      padding: 0.65rem 0.9rem;
      font-size: 0.9375rem;
    }
  }
  .input-field::placeholder{ color:#a9b6c6; }

  .input-field:focus{
    border-color: var(--primary);
    background:#fff;
    box-shadow: 0 0 0 4px rgba(8,88,149,0.12);
    transform: translateY(-1px);
    animation: focusPulse 700ms ease-out 1;
  }
  input[type="date"].input-field{ color-scheme: light; }

  /* Remove spinner number */
  input[type=number].input-field::-webkit-outer-spin-button,
  input[type=number].input-field::-webkit-inner-spin-button{ -webkit-appearance: none; margin: 0; }
  input[type=number].input-field{ -moz-appearance: textfield; }

  /* Actions / buttons */
  .actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  @media (max-width: 640px) {
    .actions {
      flex-direction: column;
      width: 100%;
    }
    
    .actions .input-button {
      width: 100%;
    }
  }

  .input-button {
    position: relative;
    overflow: hidden;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.75rem;
    background: var(--primary);
    color: #fff;
    font-weight: 600;
    font-size: 0.9375rem;
    letter-spacing: 0.3px;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
  }

  .input-button:hover {
    background: var(--primary-600);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .input-button:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  @media (min-width: 480px) {
    .input-button {
      width: auto;
      padding: 0.75rem 2rem;
    }
  }
  .input-button:hover,
  .input-button:focus-visible{
    box-shadow: 0 12px 28px rgba(8,88,149,0.16);
  }
  .input-button:active{
    transform: translateY(1px) scale(.995);
    box-shadow: var(--shadow-sm);
  }
  .input-button[disabled]{
    opacity:.6;
    cursor:not-allowed;
  }

  /* List styles */
  .list-container{
    gap:12px;
    display:flex;
    flex-direction:column;
  }

  .program-item{
    display:grid;
    grid-template-columns: 1fr auto auto;
    align-items:center;
    gap:12px;
    background:#fff;
    padding: 14px 16px;
    border-radius: 12px;
    border-left: 4px solid #cfe0f2;
    border: 1px solid #e9eef6;
    box-shadow: 0 2px 10px rgba(0,0,0,0.04);
    transition: transform .12s ease, box-shadow .2s ease, border-color .2s ease, background .2s ease, opacity .18s ease, filter .18s ease;
    animation: itemIn 420ms cubic-bezier(.2,.8,.2,1) both;
  }
  .program-item:hover{
    box-shadow: 0 14px 34px rgba(8,88,149,0.12);
    transform: translateY(-1px);
    border-color:#d6e6f7;
  }
  .program-item.added{
    animation: itemAdded 1200ms ease-out both;
  }
  .program-item.closing{
    animation: itemOut 220ms ease-in forwards;
  }

  .nama-program{
    display:flex;
    flex-wrap:wrap;
    align-items:center;
    gap:8px 10px;
    font-size: 1rem;
    color:#2d3a4a;
    font-weight: 700;
  }

  /* Thumbnail for program image */
  .program-thumb{
    width: 44px;
    height: 44px;
    object-fit: cover;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    box-shadow: 0 1px 2px rgba(0,0,0,0.04);
    cursor: zoom-in;
    background:#f8fafc;
  }

  .chip{
    display:inline-flex;
    align-items:center;
    gap:6px;
    padding: 6px 10px;
    border-radius: 999px;
    background: #f1f7ff;
    border: 1px solid #dbe9f8;
    color: #0a5fb3;
    font-size: .83rem;
    font-weight: 700;
    letter-spacing:.2px;
    line-height:1;
  }

  .tanggal-program{
    font-size: .85rem;
    color: #0a5fb3;
    background: #eef5ff;
    border: 1px solid #d9e7f8;
    padding: 6px 10px;
    border-radius: 999px;
    letter-spacing:.2px;
    white-space:nowrap;
    font-weight:700;
  }

  .close-icon{
    position: relative;
    overflow:hidden;
    width: 36px;
    height: 36px;
    display:grid;
    place-items:center;
    font-size: 1.35rem;
    color: var(--primary);
    background: #eef5fd;
    border: 1px solid #d6e6f7;
    border-radius: 10px;
    cursor: pointer;
    transition: transform .12s ease, background .2s ease, color .2s ease, box-shadow .2s ease, border-color .2s ease;
    user-select: none;
    line-height: 1;
  }
  .close-icon:active{
    transform: translateY(1px) scale(.98);
  }

  .garis{
    text-align:center;
    margin-top: 10px;
  }

  /* Empty state */
  .empty-state{
    padding: 22px;
    text-align:center;
    color: var(--muted);
    background: #f6f9ff;
    border: 1px dashed #cfe0f2;
    border-radius: 12px;
    font-weight:600;
    animation: emptyIn 380ms ease-out both;
  }

  /* Animations (no hover, no gradients) */
  @keyframes sectionIn{
    from{ opacity:0; transform: translateY(8px) }
    to{ opacity:1; transform: translateY(0) }
  }
  @keyframes cardIn{
    from{ opacity:0; transform: translateY(6px) scale(.99) }
    to{ opacity:1; transform: translateY(0) scale(1) }
  }
  @keyframes fieldIn{
    from{ opacity:0; transform: translateY(6px) }
    to{ opacity:1; transform: translateY(0) }
  }
  @keyframes focusPulse{
    0%{ box-shadow: 0 0 0 0 rgba(8,88,149,0.12) }
    60%{ box-shadow: 0 0 0 6px rgba(8,88,149,0.10) }
    100%{ box-shadow: 0 0 0 4px rgba(8,88,149,0.12) }
  }
  @keyframes itemIn{
    0%{ opacity:0; transform: translateY(6px) }
    100%{ opacity:1; transform: translateY(0) }
  }
  @keyframes itemOut{
    to{ opacity:0; transform: translateY(4px) scale(.98); filter: blur(.2px) }
  }
  @keyframes itemAdded{
    0%{ background: var(--highlight) }
    100%{ background: #fff }
  }
  @keyframes growLine{
    from{ transform: scaleX(0); transform-origin:left }
    to{ transform: scaleX(1); transform-origin:left }
  }
  @keyframes emptyIn{
    from{ opacity:0 }
    to{ opacity:1 }
  }

  /* A11y + reduce motion */
  :focus-visible{ outline: 3px solid rgba(8,88,149,.35); outline-offset: 2px; border-radius: 10px; }
  @media (prefers-reduced-motion: reduce){
    *{ animation: none !important; transition: none !important; }
  }

  /* Program modal styles */
  .pm-modal{ position: fixed; inset: 0; z-index: 50; display: none; }
  .pm-modal.show{ display: block; }
  .pm-modal__overlay{ position:absolute; inset:0; background: rgba(17,27,39,.44); }
  .pm-modal__content{
    position: absolute; left:50%; top: 14%; transform: translateX(-50%);
    width: min(720px, 94vw);
    background: #fff; border-radius: 16px; border: 1px solid #e6eef7;
    box-shadow: var(--shadow-lg);
    padding: 16px; color: var(--text);
  }
  @media (max-width: 480px) {
    .pm-modal__content {
      padding: 12px;
      border-radius: 12px;
      width: min(720px, 96vw);
    }
    .pm-modal__header {
      margin-bottom: 8px;
    }
    .pm-modal__header h3 {
      font-size: 1.1rem;
    }
    .pm-form .pm-field {
      margin-bottom: 8px;
      gap: 4px;
    }
    .pm-form .pm-field span {
      font-size: 0.9rem;
    }
    .pm-actions {
      gap: 8px;
      margin-top: 10px;
    }
  }
  @media (max-width: 480px) {
    .pm-modal__content {
      padding: 12px;
      border-radius: 12px;
      width: min(720px, 96vw);
    }
    .pm-modal__header {
      margin-bottom: 8px;
    }
    .pm-modal__header h3 {
      font-size: 1.1rem;
    }
    .pm-form .pm-field {
      margin-bottom: 8px;
      gap: 4px;
    }
    .pm-form .pm-field span {
      font-size: 0.9rem;
    }
    .pm-actions {
      gap: 8px;
      margin-top: 10px;
    }
  }
  .pm-modal__header{ display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom: 10px; }
  .pm-form .pm-grid{ display:grid; grid-template-columns: 1fr; gap: 12px; }
  .pm-form .pm-field{ display:flex; flex-direction:column; gap:6px; }
  .pm-form .pm-field.full{ grid-column: 1 / -1; }
  @media (min-width:720px){ .pm-form .pm-grid{ grid-template-columns: repeat(2, 1fr); } }
  .pm-actions{ display:flex; justify-content:flex-end; gap:10px; margin-top: 12px; }
  .pm-btn.icon{ width:36px; height:36px; border:none; border-radius:10px; background:#eef5fd; color:var(--primary); cursor:pointer; }
  .input-button.light{ background:#eef5fd; color: var(--primary); }
  .input-button.danger{ background: #ffe8e6; color: #b42318; border: 1px solid #f7c6c2; }
  .input-button.secondary{ background:#eaf3ff; color:#0a6bb2; border:1px solid #cfe0f2; }
  .input-button.sm{ height: 32px; padding: 0 12px; border-radius: 10px; font-weight: 800; }
  .input-button.secondary:hover{ background:#e3f0ff; }
  .input-button.light:hover{ background:#e7f0fb; }
  .input-button.danger:hover{ background:#ffe2df; }

  /* Image viewer modal */
  .pm-modal__content.img-viewer{ width: min(860px, 96vw); }
  .pm-modal__content.img-viewer .img-wrap{ display:grid; place-items:center; padding:8px; }
  .pm-modal__content.img-viewer img{ max-width:100%; max-height: 70vh; border-radius:12px; border:1px solid #e2e8f0; box-shadow: var(--shadow-md); background:#fff; }
</style>

<!-- Global styles for dynamically injected elements -->
<style is:global>
  .program-item{
    display:grid; grid-template-columns: 1fr auto auto; align-items:center; gap:12px;
    background:#fff; padding: 14px 16px; border-radius: 12px;
    border-left: 4px solid #cfe0f2; border: 1px solid #e9eef6;
    box-shadow: 0 2px 10px rgba(0,0,0,0.04);
  }
  .nama-program{ display:flex; flex-wrap:wrap; align-items:center; gap:8px 10px; font-size: 1rem; color:#2d3a4a; font-weight:700; }
  .chip{ display:inline-flex; align-items:center; gap:6px; padding: 6px 10px; border-radius: 999px; background: #f1f7ff; border: 1px solid #dbe9f8; color: #0a5fb3; font-size:.83rem; font-weight:700; letter-spacing:.2px; line-height:1; }
  .tanggal-program{ font-size:.85rem; color:#0a5fb3; background:#eef5ff; border:1px solid #d9e7f8; padding:6px 10px; border-radius:999px; letter-spacing:.2px; white-space:nowrap; font-weight:700; }
  .program-actions{ display:flex; align-items:center; gap:8px; }
  .input-button{ position: relative; overflow: hidden; padding: 12px 26px !important; border: 1px solid transparent !important; border-radius: 12px !important; background: var(--primary) !important; color: #eaf4ff !important; font-weight: 800 !important; letter-spacing:.3px; cursor: pointer; box-shadow: var(--shadow-md) !important; }
  .input-button.light{ background:#eef5fd !important; color: var(--primary) !important; border: 1px solid #d6e6f7 !important; }
  .input-button.secondary{ background:#eaf3ff !important; color:#0a6bb2 !important; border:1px solid #cfe0f2 !important; }
  .input-button.danger{ background: #ffe8e6 !important; color: #b42318 !important; border: 1px solid #f7c6c2 !important; }
  .input-button.sm{ height: 32px !important; padding: 0 12px !important; border-radius: 10px !important; font-weight: 800 !important; }
  @media (max-width: 720px){ .program-item{ grid-template-columns: 1fr; gap:8px; align-items:start; } }
  
  @media (max-width: 480px) {
    .program-item {
      padding: 0.75rem;
      gap: 0.4rem;
      border-radius: 10px;
    }
    .nama-program {
      font-size: 0.95rem;
      line-height: 1.3;
    }
    .chip {
      height: 28px;
      padding: 0 10px;
      font-size: 0.8rem;
      border-radius: 6px;
    }
    .tanggal-program {
      font-size: 0.8rem;
    }
    .program-actions {
      gap: 0.4rem;
    }
    .program-thumb{ width: 36px; height: 36px; border-radius:6px; }
    .input-button.sm {
      height: 32px;
      min-width: auto;
      padding: 0 10px !important;
      font-size: 0.8rem;
      border-radius: 6px;
    }
    .close-icon {
      width: 28px;
      height: 28px;
      font-size: 0.9rem;
    }
  }
</style>

<script>
  // @ts-nocheck
  // Utilities
  const $ = (sel: string, root: Document | HTMLElement = document) => root.querySelector(sel) as HTMLElement;
  const $$ = (sel: string, root: Document | HTMLElement = document) => [...root.querySelectorAll(sel)] as HTMLElement[];

  const programListEl = $('#program-list');
  const modal = $('#program-modal');
  const modalForm = $('#pm-form');
  const modalTitle = $('#pm-title');
  const pmId = $('#pm-id');
  const pmDesc = $('#pm-desc');
  const pmNominal = $('#pm-nominal');
  const pmInfo = $('#pm-info');
  const pmDeadline = $('#pm-deadline');
  const pmPhone = $('#pm-phone');
  const pmRek = $('#pm-rek');
  const pmLinkType = $('#pm-link-type');
  const pmLinkUrl = $('#pm-link-url');
  const imageInput = $('#image-program');
  const pmImage = $('#pm-image');
  const confirmModal = $('#program-confirm');
  const confirmDeleteBtn = $('#pc-delete');
  const imgModal = $('#program-image-modal');
  const imgModalImg = $('#pimg-src');

  // Live auto-detect when typing URL (moved from <style> to <script>)
  $('#link-url')?.addEventListener('input', (e) => {
    const val = (e.target?.value || '').trim();
    const t = detectLinkType(val);
    if (t) {
      const sel = $('#link-type') as HTMLSelectElement | null;
      if (sel) sel.value = t;
    }
  });
  pmLinkUrl?.addEventListener('input', (e) => {
    const val = (e.target?.value || '').trim();
    const t = detectLinkType(val);
    if (t && pmLinkType) (pmLinkType as HTMLSelectElement).value = t as any;
  });

  // API Functions
  const API_BASE = '/api/demo';
  
  async function loadPrograms() {
    try {
      const response = await fetch(`${API_BASE}/programs`);
      const result = await response.json();
      if (result.status === 'success') {
        return result.data;
      }
      return [];
    } catch (error) {
      console.error('Error loading programs:', error);
      return [];
    }
  }

  async function saveProgram(data) {
    try {
      const response = await fetch(`${API_BASE}/programs`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error saving program:', error);
      return { status: 'error', message: 'Failed to save' };
    }
  }

  async function updateProgram(id, data) {
    try {
      const response = await fetch(`${API_BASE}/programs/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error updating program:', error);
      return { status: 'error', message: 'Failed to update' };
    }
  }

  async function deleteProgram(id) {
    try {
      const response = await fetch(`${API_BASE}/programs/${id}`, {
        method: 'DELETE'
      });
      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error deleting program:', error);
      return { status: 'error', message: 'Failed to delete' };
    }
  }

  // Local state
  let programs = JSON.parse(localStorage.getItem('programs') || '[]');
  let editingId = '';

  const save = (): void => {
    localStorage.setItem('programs', JSON.stringify(programs));
  };

  // Helpers
  function readFileAsDataURL(file: File): Promise<string>{
    return new Promise((resolve, reject) => {
      const fr = new FileReader();
      fr.onload = () => resolve(String(fr.result||''));
      fr.onerror = reject;
      fr.readAsDataURL(file);
    });
  }
  function isAcceptableImage(file: File): boolean{
    const okTypes = new Set(['image/png','image/jpeg','image/webp','image/svg+xml']);
    const max = 2 * 1024 * 1024; // 2MB
    return okTypes.has(file.type) && file.size <= max;
  }
  async function processImageFile(file: File): Promise<string>{
    // For SVG, return as-is
    if (file.type === 'image/svg+xml'){
      return await readFileAsDataURL(file);
    }
    // Resize raster images using canvas to max 800x800, compress to JPEG/WebP
    const dataUrl = await readFileAsDataURL(file);
    const img = new Image();
    const maxW = 800, maxH = 800;
    const quality = 0.85;
    return await new Promise((resolve, reject) => {
      img.onload = () => {
        let { width, height } = img;
        const ratio = Math.min(1, maxW / width, maxH / height);
        const outW = Math.max(1, Math.round(width * ratio));
        const outH = Math.max(1, Math.round(height * ratio));
        if (ratio === 1){
          // no resize needed
          resolve(dataUrl);
          return;
        }
        const canvas = document.createElement('canvas');
        canvas.width = outW; canvas.height = outH;
        const ctx = canvas.getContext('2d');
        if (!ctx){ resolve(dataUrl); return; }
        ctx.drawImage(img, 0, 0, outW, outH);
        // Prefer WebP if supported by browser, else JPEG
        const targetType = 'image/webp';
        try{
          const out = canvas.toDataURL(targetType, quality);
          resolve(out || dataUrl);
        }catch(_){
          try{
            const out2 = canvas.toDataURL('image/jpeg', quality);
            resolve(out2 || dataUrl);
          }catch(__){ resolve(dataUrl); }
        }
      };
      img.onerror = reject;
      img.src = dataUrl;
    });
  }

  const formatDate = (val: string): string => {
    if (!val) return '-';
    try{
      const d = new Date(val + 'T00:00:00');
      return d.toLocaleDateString('id-ID', { day:'2-digit', month:'short', year:'numeric' });
    }catch(e){ return val; }
  };

  const formatIDR = (num: number | string): string => {
    const n = Number(num);
    if (Number.isNaN(n)) return '';
    return new Intl.NumberFormat('id-ID', { style:'currency', currency:'IDR', maximumFractionDigits:0 }).format(n);
  };

  // Toast removed

  // Security & detection utils
  function isSafeUrl(input: string): boolean{
    try{
      const u = new URL(input);
      if (u.protocol !== 'https:') return false; // enforce HTTPS only
      // Disallow localhost, IP literals, and custom ports (except 443 default)
      const host = u.hostname;
      const isIPv4 = /^\d+\.\d+\.\d+\.\d+$/.test(host);
      const isIPv6 = /:\d*[a-fA-F0-9]+:/.test(host);
      if (host === 'localhost' || isIPv4 || isIPv6) return false;
      if (u.port && u.port !== '443') return false;
      // Basic javascript/data/mailto guards (already caught by protocol check)
      return true;
    }catch{ return false; }
  }

  function detectLinkType(input: string): 'wa' | 'qris' | null{
    try{
      const u = new URL(input);
      const host = u.hostname.toLowerCase();
      const full = (host + u.pathname + u.search).toLowerCase();
      // WhatsApp canonical hosts
      const waHosts = new Set(['wa.me','api.whatsapp.com','web.whatsapp.com','whatsapp.com']);
      if (waHosts.has(host)) return 'wa';
      // Heuristics for QRIS: common image/pdf link or contains "qris"
      if (/\.(png|jpe?g|webp|svg|pdf)$/i.test(u.pathname) || full.includes('qris')) return 'qris';
      return null;
    }catch{ return null; }
  }

  // Renderers
  const renderList = (items: any[], container: HTMLElement, type: string): void => {
    container.innerHTML = '';
    if (!items.length){
      const empty = document.createElement('div');
      empty.className = 'empty-state';
      empty.textContent = 'Belum ada data.';
      container.appendChild(empty);
      const garis = document.createElement('div');
      garis.className = 'garis';
      garis.innerHTML = '<div class="horizontal-line" aria-hidden="true"></div>';
      container.appendChild(garis);
      return;
    }

    const frag = document.createDocumentFragment();
    items.forEach((item: any) => {
      const el = document.createElement('div');
      el.className = 'program-item';
      el.dataset.id = item.id;
      el.dataset.type = type;

      const name = document.createElement('span');
      name.className = 'nama-program';

      if (type === 'program'){
        const nominalChip = item.nominal ? `<span class="chip">${formatIDR(item.nominal)}</span>` : '';
        const infoChip = item.info ? `<span class="chip" title="${item.info}">Info</span>` : '';
        const linkTypeChip = item.linkType ? `<span class="chip" title="${item.linkUrl || ''}">${String(item.linkType).toUpperCase()}</span>` : '';
        const imageChip = item.image ? `<span class="chip" title="Ada gambar terlampir">IMG</span>` : '';
        const descChip = item.desc ? `<span>${item.desc}</span>` : '';
        name.innerHTML = `${nominalChip} ${infoChip} ${linkTypeChip} ${imageChip} ${descChip}`;
        if (item.image){
          const thumb = document.createElement('img');
          thumb.className = 'program-thumb';
          thumb.src = item.image;
          thumb.alt = 'Gambar Program';
          thumb.addEventListener('click', () => openImageModal(item.image));
          name.insertAdjacentElement('afterbegin', thumb);
        }
      } else {
        const descChip = item.desc ? `<span>${item.desc}</span>` : '';
        name.innerHTML = `${item.title || 'Tanpa Judul'} ${descChip}`;
      }

      const date = document.createElement('span');
      date.className = 'tanggal-program';
      date.textContent = type === 'program' ? formatDate(item.deadline) : formatDate(item.period || item.deadline);

      const actions = document.createElement('div');
      actions.className = 'program-actions';
      const btnEdit = document.createElement('button');
      btnEdit.type = 'button';
      btnEdit.className = 'input-button secondary sm';
      btnEdit.textContent = 'Edit';
      const btnDelete = document.createElement('button');
      btnDelete.type = 'button';
      btnDelete.className = 'input-button danger sm';
      btnDelete.textContent = 'Hapus';
      actions.appendChild(btnEdit);
      actions.appendChild(btnDelete);

      el.appendChild(name);
      el.appendChild(date);
      el.appendChild(actions);
      frag.appendChild(el);

      // wire actions
      btnEdit.addEventListener('click', () => openProgramModal('edit', item));
      btnDelete.addEventListener('click', () => openConfirm(() => doDelete(item.id)));
    });

    container.appendChild(frag);

    const garis = document.createElement('div');
    garis.className = 'garis';
    garis.innerHTML = '<div class="horizontal-line" aria-hidden="true"></div>';
    container.appendChild(garis);
  };

  const renderAll = () => {
    renderList(programs, programListEl, 'program');
  };

  // Load programs from API
  loadPrograms().then(apiData => {
    if (apiData.length > 0) {
      programs = apiData;
      save();
    }
    renderAll();
  });

  // Add Program
  $('#btn-add-program').addEventListener('click', async () => {
    const nominal = $('#nominal-program').value.trim();
    const desc = $('#desc-program').value.trim();
    const info = $('#info-program').value.trim();
    const deadline = $('#deadline-program').value;
    const phone = $('#phone-program').value.trim();
    const rekening = $('#rekening-program').value.trim();
    let linkType = $('#link-type').value;
    const linkUrl = $('#link-url').value.trim();

    // Auto-detect type if empty or mismatch
    const detected = linkUrl ? detectLinkType(linkUrl) : null;
    if (!linkType && detected) linkType = detected;

    if (!desc || !deadline || !linkUrl || !linkType){
      const invalid: string[] = [];
      if (!desc) invalid.push('#desc-program');
      if (!deadline) invalid.push('#deadline-program');
      if (!linkUrl) invalid.push('#link-url');
      if (!linkType) invalid.push('#link-type');
      pulseInvalid(invalid);
      return;
    }
    // Safety check
    if (!isSafeUrl(linkUrl)){
      pulseInvalid(['#link-url']);
      alert('URL tidak aman. Wajib HTTPS dan tidak boleh localhost/IP/port non-443.');
      return;
    }
    // Strict type verification: must be WA or QRIS and match selection
    const detected2 = detectLinkType(linkUrl);
    if (!detected2){
      // Unknown/unsupported link type
      pulseInvalid(['#link-url']);
      alert('URL tidak dikenali sebagai WhatsApp atau QRIS. Pastikan menggunakan wa.me/whatsapp.com atau tautan QRIS (gambar/pdf yang mengandung "qris").');
      return;
    }
    if (detected2 !== linkType){
      // Don't auto-override silently; set UI to detected and ask user to confirm by submitting again
      $('#link-type').value = detected2;
      pulseInvalid(['#link-type']);
      const pesan = detected2 === 'wa' ? 'URL terdeteksi sebagai WhatsApp, bukan QRIS.' : 'URL terdeteksi sebagai QRIS, bukan WhatsApp.';
      alert(pesan + ' Jenis link telah disesuaikan otomatis. Silakan periksa lalu klik Input lagi.');
      return;
    }
    // Prepare optional image
    let imageData: string | null = null;
    const f = (imageInput as HTMLInputElement)?.files?.[0] as File | undefined;
    if (f){
      if (!isAcceptableImage(f)){
        pulseInvalid(['#image-program']);
        alert('Gambar tidak valid. Maks 2MB dan harus PNG/JPG/WEBP/SVG.');
        return;
      }
      try{
        imageData = await processImageFile(f);
      }catch{
        alert('Gagal membaca file gambar.');
        return;
      }
    }

    const payload = {
      nominal: nominal ? Number(nominal) : null,
      desc,
      info,
      deadline,
      phone: phone || null,
      rekening: rekening || null,
      link_type: linkType,
      link_url: linkUrl,
      image: imageData,
      is_active: true
    };

    const result = await saveProgram(payload);
    if (result.status === 'success') {
      // Reload programs from API
      const apiData = await loadPrograms();
      programs = apiData;
      save();
      renderAll();
      markAdded(programListEl);

      // Notify: program created (inline add)
      try {
        (window as any).KKNotif?.add(
          'success',
          'Program dibuat',
          payload.desc ? `Program baru: ${payload.desc}` : 'Program baru ditambahkan'
        );
        window.dispatchEvent(new Event('kk-notifs-updated'));
      } catch {}
    } else {
      alert('Gagal menyimpan program: ' + (result.message || 'Unknown error'));
    }

    // reset
    $('#nominal-program').value = '';
    $('#desc-program').value = '';
    $('#info-program').value = '';
    $('#deadline-program').value = '';
    $('#phone-program').value = '';
    $('#rekening-program').value = '';
    $('#link-type').value = '';
    $('#link-url').value = '';
    if (imageInput) (imageInput as HTMLInputElement).value = '';
  });

  // Modal logic
  function openProgramModal(mode = 'create', data?: any){
    if (!modal || !modalForm) return;
    modal.classList.add('show');
    modal.setAttribute('aria-hidden', 'false');
    modalTitle.textContent = mode === 'edit' ? 'Edit Program' : 'Buat Program';

    if (mode === 'edit' && data){
      editingId = data.id;
      pmId.value = data.id;
      pmDesc.value = data.desc || '';
      pmNominal.value = data.nominal ?? '';
      pmInfo.value = data.info || '';
      pmDeadline.value = data.deadline || '';
      pmPhone.value = data.phone || '';
      pmRek.value = data.rekening || '';
      pmLinkType.value = data.linkType || '';
      pmLinkUrl.value = data.linkUrl || '';
    } else {
      editingId = '';
      pmId.value = '';
      pmDesc.value = '';
      pmNominal.value = '';
      pmInfo.value = '';
      pmDeadline.value = '';
      pmPhone.value = '';
      pmRek.value = '';
      pmLinkType.value = '';
      pmLinkUrl.value = '';
    }
  }

  function closeProgramModal(){
    if (!modal) return;
    modal.classList.remove('show');
    modal.setAttribute('aria-hidden', 'true');
  }
  modal?.addEventListener('click', (e) => { if (e.target?.closest?.('[data-close]')) closeProgramModal(); });
  modalForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const payload = {
      desc: pmDesc.value.trim(),
      nominal: pmNominal.value ? Number(pmNominal.value) : null,
      info: pmInfo.value.trim(),
      deadline: pmDeadline.value,
      phone: pmPhone.value.trim() || null,
      rekening: pmRek.value.trim() || null,
      link_type: pmLinkType.value,
      link_url: pmLinkUrl.value.trim(),
      image: null as string | null,
      is_active: true
    };
    // Auto-detect in modal
    const detected = payload.link_url ? detectLinkType(payload.link_url) : null;
    if (!payload.link_type && detected){
      payload.link_type = detected;
      pmLinkType.value = detected;
    }
    if (!payload.desc || !payload.deadline || !payload.link_url || !payload.link_type){
      const invalid: string[] = [];
      if (!payload.desc) invalid.push('#pm-desc');
      if (!payload.deadline) invalid.push('#pm-deadline');
      if (!payload.link_url) invalid.push('#pm-link-url');
      if (!payload.link_type) invalid.push('#pm-link-type');
      pulseInvalid(invalid);
      return;
    }
    // Safety check for modal
    if (!isSafeUrl(payload.link_url)){
      pulseInvalid(['#pm-link-url']);
      alert('URL tidak aman. Wajib HTTPS dan tidak boleh localhost/IP/port non-443.');
      return;
    }
    // Strict type verification: must be WA or QRIS and match selection
    const detected2 = detectLinkType(payload.link_url);
    if (!detected2){
      pulseInvalid(['#pm-link-url']);
      alert('URL tidak dikenali sebagai WhatsApp atau QRIS. Pastikan menggunakan wa.me/whatsapp.com atau tautan QRIS (gambar/pdf yang mengandung "qris").');
      return;
    }
    if (detected2 !== payload.link_type){
      pmLinkType.value = detected2;
      pulseInvalid(['#pm-link-type']);
      const pesan = detected2 === 'wa' ? 'URL terdeteksi sebagai WhatsApp, bukan QRIS.' : 'URL terdeteksi sebagai QRIS, bukan WhatsApp.';
      alert(pesan + ' Jenis link telah disesuaikan otomatis. Silakan periksa lalu klik Simpan lagi.');
      return;
    }
    // Handle optional image in modal (keep old if not changed)
    const f2 = (pmImage as HTMLInputElement)?.files?.[0] as File | undefined;
    if (f2){
      if (!isAcceptableImage(f2)){
        pulseInvalid(['#pm-image']);
        alert('Gambar tidak valid. Maks 2MB dan harus PNG/JPG/WEBP/SVG.');
        return;
      }
      try{
        payload.image = await processImageFile(f2);
      }catch{
        alert('Gagal membaca file gambar.');
        return;
      }
    } else if (editingId){
      // Preserve existing image if present
      const old = programs.find(p => p.id === editingId);
      if (old) payload.image = old.image || null;
    }

    // Check if editing existing item
    const isEdit = !!editingId;
    let result;
    
    if (isEdit) {
      result = await updateProgram(editingId, payload);
    } else {
      result = await saveProgram(payload);
    }

    if (result.status === 'success') {
      // Reload programs from API
      const apiData = await loadPrograms();
      programs = apiData;
      save();
      renderAll();

      // Notify: program created/updated (modal)
      try {
        (window as any).KKNotif?.add(
          isEdit ? 'info' : 'success',
          isEdit ? 'Program diubah' : 'Program dibuat',
          payload.desc
            ? (isEdit ? `Perubahan: ${payload.desc}` : `Program baru: ${payload.desc}`)
            : (isEdit ? 'Program diperbarui' : 'Program baru ditambahkan')
        );
        window.dispatchEvent(new Event('kk-notifs-updated'));
      } catch {}

      closeProgramModal();
    } else {
      alert('Gagal menyimpan program: ' + (result.message || 'Unknown error'));
    }
  });

  // Confirm delete
  function openConfirm(onConfirm){
    if (!confirmModal || !confirmDeleteBtn) return;
    confirmModal.classList.add('show');
    confirmModal.setAttribute('aria-hidden', 'false');
    confirmDeleteBtn.onclick = () => { onConfirm?.(); closeConfirm(); };
  }
  function closeConfirm(){
    if (!confirmModal) return;
    confirmModal.classList.remove('show');
    confirmModal.setAttribute('aria-hidden', 'true');
  }
  confirmModal?.addEventListener('click', (e) => { if (e.target?.closest?.('[data-close]')) closeConfirm(); });
  async function doDelete(id){
    const result = await deleteProgram(id);
    if (result.status === 'success') {
      // Reload programs from API
      const apiData = await loadPrograms();
      programs = apiData;
      save();
      renderAll();
    } else {
      alert('Gagal menghapus program: ' + (result.message || 'Unknown error'));
    }
  }

  // Helpers
  function pulseInvalid(selectors: string[]): void{
    selectors.forEach((sel: string) => {
      const el = $(sel) as HTMLElement;
      if (!el) return;
      const base = el.style.boxShadow;
      el.style.boxShadow = '0 0 0 4px rgba(231,76,60,0.18)';
      el.style.borderColor = 'rgba(231,76,60,0.85)';
      setTimeout(()=> {
        el.style.boxShadow = base;
        el.style.borderColor = '';
      }, 900);
    });
  }

  function markAdded(container: HTMLElement): void{
    const item = container.querySelector('.program-item') as HTMLElement | null;
    if (item){
      item.classList.add('added');
      setTimeout(()=> item.classList.remove('added'), 1200);
    }
  }

  function openImageModal(src: string){
    if (!imgModal || !imgModalImg) return;
    (imgModalImg as HTMLImageElement).src = src;
    imgModal.classList.add('show');
    imgModal.setAttribute('aria-hidden','false');
  }
  function closeImageModal(){
    if (!imgModal || !imgModalImg) return;
    (imgModalImg as HTMLImageElement).src = '';
    imgModal.classList.remove('show');
    imgModal.setAttribute('aria-hidden','true');
  }
  imgModal?.addEventListener('click', (e) => { if (e.target?.closest?.('[data-close]')) closeImageModal(); });
</script>
